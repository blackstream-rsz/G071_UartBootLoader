
G071_NakedG071Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006428  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027ec  080064e4  080064e4  000164e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cd0  08008cd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd8  08008cd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  20000074  08008d54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  08008d54  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb9f  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000223e  00000000  00000000  0002ec3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00018370  00000000  00000000  00031d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bb89  00000000  00000000  0004a078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0009aa5f  00000000  00000000  00055c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000f0660  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d58  00000000  00000000  000f06e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  0000369c  00000000  00000000  000f1438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080064cc 	.word	0x080064cc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	080064cc 	.word	0x080064cc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <Wait_msec>:

STM32_BTL_COM	stm32_btl_com = {0};


static inline void Wait_msec(uint32_t millisecond)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <Wait_msec+0x38>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim3);
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <Wait_msec+0x38>)
 800061a:	0018      	movs	r0, r3
 800061c:	f002 fdee 	bl	80031fc <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim3) < millisecond) {
 8000620:	e000      	b.n	8000624 <Wait_msec+0x1c>
		asm("nop");
 8000622:	46c0      	nop			; (mov r8, r8)
	while(__HAL_TIM_GET_COUNTER(&htim3) < millisecond) {
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <Wait_msec+0x38>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f8      	bhi.n	8000622 <Wait_msec+0x1a>
	}
	 HAL_TIM_Base_Stop(&htim3);
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <Wait_msec+0x38>)
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fe0c 	bl	8003250 <HAL_TIM_Base_Stop>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000474 	.word	0x20000474

08000644 <PC_CommandParser>:
static void Stm32BTL_CMD_CallBack2_FW_WriteMemory(void);
static void Stm32BTL_CMD_CallBack3_FW_WriteMemory(void);


static  void PC_CommandParser(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	int len;
	if(pc_rx_buff[0] == 'a') {
 800064a:	4b32      	ldr	r3, [pc, #200]	; (8000714 <PC_CommandParser+0xd0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b61      	cmp	r3, #97	; 0x61
 8000650:	d111      	bne.n	8000676 <PC_CommandParser+0x32>

		len = sprintf((char*)pc_tx_buff,"Hello\r\n");
 8000652:	4a31      	ldr	r2, [pc, #196]	; (8000718 <PC_CommandParser+0xd4>)
 8000654:	4b31      	ldr	r3, [pc, #196]	; (800071c <PC_CommandParser+0xd8>)
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	2308      	movs	r3, #8
 800065c:	001a      	movs	r2, r3
 800065e:	f005 fb25 	bl	8005cac <memcpy>
 8000662:	2307      	movs	r3, #7
 8000664:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	b29a      	uxth	r2, r3
 800066a:	492b      	ldr	r1, [pc, #172]	; (8000718 <PC_CommandParser+0xd4>)
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <PC_CommandParser+0xdc>)
 800066e:	0018      	movs	r0, r3
 8000670:	f003 f994 	bl	800399c <HAL_UART_Transmit_DMA>
 8000674:	e044      	b.n	8000700 <PC_CommandParser+0xbc>
	}
	else if(pc_rx_buff[0] == 'b') {	/* 通常リセット */
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <PC_CommandParser+0xd0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b62      	cmp	r3, #98	; 0x62
 800067c:	d11d      	bne.n	80006ba <PC_CommandParser+0x76>
		ResetTarget(true);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f8be 	bl	8000800 <ResetTarget>
		SetBootMode(false);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 f875 	bl	8000774 <SetBootMode>
		Wait_msec(100);
 800068a:	2064      	movs	r0, #100	; 0x64
 800068c:	f7ff ffbc 	bl	8000608 <Wait_msec>
		ResetTarget(false);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f8b5 	bl	8000800 <ResetTarget>
		len = sprintf((char*)pc_tx_buff,"Normal Reset\r\n");
 8000696:	4a20      	ldr	r2, [pc, #128]	; (8000718 <PC_CommandParser+0xd4>)
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <PC_CommandParser+0xe0>)
 800069a:	0010      	movs	r0, r2
 800069c:	0019      	movs	r1, r3
 800069e:	230f      	movs	r3, #15
 80006a0:	001a      	movs	r2, r3
 80006a2:	f005 fb03 	bl	8005cac <memcpy>
 80006a6:	230e      	movs	r3, #14
 80006a8:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	491a      	ldr	r1, [pc, #104]	; (8000718 <PC_CommandParser+0xd4>)
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <PC_CommandParser+0xdc>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 f972 	bl	800399c <HAL_UART_Transmit_DMA>
 80006b8:	e022      	b.n	8000700 <PC_CommandParser+0xbc>
	}
	else if(pc_rx_buff[0] == 'c') {	/* boot mode */
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <PC_CommandParser+0xd0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b63      	cmp	r3, #99	; 0x63
 80006c0:	d111      	bne.n	80006e6 <PC_CommandParser+0xa2>
		ResetTarget(true);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 f89c 	bl	8000800 <ResetTarget>
		SetBootMode(true);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 f853 	bl	8000774 <SetBootMode>
		Wait_msec(10);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f7ff ff9a 	bl	8000608 <Wait_msec>
		ResetTarget(false);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 f893 	bl	8000800 <ResetTarget>
		Wait_msec(5);
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff94 	bl	8000608 <Wait_msec>
		Stm32BTL_Connent();
 80006e0:	f000 f92a 	bl	8000938 <Stm32BTL_Connent>
 80006e4:	e00c      	b.n	8000700 <PC_CommandParser+0xbc>
	}
	else if(pc_rx_buff[0] == 'd') {	/* Get CMD */
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <PC_CommandParser+0xd0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b64      	cmp	r3, #100	; 0x64
 80006ec:	d102      	bne.n	80006f4 <PC_CommandParser+0xb0>
		Stm32BTL_CMD_GET();
 80006ee:	f000 f98b 	bl	8000a08 <Stm32BTL_CMD_GET>
 80006f2:	e005      	b.n	8000700 <PC_CommandParser+0xbc>
	}
	else if(pc_rx_buff[0] == 'e') {	/* Get CMD */
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <PC_CommandParser+0xd0>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b65      	cmp	r3, #101	; 0x65
 80006fa:	d101      	bne.n	8000700 <PC_CommandParser+0xbc>
		Stm32BTL_CMD_FIRM_WRITE();
 80006fc:	f000 fa86 	bl	8000c0c <Stm32BTL_CMD_FIRM_WRITE>
	}
	HAL_UART_Receive_DMA(&huart2, pc_rx_buff, 1);
 8000700:	4904      	ldr	r1, [pc, #16]	; (8000714 <PC_CommandParser+0xd0>)
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <PC_CommandParser+0xdc>)
 8000704:	2201      	movs	r2, #1
 8000706:	0018      	movs	r0, r3
 8000708:	f003 f9dc 	bl	8003ac4 <HAL_UART_Receive_DMA>
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b002      	add	sp, #8
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000468 	.word	0x20000468
 8000718:	20000368 	.word	0x20000368
 800071c:	080064e4 	.word	0x080064e4
 8000720:	200005f8 	.word	0x200005f8
 8000724:	080064ec 	.word	0x080064ec

08000728 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hUart)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	if(hUart->Instance == USART2) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <HAL_UART_RxCpltCallback+0x40>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d102      	bne.n	8000740 <HAL_UART_RxCpltCallback+0x18>
		PC_CommandParser();
 800073a:	f7ff ff83 	bl	8000644 <PC_CommandParser>
	else if(hUart->Instance == TARGET_USART) {
		if(stm32_btl_com.funcCallBack != NULL) {
			stm32_btl_com.funcCallBack();	
		}
	}
}
 800073e:	e00f      	b.n	8000760 <HAL_UART_RxCpltCallback+0x38>
	else if(hUart->Instance == TARGET_USART) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a09      	ldr	r2, [pc, #36]	; (800076c <HAL_UART_RxCpltCallback+0x44>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d10a      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x38>
		if(stm32_btl_com.funcCallBack != NULL) {
 800074a:	4a09      	ldr	r2, [pc, #36]	; (8000770 <HAL_UART_RxCpltCallback+0x48>)
 800074c:	2381      	movs	r3, #129	; 0x81
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	58d3      	ldr	r3, [r2, r3]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <HAL_UART_RxCpltCallback+0x38>
			stm32_btl_com.funcCallBack();	
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_UART_RxCpltCallback+0x48>)
 8000758:	2381      	movs	r3, #129	; 0x81
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	58d3      	ldr	r3, [r2, r3]
 800075e:	4798      	blx	r3
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40004400 	.word	0x40004400
 800076c:	40004c00 	.word	0x40004c00
 8000770:	20000090 	.word	0x20000090

08000774 <SetBootMode>:

static  void SetBootMode(bool enable)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	0002      	movs	r2, r0
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	701a      	strb	r2, [r3, #0]
	static bool bFirst = true;
	if(enable) {
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <SetBootMode+0x24>
		HAL_GPIO_WritePin(GPIO_BOOT0_GPIO_Port,GPIO_BOOT0_Pin,1);
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	481a      	ldr	r0, [pc, #104]	; (80007f8 <SetBootMode+0x84>)
 800078e:	2201      	movs	r2, #1
 8000790:	0019      	movs	r1, r3
 8000792:	f001 fe1b 	bl	80023cc <HAL_GPIO_WritePin>
 8000796:	e006      	b.n	80007a6 <SetBootMode+0x32>
	}
	else {
		HAL_GPIO_WritePin(GPIO_BOOT0_GPIO_Port,GPIO_BOOT0_Pin,0);
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <SetBootMode+0x84>)
 800079e:	2200      	movs	r2, #0
 80007a0:	0019      	movs	r1, r3
 80007a2:	f001 fe13 	bl	80023cc <HAL_GPIO_WritePin>
	}

	if(bFirst) {
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <SetBootMode+0x88>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d01f      	beq.n	80007ee <SetBootMode+0x7a>
		bFirst = false;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <SetBootMode+0x88>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	210c      	movs	r1, #12
 80007b6:	000c      	movs	r4, r1
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	0018      	movs	r0, r3
 80007bc:	2314      	movs	r3, #20
 80007be:	001a      	movs	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f005 fa7c 	bl	8005cbe <memset>

	  /*Configure GPIO pin : GPIO_BOOT0_Pin */
	  GPIO_InitStruct.Pin = GPIO_BOOT0_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIO_BOOT0_GPIO_Port, &GPIO_InitStruct);
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <SetBootMode+0x84>)
 80007e6:	0019      	movs	r1, r3
 80007e8:	0010      	movs	r0, r2
 80007ea:	f001 fc8b 	bl	8002104 <HAL_GPIO_Init>
	}
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b009      	add	sp, #36	; 0x24
 80007f4:	bd90      	pop	{r4, r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	50000400 	.word	0x50000400
 80007fc:	20000000 	.word	0x20000000

08000800 <ResetTarget>:

static  void ResetTarget(bool enable)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	0002      	movs	r2, r0
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	701a      	strb	r2, [r3, #0]
	static bool bFirst = true;
	if(enable) {
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d007      	beq.n	8000824 <ResetTarget+0x24>
		HAL_GPIO_WritePin(GPIO_NRST_GPIO_Port,GPIO_NRST_Pin,0);
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	015b      	lsls	r3, r3, #5
 8000818:	481a      	ldr	r0, [pc, #104]	; (8000884 <ResetTarget+0x84>)
 800081a:	2200      	movs	r2, #0
 800081c:	0019      	movs	r1, r3
 800081e:	f001 fdd5 	bl	80023cc <HAL_GPIO_WritePin>
 8000822:	e006      	b.n	8000832 <ResetTarget+0x32>
	}
	else {
		HAL_GPIO_WritePin(GPIO_NRST_GPIO_Port,GPIO_NRST_Pin,1);
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	015b      	lsls	r3, r3, #5
 8000828:	4816      	ldr	r0, [pc, #88]	; (8000884 <ResetTarget+0x84>)
 800082a:	2201      	movs	r2, #1
 800082c:	0019      	movs	r1, r3
 800082e:	f001 fdcd 	bl	80023cc <HAL_GPIO_WritePin>
	}

	if(bFirst) {
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <ResetTarget+0x88>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d01f      	beq.n	800087a <ResetTarget+0x7a>
		bFirst = false;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <ResetTarget+0x88>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	210c      	movs	r1, #12
 8000842:	000c      	movs	r4, r1
 8000844:	187b      	adds	r3, r7, r1
 8000846:	0018      	movs	r0, r3
 8000848:	2314      	movs	r3, #20
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f005 fa36 	bl	8005cbe <memset>

	  /*Configure GPIO pin : GPIO_NRST_Pin */
	  GPIO_InitStruct.Pin = GPIO_NRST_Pin;
 8000852:	0021      	movs	r1, r4
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	0152      	lsls	r2, r2, #5
 800085a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2201      	movs	r2, #1
 8000860:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIO_NRST_GPIO_Port, &GPIO_InitStruct);
 800086e:	187b      	adds	r3, r7, r1
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <ResetTarget+0x84>)
 8000872:	0019      	movs	r1, r3
 8000874:	0010      	movs	r0, r2
 8000876:	f001 fc45 	bl	8002104 <HAL_GPIO_Init>
	}
}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b009      	add	sp, #36	; 0x24
 8000880:	bd90      	pop	{r4, r7, pc}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	50000400 	.word	0x50000400
 8000888:	20000001 	.word	0x20000001

0800088c <Stm32BTL_SendRecvCommand>:

static void Stm32BTL_SendRecvCommand(uint8_t *tx_buff,uint16_t tx_byte,uint8_t *rx_buff,uint16_t rx_byte,void (*call_back_func)(void))
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	0008      	movs	r0, r1
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	0019      	movs	r1, r3
 800089a:	250a      	movs	r5, #10
 800089c:	197b      	adds	r3, r7, r5
 800089e:	1c02      	adds	r2, r0, #0
 80008a0:	801a      	strh	r2, [r3, #0]
 80008a2:	2408      	movs	r4, #8
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	1c0a      	adds	r2, r1, #0
 80008a8:	801a      	strh	r2, [r3, #0]
	stm32_btl_com.funcCallBack = call_back_func;
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <Stm32BTL_SendRecvCommand+0x58>)
 80008ac:	2381      	movs	r3, #129	; 0x81
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	6a39      	ldr	r1, [r7, #32]
 80008b2:	50d1      	str	r1, [r2, r3]
	HAL_UART_Transmit_DMA(&hTargetUart, tx_buff, tx_byte);
 80008b4:	197b      	adds	r3, r7, r5
 80008b6:	881a      	ldrh	r2, [r3, #0]
 80008b8:	68f9      	ldr	r1, [r7, #12]
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <Stm32BTL_SendRecvCommand+0x5c>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f003 f86d 	bl	800399c <HAL_UART_Transmit_DMA>
	stm32_btl_com.rx_size = rx_byte;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <Stm32BTL_SendRecvCommand+0x58>)
 80008c4:	193a      	adds	r2, r7, r4
 80008c6:	4909      	ldr	r1, [pc, #36]	; (80008ec <Stm32BTL_SendRecvCommand+0x60>)
 80008c8:	8812      	ldrh	r2, [r2, #0]
 80008ca:	525a      	strh	r2, [r3, r1]
	HAL_UART_Receive_IT(&hTargetUart, rx_buff, rx_byte);	/* DMAに変更予定 */
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	881a      	ldrh	r2, [r3, #0]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <Stm32BTL_SendRecvCommand+0x5c>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 ff6d 	bl	80037b4 <HAL_UART_Receive_IT>
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b004      	add	sp, #16
 80008e0:	bdb0      	pop	{r4, r5, r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	20000090 	.word	0x20000090
 80008e8:	2000056c 	.word	0x2000056c
 80008ec:	0000020a 	.word	0x0000020a

080008f0 <Stm32BTL_RecvCommand>:

static void Stm32BTL_RecvCommand(uint8_t *rx_buff,uint16_t rx_byte,void (*call_back_func)(void))
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	200a      	movs	r0, #10
 80008fc:	183b      	adds	r3, r7, r0
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	801a      	strh	r2, [r3, #0]
	stm32_btl_com.funcCallBack = call_back_func;
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <Stm32BTL_RecvCommand+0x3c>)
 8000904:	2381      	movs	r3, #129	; 0x81
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	50d1      	str	r1, [r2, r3]
	stm32_btl_com.rx_size = rx_byte;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <Stm32BTL_RecvCommand+0x3c>)
 800090e:	183a      	adds	r2, r7, r0
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <Stm32BTL_RecvCommand+0x40>)
 8000912:	8812      	ldrh	r2, [r2, #0]
 8000914:	525a      	strh	r2, [r3, r1]
	HAL_UART_Receive_IT(&hTargetUart, rx_buff, rx_byte);	/* DMAに変更予定 */
 8000916:	183b      	adds	r3, r7, r0
 8000918:	881a      	ldrh	r2, [r3, #0]
 800091a:	68f9      	ldr	r1, [r7, #12]
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <Stm32BTL_RecvCommand+0x44>)
 800091e:	0018      	movs	r0, r3
 8000920:	f002 ff48 	bl	80037b4 <HAL_UART_Receive_IT>
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b004      	add	sp, #16
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000090 	.word	0x20000090
 8000930:	0000020a 	.word	0x0000020a
 8000934:	2000056c 	.word	0x2000056c

08000938 <Stm32BTL_Connent>:

static void Stm32BTL_Connent(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af02      	add	r7, sp, #8
	Stm32BTL_SendRecvCommand((uint8_t*)CMD_BOOT_LOADER_MODE,1,stm32_btl_com.rx_buff,1,Stm32BTL_CallBack_Connent);
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <Stm32BTL_Connent+0x1c>)
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <Stm32BTL_Connent+0x20>)
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <Stm32BTL_Connent+0x24>)
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	2101      	movs	r1, #1
 800094a:	f7ff ff9f 	bl	800088c <Stm32BTL_SendRecvCommand>
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000192 	.word	0x20000192
 8000958:	08008c30 	.word	0x08008c30
 800095c:	08000961 	.word	0x08000961

08000960 <Stm32BTL_CallBack_Connent>:
static void Stm32BTL_CallBack_Connent(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) {
 8000966:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <Stm32BTL_CallBack_Connent+0x90>)
 8000968:	2381      	movs	r3, #129	; 0x81
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	2b79      	cmp	r3, #121	; 0x79
 8000970:	d111      	bne.n	8000996 <Stm32BTL_CallBack_Connent+0x36>
		len = sprintf((char*)pc_tx_buff,"ACK\r\n");
 8000972:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <Stm32BTL_CallBack_Connent+0x94>)
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <Stm32BTL_CallBack_Connent+0x98>)
 8000976:	0010      	movs	r0, r2
 8000978:	0019      	movs	r1, r3
 800097a:	2306      	movs	r3, #6
 800097c:	001a      	movs	r2, r3
 800097e:	f005 f995 	bl	8005cac <memcpy>
 8000982:	2305      	movs	r3, #5
 8000984:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	b29a      	uxth	r2, r3
 800098a:	491a      	ldr	r1, [pc, #104]	; (80009f4 <Stm32BTL_CallBack_Connent+0x94>)
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <Stm32BTL_CallBack_Connent+0x9c>)
 800098e:	0018      	movs	r0, r3
 8000990:	f003 f804 	bl	800399c <HAL_UART_Transmit_DMA>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"unknown\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8000994:	e028      	b.n	80009e8 <Stm32BTL_CallBack_Connent+0x88>
	else if(stm32_btl_com.rx_buff[0] == NACK) {
 8000996:	4a16      	ldr	r2, [pc, #88]	; (80009f0 <Stm32BTL_CallBack_Connent+0x90>)
 8000998:	2381      	movs	r3, #129	; 0x81
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	2b1f      	cmp	r3, #31
 80009a0:	d111      	bne.n	80009c6 <Stm32BTL_CallBack_Connent+0x66>
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <Stm32BTL_CallBack_Connent+0x94>)
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <Stm32BTL_CallBack_Connent+0xa0>)
 80009a6:	0010      	movs	r0, r2
 80009a8:	0019      	movs	r1, r3
 80009aa:	2307      	movs	r3, #7
 80009ac:	001a      	movs	r2, r3
 80009ae:	f005 f97d 	bl	8005cac <memcpy>
 80009b2:	2306      	movs	r3, #6
 80009b4:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	490e      	ldr	r1, [pc, #56]	; (80009f4 <Stm32BTL_CallBack_Connent+0x94>)
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <Stm32BTL_CallBack_Connent+0x9c>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 ffec 	bl	800399c <HAL_UART_Transmit_DMA>
}
 80009c4:	e010      	b.n	80009e8 <Stm32BTL_CallBack_Connent+0x88>
		len = sprintf((char*)pc_tx_buff,"unknown\r\n");
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <Stm32BTL_CallBack_Connent+0x94>)
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <Stm32BTL_CallBack_Connent+0xa4>)
 80009ca:	0010      	movs	r0, r2
 80009cc:	0019      	movs	r1, r3
 80009ce:	230a      	movs	r3, #10
 80009d0:	001a      	movs	r2, r3
 80009d2:	f005 f96b 	bl	8005cac <memcpy>
 80009d6:	2309      	movs	r3, #9
 80009d8:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4905      	ldr	r1, [pc, #20]	; (80009f4 <Stm32BTL_CallBack_Connent+0x94>)
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <Stm32BTL_CallBack_Connent+0x9c>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 ffda 	bl	800399c <HAL_UART_Transmit_DMA>
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b002      	add	sp, #8
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000090 	.word	0x20000090
 80009f4:	20000368 	.word	0x20000368
 80009f8:	080064fc 	.word	0x080064fc
 80009fc:	200005f8 	.word	0x200005f8
 8000a00:	08006504 	.word	0x08006504
 8000a04:	0800650c 	.word	0x0800650c

08000a08 <Stm32BTL_CMD_GET>:

static void Stm32BTL_CMD_GET(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af02      	add	r7, sp, #8
	Stm32BTL_SendRecvCommand((uint8_t*)BTL_CMD_GET,2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack1_GET);
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <Stm32BTL_CMD_GET+0x1c>)
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <Stm32BTL_CMD_GET+0x20>)
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <Stm32BTL_CMD_GET+0x24>)
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	2301      	movs	r3, #1
 8000a18:	2102      	movs	r1, #2
 8000a1a:	f7ff ff37 	bl	800088c <Stm32BTL_SendRecvCommand>
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000192 	.word	0x20000192
 8000a28:	08008c34 	.word	0x08008c34
 8000a2c:	08000a31 	.word	0x08000a31

08000a30 <Stm32BTL_CMD_CallBack1_GET>:

static void Stm32BTL_CMD_CallBack1_GET(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) {
 8000a36:	4a11      	ldr	r2, [pc, #68]	; (8000a7c <Stm32BTL_CMD_CallBack1_GET+0x4c>)
 8000a38:	2381      	movs	r3, #129	; 0x81
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	5cd3      	ldrb	r3, [r2, r3]
 8000a3e:	2b79      	cmp	r3, #121	; 0x79
 8000a40:	d106      	bne.n	8000a50 <Stm32BTL_CMD_CallBack1_GET+0x20>
		Stm32BTL_RecvCommand(stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack2_GET);
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <Stm32BTL_CMD_CallBack1_GET+0x50>)
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <Stm32BTL_CMD_CallBack1_GET+0x54>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff51 	bl	80008f0 <Stm32BTL_RecvCommand>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8000a4e:	e010      	b.n	8000a72 <Stm32BTL_CMD_CallBack1_GET+0x42>
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <Stm32BTL_CMD_CallBack1_GET+0x58>)
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <Stm32BTL_CMD_CallBack1_GET+0x5c>)
 8000a54:	0010      	movs	r0, r2
 8000a56:	0019      	movs	r1, r3
 8000a58:	2307      	movs	r3, #7
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	f005 f926 	bl	8005cac <memcpy>
 8000a60:	2306      	movs	r3, #6
 8000a62:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	4907      	ldr	r1, [pc, #28]	; (8000a88 <Stm32BTL_CMD_CallBack1_GET+0x58>)
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <Stm32BTL_CMD_CallBack1_GET+0x60>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 ff95 	bl	800399c <HAL_UART_Transmit_DMA>
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	20000090 	.word	0x20000090
 8000a80:	08000a95 	.word	0x08000a95
 8000a84:	20000192 	.word	0x20000192
 8000a88:	20000368 	.word	0x20000368
 8000a8c:	08006504 	.word	0x08006504
 8000a90:	200005f8 	.word	0x200005f8

08000a94 <Stm32BTL_CMD_CallBack2_GET>:

static void Stm32BTL_CMD_CallBack2_GET(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	int32_t len;
	uint16_t size = (uint16_t)stm32_btl_com.rx_buff[0] + 2;	/* ACK or NACK分加算 */
 8000a9a:	4a11      	ldr	r2, [pc, #68]	; (8000ae0 <Stm32BTL_CMD_CallBack2_GET+0x4c>)
 8000a9c:	2381      	movs	r3, #129	; 0x81
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	5cd3      	ldrb	r3, [r2, r3]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	1dbb      	adds	r3, r7, #6
 8000aa6:	3202      	adds	r2, #2
 8000aa8:	801a      	strh	r2, [r3, #0]

	len = sprintf((char*)pc_tx_buff, "GET Size:%u\r\n",size);
 8000aaa:	1dbb      	adds	r3, r7, #6
 8000aac:	881a      	ldrh	r2, [r3, #0]
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <Stm32BTL_CMD_CallBack2_GET+0x50>)
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <Stm32BTL_CMD_CallBack2_GET+0x54>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f005 f90c 	bl	8005cd0 <siprintf>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4909      	ldr	r1, [pc, #36]	; (8000ae8 <Stm32BTL_CMD_CallBack2_GET+0x54>)
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <Stm32BTL_CMD_CallBack2_GET+0x58>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 ff69 	bl	800399c <HAL_UART_Transmit_DMA>

	Stm32BTL_RecvCommand(stm32_btl_com.rx_buff,size,Stm32BTL_CMD_CallBack3_GET);
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <Stm32BTL_CMD_CallBack2_GET+0x5c>)
 8000acc:	1dbb      	adds	r3, r7, #6
 8000ace:	8819      	ldrh	r1, [r3, #0]
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <Stm32BTL_CMD_CallBack2_GET+0x60>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff ff0c 	bl	80008f0 <Stm32BTL_RecvCommand>
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000090 	.word	0x20000090
 8000ae4:	08006518 	.word	0x08006518
 8000ae8:	20000368 	.word	0x20000368
 8000aec:	200005f8 	.word	0x200005f8
 8000af0:	08000af9 	.word	0x08000af9
 8000af4:	20000192 	.word	0x20000192

08000af8 <Stm32BTL_CMD_CallBack3_GET>:

static void Stm32BTL_CMD_CallBack3_GET(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
	uint16_t i;
	uint32_t len = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]

	for(i = 0; i < stm32_btl_com.rx_size -1;i++) {
 8000b02:	1dbb      	adds	r3, r7, #6
 8000b04:	2200      	movs	r2, #0
 8000b06:	801a      	strh	r2, [r3, #0]
 8000b08:	e019      	b.n	8000b3e <Stm32BTL_CMD_CallBack3_GET+0x46>
		len += sprintf((char*)pc_tx_buff + len,"%02x ",stm32_btl_com.rx_buff[i]);
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	4b37      	ldr	r3, [pc, #220]	; (8000bec <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000b0e:	18d0      	adds	r0, r2, r3
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	881a      	ldrh	r2, [r3, #0]
 8000b14:	4936      	ldr	r1, [pc, #216]	; (8000bf0 <Stm32BTL_CMD_CallBack3_GET+0xf8>)
 8000b16:	2381      	movs	r3, #129	; 0x81
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	188a      	adds	r2, r1, r2
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	001a      	movs	r2, r3
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <Stm32BTL_CMD_CallBack3_GET+0xfc>)
 8000b24:	0019      	movs	r1, r3
 8000b26:	f005 f8d3 	bl	8005cd0 <siprintf>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	189b      	adds	r3, r3, r2
 8000b32:	603b      	str	r3, [r7, #0]
	for(i = 0; i < stm32_btl_com.rx_size -1;i++) {
 8000b34:	1dbb      	adds	r3, r7, #6
 8000b36:	881a      	ldrh	r2, [r3, #0]
 8000b38:	1dbb      	adds	r3, r7, #6
 8000b3a:	3201      	adds	r2, #1
 8000b3c:	801a      	strh	r2, [r3, #0]
 8000b3e:	1dbb      	adds	r3, r7, #6
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <Stm32BTL_CMD_CallBack3_GET+0xf8>)
 8000b44:	492c      	ldr	r1, [pc, #176]	; (8000bf8 <Stm32BTL_CMD_CallBack3_GET+0x100>)
 8000b46:	5a5b      	ldrh	r3, [r3, r1]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbdd      	blt.n	8000b0a <Stm32BTL_CMD_CallBack3_GET+0x12>
	}

	if(stm32_btl_com.rx_buff[i] == ACK) {
 8000b4e:	1dbb      	adds	r3, r7, #6
 8000b50:	881a      	ldrh	r2, [r3, #0]
 8000b52:	4927      	ldr	r1, [pc, #156]	; (8000bf0 <Stm32BTL_CMD_CallBack3_GET+0xf8>)
 8000b54:	2381      	movs	r3, #129	; 0x81
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	188a      	adds	r2, r1, r2
 8000b5a:	18d3      	adds	r3, r2, r3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b79      	cmp	r3, #121	; 0x79
 8000b60:	d10f      	bne.n	8000b82 <Stm32BTL_CMD_CallBack3_GET+0x8a>
		len += sprintf((char*)pc_tx_buff + len,"\r\nGET ACK\r\n");
 8000b62:	683a      	ldr	r2, [r7, #0]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000b66:	18d2      	adds	r2, r2, r3
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <Stm32BTL_CMD_CallBack3_GET+0x104>)
 8000b6a:	0010      	movs	r0, r2
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	230c      	movs	r3, #12
 8000b70:	001a      	movs	r2, r3
 8000b72:	f005 f89b 	bl	8005cac <memcpy>
 8000b76:	230b      	movs	r3, #11
 8000b78:	001a      	movs	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	189b      	adds	r3, r3, r2
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	e028      	b.n	8000bd4 <Stm32BTL_CMD_CallBack3_GET+0xdc>
	}
	else if(stm32_btl_com.rx_buff[i] == NACK) {
 8000b82:	1dbb      	adds	r3, r7, #6
 8000b84:	881a      	ldrh	r2, [r3, #0]
 8000b86:	491a      	ldr	r1, [pc, #104]	; (8000bf0 <Stm32BTL_CMD_CallBack3_GET+0xf8>)
 8000b88:	2381      	movs	r3, #129	; 0x81
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	188a      	adds	r2, r1, r2
 8000b8e:	18d3      	adds	r3, r2, r3
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b1f      	cmp	r3, #31
 8000b94:	d10f      	bne.n	8000bb6 <Stm32BTL_CMD_CallBack3_GET+0xbe>
		len += sprintf((char*)pc_tx_buff + len,"\r\nGET NACK\r\n");
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000b9a:	18d2      	adds	r2, r2, r3
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <Stm32BTL_CMD_CallBack3_GET+0x108>)
 8000b9e:	0010      	movs	r0, r2
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	230d      	movs	r3, #13
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	f005 f881 	bl	8005cac <memcpy>
 8000baa:	230c      	movs	r3, #12
 8000bac:	001a      	movs	r2, r3
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	189b      	adds	r3, r3, r2
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	e00e      	b.n	8000bd4 <Stm32BTL_CMD_CallBack3_GET+0xdc>
	}
	else {
		len += sprintf((char*)pc_tx_buff + len,"\r\nGET unknown\r\n");
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000bba:	18d2      	adds	r2, r2, r3
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <Stm32BTL_CMD_CallBack3_GET+0x10c>)
 8000bbe:	0010      	movs	r0, r2
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	f005 f871 	bl	8005cac <memcpy>
 8000bca:	230f      	movs	r3, #15
 8000bcc:	001a      	movs	r2, r3
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	189b      	adds	r3, r3, r2
 8000bd2:	603b      	str	r3, [r7, #0]
	}
	HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4904      	ldr	r1, [pc, #16]	; (8000bec <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <Stm32BTL_CMD_CallBack3_GET+0x110>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 fedd 	bl	800399c <HAL_UART_Transmit_DMA>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	20000368 	.word	0x20000368
 8000bf0:	20000090 	.word	0x20000090
 8000bf4:	08006528 	.word	0x08006528
 8000bf8:	0000020a 	.word	0x0000020a
 8000bfc:	08006530 	.word	0x08006530
 8000c00:	0800653c 	.word	0x0800653c
 8000c04:	0800654c 	.word	0x0800654c
 8000c08:	200005f8 	.word	0x200005f8

08000c0c <Stm32BTL_CMD_FIRM_WRITE>:

static void Stm32BTL_CMD_FIRM_WRITE(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af02      	add	r7, sp, #8
	stm32_btl_com.firm_write_size = 0;
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <Stm32BTL_CMD_FIRM_WRITE+0x28>)
 8000c14:	2383      	movs	r3, #131	; 0x83
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	2100      	movs	r1, #0
 8000c1a:	50d1      	str	r1, [r2, r3]
		len = sprintf((char*)pc_tx_buff,"WriteMemory FirmSizeErr\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
	else {
		/* MemWriteコマンド送信 */
		Stm32BTL_SendRecvCommand((uint8_t*)BTL_CMD_WriteMemory,2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack1_FW_WriteMemory);
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <Stm32BTL_CMD_FIRM_WRITE+0x2c>)
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <Stm32BTL_CMD_FIRM_WRITE+0x30>)
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <Stm32BTL_CMD_FIRM_WRITE+0x34>)
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2301      	movs	r3, #1
 8000c26:	2102      	movs	r1, #2
 8000c28:	f7ff fe30 	bl	800088c <Stm32BTL_SendRecvCommand>
	}
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	20000090 	.word	0x20000090
 8000c38:	20000192 	.word	0x20000192
 8000c3c:	08008c38 	.word	0x08008c38
 8000c40:	08000c45 	.word	0x08000c45

08000c44 <Stm32BTL_CMD_CallBack1_FW_WriteMemory>:

static void Stm32BTL_CMD_CallBack1_FW_WriteMemory(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
	if(stm32_btl_com.rx_buff[0] == ACK) {
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c4c:	2381      	movs	r3, #129	; 0x81
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	5cd3      	ldrb	r3, [r2, r3]
 8000c52:	2b79      	cmp	r3, #121	; 0x79
 8000c54:	d139      	bne.n	8000cca <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0x86>
		uint32_t start = G071_FIRM_START_ADDRESS + stm32_btl_com.firm_write_size;
 8000c56:	4a27      	ldr	r2, [pc, #156]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c58:	2383      	movs	r3, #131	; 0x83
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	58d3      	ldr	r3, [r2, r3]
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	0512      	lsls	r2, r2, #20
 8000c62:	4694      	mov	ip, r2
 8000c64:	4463      	add	r3, ip
 8000c66:	603b      	str	r3, [r7, #0]
		stm32_btl_com.tx_buff[0] = ((start >> 24) & 0x000000ff);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	0e1b      	lsrs	r3, r3, #24
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c70:	701a      	strb	r2, [r3, #0]
		stm32_btl_com.tx_buff[1] = ((start >> 16) & 0x000000ff);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	0c1b      	lsrs	r3, r3, #16
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c7a:	705a      	strb	r2, [r3, #1]
		stm32_btl_com.tx_buff[2] = ((start >>  8) & 0x000000ff);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	0a1b      	lsrs	r3, r3, #8
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c84:	709a      	strb	r2, [r3, #2]
		stm32_btl_com.tx_buff[3] = ((start      ) & 0x000000ff);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c8c:	70da      	strb	r2, [r3, #3]
		stm32_btl_com.tx_buff[4] = stm32_btl_com.tx_buff[0] ^ stm32_btl_com.tx_buff[1] ^ stm32_btl_com.tx_buff[2] ^ stm32_btl_com.tx_buff[3];
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c94:	785b      	ldrb	r3, [r3, #1]
 8000c96:	4053      	eors	r3, r2
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	4053      	eors	r3, r2
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000ca4:	78db      	ldrb	r3, [r3, #3]
 8000ca6:	4053      	eors	r3, r2
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000cac:	711a      	strb	r2, [r3, #4]
	
		stm32_btl_com.lattest_write_size = 0;
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000cb0:	2384      	movs	r3, #132	; 0x84
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	50d1      	str	r1, [r2, r3]
		Stm32BTL_SendRecvCommand(stm32_btl_com.tx_buff,5,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack2_FW_WriteMemory);
 8000cb8:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb4>)
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb8>)
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	2105      	movs	r1, #5
 8000cc4:	f7ff fde2 	bl	800088c <Stm32BTL_SendRecvCommand>
	else {
		int32_t len;
		len = sprintf((char*)pc_tx_buff,"WriteMemory NACK\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8000cc8:	e010      	b.n	8000cec <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xa8>
		len = sprintf((char*)pc_tx_buff,"WriteMemory NACK\r\n");
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xbc>)
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xc0>)
 8000cce:	0010      	movs	r0, r2
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	2313      	movs	r3, #19
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	f004 ffe9 	bl	8005cac <memcpy>
 8000cda:	2312      	movs	r3, #18
 8000cdc:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4907      	ldr	r1, [pc, #28]	; (8000d00 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xbc>)
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xc4>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f002 fe58 	bl	800399c <HAL_UART_Transmit_DMA>
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000090 	.word	0x20000090
 8000cf8:	20000192 	.word	0x20000192
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	20000368 	.word	0x20000368
 8000d04:	0800655c 	.word	0x0800655c
 8000d08:	200005f8 	.word	0x200005f8

08000d0c <Stm32BTL_CMD_CallBack2_FW_WriteMemory>:

static void Stm32BTL_CMD_CallBack2_FW_WriteMemory(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
		int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) { /* StartAddress CheckSum OK*/
 8000d12:	4a50      	ldr	r2, [pc, #320]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000d14:	2381      	movs	r3, #129	; 0x81
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	5cd3      	ldrb	r3, [r2, r3]
 8000d1a:	2b79      	cmp	r3, #121	; 0x79
 8000d1c:	d000      	beq.n	8000d20 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x14>
 8000d1e:	e085      	b.n	8000e2c <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x120>
		uint8_t xor = 0;
 8000d20:	230f      	movs	r3, #15
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
		uint8_t data;
		uint16_t i;
		uint16_t size = G071_FIRM_SIZE - stm32_btl_com.firm_write_size;
 8000d28:	4a4a      	ldr	r2, [pc, #296]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000d2a:	2383      	movs	r3, #131	; 0x83
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	58d3      	ldr	r3, [r2, r3]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	200a      	movs	r0, #10
 8000d34:	183b      	adds	r3, r7, r0
 8000d36:	4948      	ldr	r1, [pc, #288]	; (8000e58 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x14c>)
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	801a      	strh	r2, [r3, #0]
		if(size == 0) {
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x5c>
			/* こないはず */
			len = sprintf((char*)pc_tx_buff,"WriteMemory Send Size Zero\r\n");
 8000d44:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x150>)
 8000d46:	4b46      	ldr	r3, [pc, #280]	; (8000e60 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x154>)
 8000d48:	0010      	movs	r0, r2
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	231d      	movs	r3, #29
 8000d4e:	001a      	movs	r2, r3
 8000d50:	f004 ffac 	bl	8005cac <memcpy>
 8000d54:	231c      	movs	r3, #28
 8000d56:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	493f      	ldr	r1, [pc, #252]	; (8000e5c <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x150>)
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x158>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 fe1b 	bl	800399c <HAL_UART_Transmit_DMA>
			return;
 8000d66:	e072      	b.n	8000e4e <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x142>
		}
		else if(size > 256) {
 8000d68:	230a      	movs	r3, #10
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	881a      	ldrh	r2, [r3, #0]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d904      	bls.n	8000d80 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x74>
			size = 256;
 8000d76:	230a      	movs	r3, #10
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	0052      	lsls	r2, r2, #1
 8000d7e:	801a      	strh	r2, [r3, #0]
		}
		stm32_btl_com.tx_buff[0] = (uint8_t)(size - 1);
 8000d80:	230a      	movs	r3, #10
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000d8e:	701a      	strb	r2, [r3, #0]
		xor = stm32_btl_com.tx_buff[0];
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	4a2f      	ldr	r2, [pc, #188]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < size; i++) {
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	2200      	movs	r2, #0
 8000da0:	801a      	strh	r2, [r3, #0]
 8000da2:	e01f      	b.n	8000de4 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0xd8>
			data = G071_FirmBinaly[stm32_btl_com.firm_write_size + i];
 8000da4:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000da6:	2383      	movs	r3, #131	; 0x83
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	58d2      	ldr	r2, [r2, r3]
 8000dac:	200c      	movs	r0, #12
 8000dae:	183b      	adds	r3, r7, r0
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	18d2      	adds	r2, r2, r3
 8000db4:	1cfb      	adds	r3, r7, #3
 8000db6:	492c      	ldr	r1, [pc, #176]	; (8000e68 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x15c>)
 8000db8:	5c8a      	ldrb	r2, [r1, r2]
 8000dba:	701a      	strb	r2, [r3, #0]
			stm32_btl_com.tx_buff[i + 1] = data;
 8000dbc:	183b      	adds	r3, r7, r0
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000dc4:	1cf9      	adds	r1, r7, #3
 8000dc6:	7809      	ldrb	r1, [r1, #0]
 8000dc8:	54d1      	strb	r1, [r2, r3]
			xor ^= data;
 8000dca:	220f      	movs	r2, #15
 8000dcc:	18bb      	adds	r3, r7, r2
 8000dce:	18b9      	adds	r1, r7, r2
 8000dd0:	1cfa      	adds	r2, r7, #3
 8000dd2:	7809      	ldrb	r1, [r1, #0]
 8000dd4:	7812      	ldrb	r2, [r2, #0]
 8000dd6:	404a      	eors	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < size; i++) {
 8000dda:	183b      	adds	r3, r7, r0
 8000ddc:	881a      	ldrh	r2, [r3, #0]
 8000dde:	183b      	adds	r3, r7, r0
 8000de0:	3201      	adds	r2, #1
 8000de2:	801a      	strh	r2, [r3, #0]
 8000de4:	230c      	movs	r3, #12
 8000de6:	18fa      	adds	r2, r7, r3
 8000de8:	230a      	movs	r3, #10
 8000dea:	18fb      	adds	r3, r7, r3
 8000dec:	8812      	ldrh	r2, [r2, #0]
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3d7      	bcc.n	8000da4 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x98>
		}
		stm32_btl_com.tx_buff[i + 1] = xor;
 8000df4:	230c      	movs	r3, #12
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000dfe:	210f      	movs	r1, #15
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	7809      	ldrb	r1, [r1, #0]
 8000e04:	54d1      	strb	r1, [r2, r3]

		stm32_btl_com.lattest_write_size = size;
 8000e06:	200a      	movs	r0, #10
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	8819      	ldrh	r1, [r3, #0]
 8000e0c:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000e0e:	2384      	movs	r3, #132	; 0x84
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	50d1      	str	r1, [r2, r3]

		Stm32BTL_SendRecvCommand(stm32_btl_com.tx_buff,size+2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack3_FW_WriteMemory);
 8000e14:	183b      	adds	r3, r7, r0
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	b299      	uxth	r1, r3
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x160>)
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x164>)
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	f7ff fd31 	bl	800088c <Stm32BTL_SendRecvCommand>
 8000e2a:	e010      	b.n	8000e4e <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x142>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"WriteMemory Address Checksum NACK\r\n");
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x150>)
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x168>)
 8000e30:	0010      	movs	r0, r2
 8000e32:	0019      	movs	r1, r3
 8000e34:	2324      	movs	r3, #36	; 0x24
 8000e36:	001a      	movs	r2, r3
 8000e38:	f004 ff38 	bl	8005cac <memcpy>
 8000e3c:	2323      	movs	r3, #35	; 0x23
 8000e3e:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4905      	ldr	r1, [pc, #20]	; (8000e5c <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x150>)
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x158>)
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f002 fda7 	bl	800399c <HAL_UART_Transmit_DMA>
	}
}
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b004      	add	sp, #16
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000090 	.word	0x20000090
 8000e58:	00002648 	.word	0x00002648
 8000e5c:	20000368 	.word	0x20000368
 8000e60:	08006570 	.word	0x08006570
 8000e64:	200005f8 	.word	0x200005f8
 8000e68:	080065e8 	.word	0x080065e8
 8000e6c:	20000192 	.word	0x20000192
 8000e70:	08000e79 	.word	0x08000e79
 8000e74:	08006590 	.word	0x08006590

08000e78 <Stm32BTL_CMD_CallBack3_FW_WriteMemory>:

static void Stm32BTL_CMD_CallBack3_FW_WriteMemory(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af02      	add	r7, sp, #8
	int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) { /* StartAddress CheckSum OK*/
 8000e7e:	4a25      	ldr	r2, [pc, #148]	; (8000f14 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e80:	2381      	movs	r3, #129	; 0x81
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	2b79      	cmp	r3, #121	; 0x79
 8000e88:	d12e      	bne.n	8000ee8 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x70>
		stm32_btl_com.firm_write_size += stm32_btl_com.lattest_write_size;
 8000e8a:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e8c:	2383      	movs	r3, #131	; 0x83
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	58d2      	ldr	r2, [r2, r3]
 8000e92:	4920      	ldr	r1, [pc, #128]	; (8000f14 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e94:	2384      	movs	r3, #132	; 0x84
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	58cb      	ldr	r3, [r1, r3]
 8000e9a:	18d1      	adds	r1, r2, r3
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e9e:	2383      	movs	r3, #131	; 0x83
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	50d1      	str	r1, [r2, r3]
		if(G071_FIRM_SIZE <= stm32_btl_com.firm_write_size) {
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000ea6:	2383      	movs	r3, #131	; 0x83
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	58d3      	ldr	r3, [r2, r3]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d911      	bls.n	8000ed6 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x5e>
			len = sprintf((char*)pc_tx_buff,"WriteMemory WriteComplete NoCheck\r\n");
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa4>)
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa8>)
 8000eb6:	0010      	movs	r0, r2
 8000eb8:	0019      	movs	r1, r3
 8000eba:	2324      	movs	r3, #36	; 0x24
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	f004 fef5 	bl	8005cac <memcpy>
 8000ec2:	2323      	movs	r3, #35	; 0x23
 8000ec4:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4914      	ldr	r1, [pc, #80]	; (8000f1c <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa4>)
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xac>)
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f002 fd64 	bl	800399c <HAL_UART_Transmit_DMA>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"WriteMemory Address Checksum NACK\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8000ed4:	e019      	b.n	8000f0a <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x92>
			Stm32BTL_SendRecvCommand((uint8_t*)BTL_CMD_WriteMemory,2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack1_FW_WriteMemory);
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xb0>)
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xb4>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xb8>)
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	f7ff fcd3 	bl	800088c <Stm32BTL_SendRecvCommand>
}
 8000ee6:	e010      	b.n	8000f0a <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x92>
		len = sprintf((char*)pc_tx_buff,"WriteMemory Address Checksum NACK\r\n");
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa4>)
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xbc>)
 8000eec:	0010      	movs	r0, r2
 8000eee:	0019      	movs	r1, r3
 8000ef0:	2324      	movs	r3, #36	; 0x24
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	f004 feda 	bl	8005cac <memcpy>
 8000ef8:	2323      	movs	r3, #35	; 0x23
 8000efa:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4906      	ldr	r1, [pc, #24]	; (8000f1c <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa4>)
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xac>)
 8000f04:	0018      	movs	r0, r3
 8000f06:	f002 fd49 	bl	800399c <HAL_UART_Transmit_DMA>
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000090 	.word	0x20000090
 8000f18:	00002647 	.word	0x00002647
 8000f1c:	20000368 	.word	0x20000368
 8000f20:	080065b4 	.word	0x080065b4
 8000f24:	200005f8 	.word	0x200005f8
 8000f28:	20000192 	.word	0x20000192
 8000f2c:	08008c38 	.word	0x08008c38
 8000f30:	08000c45 	.word	0x08000c45
 8000f34:	08006590 	.word	0x08006590

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3c:	f000 fc9c 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f818 	bl	8000f74 <SystemClock_Config>

#if 1
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 f9b4 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f48:	f000 f984 	bl	8001254 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 f8fe 	bl	800114c <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8000f50:	f000 f8d8 	bl	8001104 <MX_TIM14_Init>
  MX_USART4_UART_Init();
 8000f54:	f000 f948 	bl	80011e8 <MX_USART4_UART_Init>
  MX_TIM3_Init();
 8000f58:	f000 f87c 	bl	8001054 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
#endif

	HAL_UART_Receive_DMA(&huart2, pc_rx_buff, 1);
 8000f5c:	4903      	ldr	r1, [pc, #12]	; (8000f6c <main+0x34>)
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <main+0x38>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	0018      	movs	r0, r3
 8000f64:	f002 fdae 	bl	8003ac4 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <main+0x30>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	20000468 	.word	0x20000468
 8000f70:	200005f8 	.word	0x200005f8

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b0a1      	sub	sp, #132	; 0x84
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	2448      	movs	r4, #72	; 0x48
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	0018      	movs	r0, r3
 8000f80:	2338      	movs	r3, #56	; 0x38
 8000f82:	001a      	movs	r2, r3
 8000f84:	2100      	movs	r1, #0
 8000f86:	f004 fe9a 	bl	8005cbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8a:	2338      	movs	r3, #56	; 0x38
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	0018      	movs	r0, r3
 8000f90:	2310      	movs	r3, #16
 8000f92:	001a      	movs	r2, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	f004 fe92 	bl	8005cbe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	2334      	movs	r3, #52	; 0x34
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	f004 fe8b 	bl	8005cbe <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f001 fa2b 	bl	8002408 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fb8:	193b      	adds	r3, r7, r4
 8000fba:	22a0      	movs	r2, #160	; 0xa0
 8000fbc:	02d2      	lsls	r2, r2, #11
 8000fbe:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	0021      	movs	r1, r4
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	0292      	lsls	r2, r2, #10
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	0492      	lsls	r2, r2, #18
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	22c0      	movs	r2, #192	; 0xc0
 8000fee:	05d2      	lsls	r2, r2, #23
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f001 fa53 	bl	80024a0 <HAL_RCC_OscConfig>
 8000ffa:	1e03      	subs	r3, r0, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ffe:	f000 f9c7 	bl	8001390 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	2138      	movs	r1, #56	; 0x38
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2207      	movs	r2, #7
 8001008:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2202      	movs	r2, #2
 800100e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2102      	movs	r1, #2
 8001020:	0018      	movs	r0, r3
 8001022:	f001 fd5d 	bl	8002ae0 <HAL_RCC_ClockConfig>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800102a:	f000 f9b1 	bl	8001390 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2202      	movs	r2, #2
 8001032:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	0018      	movs	r0, r3
 800103e:	f001 fef9 	bl	8002e34 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001046:	f000 f9a3 	bl	8001390 <Error_Handler>
  }
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b021      	add	sp, #132	; 0x84
 8001050:	bd90      	pop	{r4, r7, pc}
	...

08001054 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	2310      	movs	r3, #16
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	0018      	movs	r0, r3
 8001060:	2310      	movs	r3, #16
 8001062:	001a      	movs	r2, r3
 8001064:	2100      	movs	r1, #0
 8001066:	f004 fe2a 	bl	8005cbe <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	0018      	movs	r0, r3
 800106e:	230c      	movs	r3, #12
 8001070:	001a      	movs	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f004 fe23 	bl	8005cbe <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_TIM3_Init+0xa0>)
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <MX_TIM3_Init+0xa4>)
 800107c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM3_Init+0xa0>)
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <MX_TIM3_Init+0xa8>)
 8001082:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM3_Init+0xa0>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_TIM3_Init+0xa0>)
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_TIM3_Init+0xac>)
 800108e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM3_Init+0xa0>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_TIM3_Init+0xa0>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM3_Init+0xa0>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f002 f880 	bl	80031a4 <HAL_TIM_Base_Init>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80010a8:	f000 f972 	bl	8001390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ac:	2110      	movs	r1, #16
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	0152      	lsls	r2, r2, #5
 80010b4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010b6:	187a      	adds	r2, r7, r1
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_TIM3_Init+0xa0>)
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 f8f1 	bl	80032a4 <HAL_TIM_ConfigClockSource>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80010c6:	f000 f963 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010d6:	1d3a      	adds	r2, r7, #4
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_TIM3_Init+0xa0>)
 80010da:	0011      	movs	r1, r2
 80010dc:	0018      	movs	r0, r3
 80010de:	f002 fabd 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	1e03      	subs	r3, r0, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80010e6:	f000 f953 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b008      	add	sp, #32
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	20000474 	.word	0x20000474
 80010f8:	40000400 	.word	0x40000400
 80010fc:	0000f9ff 	.word	0x0000f9ff
 8001100:	0000ffff 	.word	0x0000ffff

08001104 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_TIM14_Init+0x40>)
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <MX_TIM14_Init+0x44>)
 800110c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <MX_TIM14_Init+0x40>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_TIM14_Init+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 7;
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_TIM14_Init+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_TIM14_Init+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_TIM14_Init+0x40>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <MX_TIM14_Init+0x40>)
 800112e:	0018      	movs	r0, r3
 8001130:	f002 f838 	bl	80031a4 <HAL_TIM_Base_Init>
 8001134:	1e03      	subs	r3, r0, #0
 8001136:	d001      	beq.n	800113c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001138:	f000 f92a 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000684 	.word	0x20000684
 8001148:	40002000 	.word	0x40002000

0800114c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <MX_USART2_UART_Init+0x98>)
 8001154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001158:	22e1      	movs	r2, #225	; 0xe1
 800115a:	0252      	lsls	r2, r2, #9
 800115c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 8001196:	0018      	movs	r0, r3
 8001198:	f002 fab6 	bl	8003708 <HAL_UART_Init>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011a0:	f000 f8f6 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	0018      	movs	r0, r3
 80011aa:	f004 fc69 	bl	8005a80 <HAL_UARTEx_SetTxFifoThreshold>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011b2:	f000 f8ed 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	0018      	movs	r0, r3
 80011bc:	f004 fca0 	bl	8005b00 <HAL_UARTEx_SetRxFifoThreshold>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011c4:	f000 f8e4 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <MX_USART2_UART_Init+0x94>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f004 fc1e 	bl	8005a0c <HAL_UARTEx_DisableFifoMode>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011d4:	f000 f8dc 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	200005f8 	.word	0x200005f8
 80011e4:	40004400 	.word	0x40004400

080011e8 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_USART4_UART_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <MX_USART4_UART_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_USART4_UART_Init+0x64>)
 80011f4:	2296      	movs	r2, #150	; 0x96
 80011f6:	0192      	lsls	r2, r2, #6
 80011f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_USART4_UART_Init+0x64>)
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	0152      	lsls	r2, r2, #5
 8001200:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_USART4_UART_Init+0x64>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_USART4_UART_Init+0x64>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	00d2      	lsls	r2, r2, #3
 800120e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_USART4_UART_Init+0x64>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_USART4_UART_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_USART4_UART_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_USART4_UART_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_USART4_UART_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_USART4_UART_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <MX_USART4_UART_Init+0x64>)
 8001236:	0018      	movs	r0, r3
 8001238:	f002 fa66 	bl	8003708 <HAL_UART_Init>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d001      	beq.n	8001244 <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 8001240:	f000 f8a6 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	2000056c 	.word	0x2000056c
 8001250:	40004c00 	.word	0x40004c00

08001254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_DMA_Init+0x58>)
 800125c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_DMA_Init+0x58>)
 8001260:	2101      	movs	r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_DMA_Init+0x58>)
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	2201      	movs	r2, #1
 800126c:	4013      	ands	r3, r2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2009      	movs	r0, #9
 8001278:	f000 fc44 	bl	8001b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800127c:	2009      	movs	r0, #9
 800127e:	f000 fc56 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	200a      	movs	r0, #10
 8001288:	f000 fc3c 	bl	8001b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800128c:	200a      	movs	r0, #10
 800128e:	f000 fc4e 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200b      	movs	r0, #11
 8001298:	f000 fc34 	bl	8001b04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 800129c:	200b      	movs	r0, #11
 800129e:	f000 fc46 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	40021000 	.word	0x40021000

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b08b      	sub	sp, #44	; 0x2c
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	2414      	movs	r4, #20
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	0018      	movs	r0, r3
 80012bc:	2314      	movs	r3, #20
 80012be:	001a      	movs	r2, r3
 80012c0:	2100      	movs	r1, #0
 80012c2:	f004 fcfc 	bl	8005cbe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <MX_GPIO_Init+0xd8>)
 80012c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <MX_GPIO_Init+0xd8>)
 80012cc:	2104      	movs	r1, #4
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_GPIO_Init+0xd8>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	2204      	movs	r2, #4
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_GPIO_Init+0xd8>)
 80012e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <MX_GPIO_Init+0xd8>)
 80012e4:	2120      	movs	r1, #32
 80012e6:	430a      	orrs	r2, r1
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_GPIO_Init+0xd8>)
 80012ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ee:	2220      	movs	r2, #32
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <MX_GPIO_Init+0xd8>)
 80012f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <MX_GPIO_Init+0xd8>)
 80012fc:	2101      	movs	r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	635a      	str	r2, [r3, #52]	; 0x34
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_GPIO_Init+0xd8>)
 8001304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001306:	2201      	movs	r2, #1
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_GPIO_Init+0xd8>)
 8001310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_GPIO_Init+0xd8>)
 8001314:	2102      	movs	r1, #2
 8001316:	430a      	orrs	r2, r1
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
 800131a:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_GPIO_Init+0xd8>)
 800131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001326:	23a0      	movs	r3, #160	; 0xa0
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	2200      	movs	r2, #0
 800132c:	2120      	movs	r1, #32
 800132e:	0018      	movs	r0, r3
 8001330:	f001 f84c 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001334:	0021      	movs	r1, r4
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2220      	movs	r2, #32
 800133a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2201      	movs	r2, #1
 8001340:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2202      	movs	r2, #2
 800134c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800134e:	000c      	movs	r4, r1
 8001350:	187a      	adds	r2, r7, r1
 8001352:	23a0      	movs	r3, #160	; 0xa0
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	0011      	movs	r1, r2
 8001358:	0018      	movs	r0, r3
 800135a:	f000 fed3 	bl	8002104 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_BOOT0_Pin GPIO_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_BOOT0_Pin|GPIO_NRST_Pin;
 800135e:	0021      	movs	r1, r4
 8001360:	187b      	adds	r3, r7, r1
 8001362:	22c0      	movs	r2, #192	; 0xc0
 8001364:	0152      	lsls	r2, r2, #5
 8001366:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	187b      	adds	r3, r7, r1
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <MX_GPIO_Init+0xdc>)
 8001378:	0019      	movs	r1, r3
 800137a:	0010      	movs	r0, r2
 800137c:	f000 fec2 	bl	8002104 <HAL_GPIO_Init>

}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b00b      	add	sp, #44	; 0x2c
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	50000400 	.word	0x50000400

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_MspInit+0x4c>)
 80013a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_MspInit+0x4c>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	430a      	orrs	r2, r1
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	2201      	movs	r2, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_MspInit+0x4c>)
 80013bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_MspInit+0x4c>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0549      	lsls	r1, r1, #21
 80013c4:	430a      	orrs	r2, r1
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <HAL_MspInit+0x4c>)
 80013ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	055b      	lsls	r3, r3, #21
 80013d0:	4013      	ands	r3, r2
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80013d6:	23c0      	movs	r3, #192	; 0xc0
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 fad0 	bl	8001980 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a13      	ldr	r2, [pc, #76]	; (8001448 <HAL_TIM_Base_MspInit+0x5c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10c      	bne.n	8001418 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_TIM_Base_MspInit+0x60>)
 8001400:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_TIM_Base_MspInit+0x60>)
 8001404:	2102      	movs	r1, #2
 8001406:	430a      	orrs	r2, r1
 8001408:	63da      	str	r2, [r3, #60]	; 0x3c
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_TIM_Base_MspInit+0x60>)
 800140c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001416:	e012      	b.n	800143e <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM14)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <HAL_TIM_Base_MspInit+0x64>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10d      	bne.n	800143e <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_TIM_Base_MspInit+0x60>)
 8001424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_TIM_Base_MspInit+0x60>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	0209      	lsls	r1, r1, #8
 800142c:	430a      	orrs	r2, r1
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_TIM_Base_MspInit+0x60>)
 8001432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b004      	add	sp, #16
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	40000400 	.word	0x40000400
 800144c:	40021000 	.word	0x40021000
 8001450:	40002000 	.word	0x40002000

08001454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	; 0x30
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	231c      	movs	r3, #28
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	0018      	movs	r0, r3
 8001462:	2314      	movs	r3, #20
 8001464:	001a      	movs	r2, r3
 8001466:	2100      	movs	r1, #0
 8001468:	f004 fc29 	bl	8005cbe <memset>
  if(huart->Instance==USART2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a92      	ldr	r2, [pc, #584]	; (80016bc <HAL_UART_MspInit+0x268>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d000      	beq.n	8001478 <HAL_UART_MspInit+0x24>
 8001476:	e08b      	b.n	8001590 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001478:	4b91      	ldr	r3, [pc, #580]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 800147a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800147c:	4b90      	ldr	r3, [pc, #576]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	0289      	lsls	r1, r1, #10
 8001482:	430a      	orrs	r2, r1
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c
 8001486:	4b8e      	ldr	r3, [pc, #568]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 8001488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	029b      	lsls	r3, r3, #10
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b8a      	ldr	r3, [pc, #552]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 8001496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001498:	4b89      	ldr	r3, [pc, #548]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 800149a:	2101      	movs	r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
 80014a0:	4b87      	ldr	r3, [pc, #540]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	2201      	movs	r2, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80014ac:	211c      	movs	r1, #28
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	220c      	movs	r2, #12
 80014b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	2202      	movs	r2, #2
 80014b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	2201      	movs	r2, #1
 80014be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	2201      	movs	r2, #1
 80014ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	187a      	adds	r2, r7, r1
 80014ce:	23a0      	movs	r3, #160	; 0xa0
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f000 fe15 	bl	8002104 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80014da:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_UART_MspInit+0x270>)
 80014dc:	4a7a      	ldr	r2, [pc, #488]	; (80016c8 <HAL_UART_MspInit+0x274>)
 80014de:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <HAL_UART_MspInit+0x270>)
 80014e2:	2234      	movs	r2, #52	; 0x34
 80014e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e6:	4b77      	ldr	r3, [pc, #476]	; (80016c4 <HAL_UART_MspInit+0x270>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <HAL_UART_MspInit+0x270>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014f2:	4b74      	ldr	r3, [pc, #464]	; (80016c4 <HAL_UART_MspInit+0x270>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f8:	4b72      	ldr	r3, [pc, #456]	; (80016c4 <HAL_UART_MspInit+0x270>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014fe:	4b71      	ldr	r3, [pc, #452]	; (80016c4 <HAL_UART_MspInit+0x270>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001504:	4b6f      	ldr	r3, [pc, #444]	; (80016c4 <HAL_UART_MspInit+0x270>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	4b6e      	ldr	r3, [pc, #440]	; (80016c4 <HAL_UART_MspInit+0x270>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001510:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <HAL_UART_MspInit+0x270>)
 8001512:	0018      	movs	r0, r3
 8001514:	f000 fb28 	bl	8001b68 <HAL_DMA_Init>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800151c:	f7ff ff38 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_UART_MspInit+0x270>)
 8001524:	679a      	str	r2, [r3, #120]	; 0x78
 8001526:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <HAL_UART_MspInit+0x270>)
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800152c:	4b67      	ldr	r3, [pc, #412]	; (80016cc <HAL_UART_MspInit+0x278>)
 800152e:	4a68      	ldr	r2, [pc, #416]	; (80016d0 <HAL_UART_MspInit+0x27c>)
 8001530:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001532:	4b66      	ldr	r3, [pc, #408]	; (80016cc <HAL_UART_MspInit+0x278>)
 8001534:	2235      	movs	r2, #53	; 0x35
 8001536:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <HAL_UART_MspInit+0x278>)
 800153a:	2210      	movs	r2, #16
 800153c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153e:	4b63      	ldr	r3, [pc, #396]	; (80016cc <HAL_UART_MspInit+0x278>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001544:	4b61      	ldr	r3, [pc, #388]	; (80016cc <HAL_UART_MspInit+0x278>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154a:	4b60      	ldr	r3, [pc, #384]	; (80016cc <HAL_UART_MspInit+0x278>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001550:	4b5e      	ldr	r3, [pc, #376]	; (80016cc <HAL_UART_MspInit+0x278>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_UART_MspInit+0x278>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800155c:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_UART_MspInit+0x278>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001562:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <HAL_UART_MspInit+0x278>)
 8001564:	0018      	movs	r0, r3
 8001566:	f000 faff 	bl	8001b68 <HAL_DMA_Init>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d001      	beq.n	8001572 <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 800156e:	f7ff ff0f 	bl	8001390 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a55      	ldr	r2, [pc, #340]	; (80016cc <HAL_UART_MspInit+0x278>)
 8001576:	675a      	str	r2, [r3, #116]	; 0x74
 8001578:	4b54      	ldr	r3, [pc, #336]	; (80016cc <HAL_UART_MspInit+0x278>)
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	201c      	movs	r0, #28
 8001584:	f000 fabe 	bl	8001b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001588:	201c      	movs	r0, #28
 800158a:	f000 fad0 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800158e:	e090      	b.n	80016b2 <HAL_UART_MspInit+0x25e>
  else if(huart->Instance==USART4)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a4f      	ldr	r2, [pc, #316]	; (80016d4 <HAL_UART_MspInit+0x280>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d000      	beq.n	800159c <HAL_UART_MspInit+0x148>
 800159a:	e08a      	b.n	80016b2 <HAL_UART_MspInit+0x25e>
    __HAL_RCC_USART4_CLK_ENABLE();
 800159c:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 800159e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a0:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	0309      	lsls	r1, r1, #12
 80015a6:	430a      	orrs	r2, r1
 80015a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80015aa:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 80015ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b41      	ldr	r3, [pc, #260]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 80015ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015bc:	4b40      	ldr	r3, [pc, #256]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	635a      	str	r2, [r3, #52]	; 0x34
 80015c4:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <HAL_UART_MspInit+0x26c>)
 80015c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c8:	2201      	movs	r2, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015d0:	211c      	movs	r1, #28
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2203      	movs	r2, #3
 80015d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2202      	movs	r2, #2
 80015dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2202      	movs	r2, #2
 80015e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2204      	movs	r2, #4
 80015ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	187a      	adds	r2, r7, r1
 80015f2:	23a0      	movs	r3, #160	; 0xa0
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f000 fd83 	bl	8002104 <HAL_GPIO_Init>
    hdma_usart4_tx.Instance = DMA1_Channel1;
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_UART_MspInit+0x284>)
 8001600:	4a36      	ldr	r2, [pc, #216]	; (80016dc <HAL_UART_MspInit+0x288>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_UART_MspInit+0x284>)
 8001606:	2239      	movs	r2, #57	; 0x39
 8001608:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160a:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_UART_MspInit+0x284>)
 800160c:	2210      	movs	r2, #16
 800160e:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_UART_MspInit+0x284>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_UART_MspInit+0x284>)
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_UART_MspInit+0x284>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_UART_MspInit+0x284>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_UART_MspInit+0x284>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_UART_MspInit+0x284>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_UART_MspInit+0x284>)
 8001636:	0018      	movs	r0, r3
 8001638:	f000 fa96 	bl	8001b68 <HAL_DMA_Init>
 800163c:	1e03      	subs	r3, r0, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8001640:	f7ff fea6 	bl	8001390 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a24      	ldr	r2, [pc, #144]	; (80016d8 <HAL_UART_MspInit+0x284>)
 8001648:	675a      	str	r2, [r3, #116]	; 0x74
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_UART_MspInit+0x284>)
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 8001652:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_UART_MspInit+0x290>)
 8001654:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 8001658:	2238      	movs	r2, #56	; 0x38
 800165a:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001674:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001680:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 8001688:	0018      	movs	r0, r3
 800168a:	f000 fa6d 	bl	8001b68 <HAL_DMA_Init>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <HAL_UART_MspInit+0x242>
      Error_Handler();
 8001692:	f7ff fe7d 	bl	8001390 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 800169a:	679a      	str	r2, [r3, #120]	; 0x78
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_UART_MspInit+0x28c>)
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201d      	movs	r0, #29
 80016a8:	f000 fa2c 	bl	8001b04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80016ac:	201d      	movs	r0, #29
 80016ae:	f000 fa3e 	bl	8001b2e <HAL_NVIC_EnableIRQ>
}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b00c      	add	sp, #48	; 0x30
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	40004400 	.word	0x40004400
 80016c0:	40021000 	.word	0x40021000
 80016c4:	200002b0 	.word	0x200002b0
 80016c8:	40020030 	.word	0x40020030
 80016cc:	20000510 	.word	0x20000510
 80016d0:	40020044 	.word	0x40020044
 80016d4:	40004c00 	.word	0x40004c00
 80016d8:	2000030c 	.word	0x2000030c
 80016dc:	40020008 	.word	0x40020008
 80016e0:	200004b4 	.word	0x200004b4
 80016e4:	4002001c 	.word	0x4002001c

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <HardFault_Handler+0x4>

080016f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f000 f91c 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <DMA1_Channel1_IRQHandler+0x14>)
 8001722:	0018      	movs	r0, r3
 8001724:	f000 fbac 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	2000030c 	.word	0x2000030c

08001734 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800173a:	0018      	movs	r0, r3
 800173c:	f000 fba0 	bl	8001e80 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <DMA1_Channel2_3_IRQHandler+0x20>)
 8001742:	0018      	movs	r0, r3
 8001744:	f000 fb9c 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	200004b4 	.word	0x200004b4
 8001754:	200002b0 	.word	0x200002b0

08001758 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800175e:	0018      	movs	r0, r3
 8001760:	f000 fb8e 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	20000510 	.word	0x20000510

08001770 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <USART2_IRQHandler+0x14>)
 8001776:	0018      	movs	r0, r3
 8001778:	f002 fa40 	bl	8003bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	200005f8 	.word	0x200005f8

08001788 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <USART3_4_LPUART1_IRQHandler+0x14>)
 800178e:	0018      	movs	r0, r3
 8001790:	f002 fa34 	bl	8003bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	2000056c 	.word	0x2000056c

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	18d3      	adds	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f004 fa42 	bl	8005c58 <__errno>
 80017d4:	0003      	movs	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	2301      	movs	r3, #1
 80017dc:	425b      	negs	r3, r3
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	18d2      	adds	r2, r2, r3
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b006      	add	sp, #24
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20009000 	.word	0x20009000
 8001800:	00000400 	.word	0x00000400
 8001804:	200002a4 	.word	0x200002a4
 8001808:	200006d0 	.word	0x200006d0

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <SystemInit+0x14>)
 8001812:	2280      	movs	r2, #128	; 0x80
 8001814:	0512      	lsls	r2, r2, #20
 8001816:	609a      	str	r2, [r3, #8]
#endif
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001826:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001828:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800182a:	e003      	b.n	8001834 <LoopCopyDataInit>

0800182c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800182e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001830:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001832:	3104      	adds	r1, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopForever+0xa>)
  ldr r3, =_edata
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LoopForever+0xe>)
  adds r2, r0, r1
 8001838:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800183c:	d3f6      	bcc.n	800182c <CopyDataInit>
  ldr r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopForever+0x12>)
  b LoopFillZerobss
 8001840:	e002      	b.n	8001848 <LoopFillZerobss>

08001842 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  str  r3, [r2]
 8001844:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001846:	3204      	adds	r2, #4

08001848 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <LoopForever+0x16>)
  cmp r2, r3
 800184a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800184c:	d3f9      	bcc.n	8001842 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800184e:	f7ff ffdd 	bl	800180c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001852:	f004 fa07 	bl	8005c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001856:	f7ff fb6f 	bl	8000f38 <main>

0800185a <LoopForever>:

LoopForever:
    b LoopForever
 800185a:	e7fe      	b.n	800185a <LoopForever>
  ldr   r0, =_estack
 800185c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001860:	08008ce0 	.word	0x08008ce0
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001868:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800186c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001870:	200006cc 	.word	0x200006cc

08001874 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_COMP_IRQHandler>
	...

08001878 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800187e:	1dfb      	adds	r3, r7, #7
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_Init+0x3c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Init+0x3c>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	0049      	lsls	r1, r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f810 	bl	80018b8 <HAL_InitTick>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d003      	beq.n	80018a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e001      	b.n	80018a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80018a4:	f7ff fd7a 	bl	800139c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40022000 	.word	0x40022000

080018b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018c0:	230f      	movs	r3, #15
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_InitTick+0x88>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d02b      	beq.n	8001928 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80018d0:	4b1c      	ldr	r3, [pc, #112]	; (8001944 <HAL_InitTick+0x8c>)
 80018d2:	681c      	ldr	r4, [r3, #0]
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_InitTick+0x88>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0019      	movs	r1, r3
 80018da:	23fa      	movs	r3, #250	; 0xfa
 80018dc:	0098      	lsls	r0, r3, #2
 80018de:	f7fe fc11 	bl	8000104 <__udivsi3>
 80018e2:	0003      	movs	r3, r0
 80018e4:	0019      	movs	r1, r3
 80018e6:	0020      	movs	r0, r4
 80018e8:	f7fe fc0c 	bl	8000104 <__udivsi3>
 80018ec:	0003      	movs	r3, r0
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 f92d 	bl	8001b4e <HAL_SYSTICK_Config>
 80018f4:	1e03      	subs	r3, r0, #0
 80018f6:	d112      	bne.n	800191e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d80a      	bhi.n	8001914 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	2301      	movs	r3, #1
 8001902:	425b      	negs	r3, r3
 8001904:	2200      	movs	r2, #0
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f8fc 	bl	8001b04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_InitTick+0x90>)
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e00d      	b.n	8001930 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001914:	230f      	movs	r3, #15
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	e008      	b.n	8001930 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800191e:	230f      	movs	r3, #15
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e003      	b.n	8001930 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001928:	230f      	movs	r3, #15
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001930:	230f      	movs	r3, #15
 8001932:	18fb      	adds	r3, r7, r3
 8001934:	781b      	ldrb	r3, [r3, #0]
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b005      	add	sp, #20
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	2000000c 	.word	0x2000000c
 8001944:	20000004 	.word	0x20000004
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_IncTick+0x18>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <HAL_IncTick+0x1c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	18d2      	adds	r2, r2, r3
 800195a:	4b02      	ldr	r3, [pc, #8]	; (8001964 <HAL_IncTick+0x18>)
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200006c4 	.word	0x200006c4
 8001968:	2000000c 	.word	0x2000000c

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_GetTick+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	200006c4 	.word	0x200006c4

08001980 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800198e:	4013      	ands	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	40010000 	.word	0x40010000
 80019a8:	fffff9ff 	.word	0xfffff9ff

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	0002      	movs	r2, r0
 80019b4:	1dfb      	adds	r3, r7, #7
 80019b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b7f      	cmp	r3, #127	; 0x7f
 80019be:	d809      	bhi.n	80019d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	001a      	movs	r2, r3
 80019c6:	231f      	movs	r3, #31
 80019c8:	401a      	ands	r2, r3
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_EnableIRQ+0x30>)
 80019cc:	2101      	movs	r1, #1
 80019ce:	4091      	lsls	r1, r2
 80019d0:	000a      	movs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
  }
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b002      	add	sp, #8
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	0002      	movs	r2, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b7f      	cmp	r3, #127	; 0x7f
 80019f4:	d828      	bhi.n	8001a48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f6:	4a2f      	ldr	r2, [pc, #188]	; (8001ab4 <__NVIC_SetPriority+0xd4>)
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	33c0      	adds	r3, #192	; 0xc0
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	589b      	ldr	r3, [r3, r2]
 8001a06:	1dfa      	adds	r2, r7, #7
 8001a08:	7812      	ldrb	r2, [r2, #0]
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	400a      	ands	r2, r1
 8001a10:	00d2      	lsls	r2, r2, #3
 8001a12:	21ff      	movs	r1, #255	; 0xff
 8001a14:	4091      	lsls	r1, r2
 8001a16:	000a      	movs	r2, r1
 8001a18:	43d2      	mvns	r2, r2
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	019b      	lsls	r3, r3, #6
 8001a22:	22ff      	movs	r2, #255	; 0xff
 8001a24:	401a      	ands	r2, r3
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	4003      	ands	r3, r0
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a34:	481f      	ldr	r0, [pc, #124]	; (8001ab4 <__NVIC_SetPriority+0xd4>)
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	33c0      	adds	r3, #192	; 0xc0
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a46:	e031      	b.n	8001aac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <__NVIC_SetPriority+0xd8>)
 8001a4a:	1dfb      	adds	r3, r7, #7
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	0019      	movs	r1, r3
 8001a50:	230f      	movs	r3, #15
 8001a52:	400b      	ands	r3, r1
 8001a54:	3b08      	subs	r3, #8
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3306      	adds	r3, #6
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	3304      	adds	r3, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1dfa      	adds	r2, r7, #7
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	0011      	movs	r1, r2
 8001a68:	2203      	movs	r2, #3
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	00d2      	lsls	r2, r2, #3
 8001a6e:	21ff      	movs	r1, #255	; 0xff
 8001a70:	4091      	lsls	r1, r2
 8001a72:	000a      	movs	r2, r1
 8001a74:	43d2      	mvns	r2, r2
 8001a76:	401a      	ands	r2, r3
 8001a78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	019b      	lsls	r3, r3, #6
 8001a7e:	22ff      	movs	r2, #255	; 0xff
 8001a80:	401a      	ands	r2, r3
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	0018      	movs	r0, r3
 8001a88:	2303      	movs	r3, #3
 8001a8a:	4003      	ands	r3, r0
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a90:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <__NVIC_SetPriority+0xd8>)
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	001c      	movs	r4, r3
 8001a98:	230f      	movs	r3, #15
 8001a9a:	4023      	ands	r3, r4
 8001a9c:	3b08      	subs	r3, #8
 8001a9e:	089b      	lsrs	r3, r3, #2
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	3306      	adds	r3, #6
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	18c3      	adds	r3, r0, r3
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	601a      	str	r2, [r3, #0]
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	b003      	add	sp, #12
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <SysTick_Config+0x40>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e010      	b.n	8001af4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <SysTick_Config+0x44>)
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	3a01      	subs	r2, #1
 8001ad8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	2301      	movs	r3, #1
 8001adc:	425b      	negs	r3, r3
 8001ade:	2103      	movs	r1, #3
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff ff7d 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <SysTick_Config+0x44>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x44>)
 8001aee:	2207      	movs	r2, #7
 8001af0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	00ffffff 	.word	0x00ffffff
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	210f      	movs	r1, #15
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	1c02      	adds	r2, r0, #0
 8001b14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	0011      	movs	r1, r2
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	0002      	movs	r2, r0
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff ff33 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b002      	add	sp, #8
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff ffaf 	bl	8001abc <SysTick_Config>
 8001b5e:	0003      	movs	r3, r0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e077      	b.n	8001c6a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a3d      	ldr	r2, [pc, #244]	; (8001c74 <HAL_DMA_Init+0x10c>)
 8001b80:	4694      	mov	ip, r2
 8001b82:	4463      	add	r3, ip
 8001b84:	2114      	movs	r1, #20
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7fe fabc 	bl	8000104 <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	009a      	lsls	r2, r3, #2
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2225      	movs	r2, #37	; 0x25
 8001b98:	2102      	movs	r1, #2
 8001b9a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4934      	ldr	r1, [pc, #208]	; (8001c78 <HAL_DMA_Init+0x110>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 fa3d 	bl	8002064 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d102      	bne.n	8001bfc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	21ff      	movs	r1, #255	; 0xff
 8001c06:	400a      	ands	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c12:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d011      	beq.n	8001c40 <HAL_DMA_Init+0xd8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d80d      	bhi.n	8001c40 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fa48 	bl	80020bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	e008      	b.n	8001c52 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2225      	movs	r2, #37	; 0x25
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2224      	movs	r2, #36	; 0x24
 8001c64:	2100      	movs	r1, #0
 8001c66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	bffdfff8 	.word	0xbffdfff8
 8001c78:	ffff800f 	.word	0xffff800f

08001c7c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8a:	2317      	movs	r3, #23
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2224      	movs	r2, #36	; 0x24
 8001c96:	5c9b      	ldrb	r3, [r3, r2]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_DMA_Start_IT+0x24>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e070      	b.n	8001d82 <HAL_DMA_Start_IT+0x106>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2224      	movs	r2, #36	; 0x24
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2225      	movs	r2, #37	; 0x25
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d157      	bne.n	8001d64 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2225      	movs	r2, #37	; 0x25
 8001cb8:	2102      	movs	r1, #2
 8001cba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	438a      	bics	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f983 	bl	8001fe4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	210e      	movs	r1, #14
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e00f      	b.n	8001d18 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2104      	movs	r1, #4
 8001d04:	438a      	bics	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	210a      	movs	r1, #10
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	025b      	lsls	r3, r3, #9
 8001d22:	4013      	ands	r3, r2
 8001d24:	d008      	beq.n	8001d38 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	0049      	lsls	r1, r1, #1
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0049      	lsls	r1, r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e007      	b.n	8001d74 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d6c:	2317      	movs	r3, #23
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2202      	movs	r2, #2
 8001d72:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2224      	movs	r2, #36	; 0x24
 8001d78:	2100      	movs	r1, #0
 8001d7a:	5499      	strb	r1, [r3, r2]

  return status;
 8001d7c:	2317      	movs	r3, #23
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781b      	ldrb	r3, [r3, #0]
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b006      	add	sp, #24
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d94:	230f      	movs	r3, #15
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2224      	movs	r2, #36	; 0x24
 8001da0:	2100      	movs	r1, #0
 8001da2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	; 0x24
 8001da8:	5c9b      	ldrb	r3, [r3, r2]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_DMA_Abort_IT+0x26>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e05e      	b.n	8001e70 <HAL_DMA_Abort_IT+0xe4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2224      	movs	r2, #36	; 0x24
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2225      	movs	r2, #37	; 0x25
 8001dbe:	5c9b      	ldrb	r3, [r3, r2]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e049      	b.n	8001e6a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	210e      	movs	r1, #14
 8001de2:	438a      	bics	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	438a      	bics	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e00:	491d      	ldr	r1, [pc, #116]	; (8001e78 <HAL_DMA_Abort_IT+0xec>)
 8001e02:	400a      	ands	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_DMA_Abort_IT+0xf0>)
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	221c      	movs	r2, #28
 8001e10:	4013      	ands	r3, r2
 8001e12:	2201      	movs	r2, #1
 8001e14:	409a      	lsls	r2, r3
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_DMA_Abort_IT+0xf0>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00c      	beq.n	8001e48 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e38:	490f      	ldr	r1, [pc, #60]	; (8001e78 <HAL_DMA_Abort_IT+0xec>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2225      	movs	r2, #37	; 0x25
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	2100      	movs	r1, #0
 8001e56:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	0010      	movs	r0, r2
 8001e68:	4798      	blx	r3
    }
  }
  return status;
 8001e6a:	230f      	movs	r3, #15
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
}
 8001e70:	0018      	movs	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b004      	add	sp, #16
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	fffffeff 	.word	0xfffffeff
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <HAL_DMA_IRQHandler+0x160>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	221c      	movs	r2, #28
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d027      	beq.n	8001efa <HAL_DMA_IRQHandler+0x7a>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2204      	movs	r2, #4
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d023      	beq.n	8001efa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d107      	bne.n	8001ece <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2104      	movs	r1, #4
 8001eca:	438a      	bics	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_DMA_IRQHandler+0x160>)
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	221c      	movs	r2, #28
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2204      	movs	r2, #4
 8001edc:	409a      	lsls	r2, r3
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_DMA_IRQHandler+0x160>)
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d100      	bne.n	8001eee <HAL_DMA_IRQHandler+0x6e>
 8001eec:	e073      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	0010      	movs	r0, r2
 8001ef6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ef8:	e06d      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	221c      	movs	r2, #28
 8001f00:	4013      	ands	r3, r2
 8001f02:	2202      	movs	r2, #2
 8001f04:	409a      	lsls	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d02e      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xec>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	d02a      	beq.n	8001f6c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d10b      	bne.n	8001f3a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	210a      	movs	r1, #10
 8001f2e:	438a      	bics	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2225      	movs	r2, #37	; 0x25
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_DMA_IRQHandler+0x160>)
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	221c      	movs	r2, #28
 8001f44:	4013      	ands	r3, r2
 8001f46:	2202      	movs	r2, #2
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_DMA_IRQHandler+0x160>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2224      	movs	r2, #36	; 0x24
 8001f54:	2100      	movs	r1, #0
 8001f56:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d03a      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	0010      	movs	r0, r2
 8001f68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001f6a:	e034      	b.n	8001fd6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	221c      	movs	r2, #28
 8001f72:	4013      	ands	r3, r2
 8001f74:	2208      	movs	r2, #8
 8001f76:	409a      	lsls	r2, r3
 8001f78:	0013      	movs	r3, r2
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d02b      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x158>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2208      	movs	r2, #8
 8001f84:	4013      	ands	r3, r2
 8001f86:	d027      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	210e      	movs	r1, #14
 8001f94:	438a      	bics	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_DMA_IRQHandler+0x160>)
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	221c      	movs	r2, #28
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_DMA_IRQHandler+0x160>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2225      	movs	r2, #37	; 0x25
 8001fb8:	2101      	movs	r1, #1
 8001fba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2224      	movs	r2, #36	; 0x24
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	0010      	movs	r0, r2
 8001fd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46c0      	nop			; (mov r8, r8)
}
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ffa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800200c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800200e:	4b14      	ldr	r3, [pc, #80]	; (8002060 <DMA_SetConfig+0x7c>)
 8002010:	6859      	ldr	r1, [r3, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	221c      	movs	r2, #28
 8002018:	4013      	ands	r3, r2
 800201a:	2201      	movs	r2, #1
 800201c:	409a      	lsls	r2, r3
 800201e:	4b10      	ldr	r3, [pc, #64]	; (8002060 <DMA_SetConfig+0x7c>)
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b10      	cmp	r3, #16
 8002032:	d108      	bne.n	8002046 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002044:	e007      	b.n	8002056 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	60da      	str	r2, [r3, #12]
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b004      	add	sp, #16
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40020000 	.word	0x40020000

08002064 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	001a      	movs	r2, r3
 8002072:	23ff      	movs	r3, #255	; 0xff
 8002074:	4013      	ands	r3, r2
 8002076:	3b08      	subs	r3, #8
 8002078:	2114      	movs	r1, #20
 800207a:	0018      	movs	r0, r3
 800207c:	f7fe f842 	bl	8000104 <__udivsi3>
 8002080:	0003      	movs	r3, r0
 8002082:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800208c:	4694      	mov	ip, r2
 800208e:	4463      	add	r3, ip
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	001a      	movs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800209c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	221c      	movs	r2, #28
 80020a2:	4013      	ands	r3, r2
 80020a4:	2201      	movs	r2, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b004      	add	sp, #16
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	10008200 	.word	0x10008200
 80020b8:	40020880 	.word	0x40020880

080020bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	22ff      	movs	r2, #255	; 0xff
 80020ca:	4013      	ands	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80020d2:	4694      	mov	ip, r2
 80020d4:	4463      	add	r3, ip
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	001a      	movs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	4013      	ands	r3, r2
 80020ec:	2201      	movs	r2, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b004      	add	sp, #16
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	1000823f 	.word	0x1000823f
 8002100:	40020940 	.word	0x40020940

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002112:	e147      	b.n	80023a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4091      	lsls	r1, r2
 800211e:	000a      	movs	r2, r1
 8002120:	4013      	ands	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d100      	bne.n	800212c <HAL_GPIO_Init+0x28>
 800212a:	e138      	b.n	800239e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x38>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b12      	cmp	r3, #18
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	58d3      	ldr	r3, [r2, r3]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2207      	movs	r2, #7
 800214e:	4013      	ands	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	409a      	lsls	r2, r3
 8002156:	0013      	movs	r3, r2
 8002158:	43da      	mvns	r2, r3
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2107      	movs	r1, #7
 8002168:	400b      	ands	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	409a      	lsls	r2, r3
 800216e:	0013      	movs	r3, r2
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	6939      	ldr	r1, [r7, #16]
 8002182:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	409a      	lsls	r2, r3
 8002192:	0013      	movs	r3, r2
 8002194:	43da      	mvns	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d00b      	beq.n	80021d8 <HAL_GPIO_Init+0xd4>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d007      	beq.n	80021d8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021cc:	2b11      	cmp	r3, #17
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b12      	cmp	r3, #18
 80021d6:	d130      	bne.n	800223a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	409a      	lsls	r2, r3
 80021e6:	0013      	movs	r3, r2
 80021e8:	43da      	mvns	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	409a      	lsls	r2, r3
 80021fa:	0013      	movs	r3, r2
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220e:	2201      	movs	r2, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
 8002214:	0013      	movs	r3, r2
 8002216:	43da      	mvns	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	2201      	movs	r2, #1
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
 800222c:	0013      	movs	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	409a      	lsls	r2, r3
 8002248:	0013      	movs	r3, r2
 800224a:	43da      	mvns	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	055b      	lsls	r3, r3, #21
 8002272:	4013      	ands	r3, r2
 8002274:	d100      	bne.n	8002278 <HAL_GPIO_Init+0x174>
 8002276:	e092      	b.n	800239e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002278:	4a50      	ldr	r2, [pc, #320]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3318      	adds	r3, #24
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	589b      	ldr	r3, [r3, r2]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2203      	movs	r2, #3
 800228a:	4013      	ands	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	220f      	movs	r2, #15
 8002290:	409a      	lsls	r2, r3
 8002292:	0013      	movs	r3, r2
 8002294:	43da      	mvns	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	23a0      	movs	r3, #160	; 0xa0
 80022a0:	05db      	lsls	r3, r3, #23
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d013      	beq.n	80022ce <HAL_GPIO_Init+0x1ca>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a45      	ldr	r2, [pc, #276]	; (80023c0 <HAL_GPIO_Init+0x2bc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00d      	beq.n	80022ca <HAL_GPIO_Init+0x1c6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a44      	ldr	r2, [pc, #272]	; (80023c4 <HAL_GPIO_Init+0x2c0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <HAL_GPIO_Init+0x1c2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a43      	ldr	r2, [pc, #268]	; (80023c8 <HAL_GPIO_Init+0x2c4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <HAL_GPIO_Init+0x1be>
 80022be:	2303      	movs	r3, #3
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x1cc>
 80022c2:	2305      	movs	r3, #5
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x1cc>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x1cc>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x1cc>
 80022ce:	2300      	movs	r3, #0
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	2103      	movs	r1, #3
 80022d4:	400a      	ands	r2, r1
 80022d6:	00d2      	lsls	r2, r2, #3
 80022d8:	4093      	lsls	r3, r2
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022e0:	4936      	ldr	r1, [pc, #216]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3318      	adds	r3, #24
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022ee:	4a33      	ldr	r2, [pc, #204]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	58d3      	ldr	r3, [r2, r3]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	43da      	mvns	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	025b      	lsls	r3, r3, #9
 8002308:	4013      	ands	r3, r2
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002314:	4929      	ldr	r1, [pc, #164]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800231c:	4a27      	ldr	r2, [pc, #156]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 800231e:	2384      	movs	r3, #132	; 0x84
 8002320:	58d3      	ldr	r3, [r2, r3]
 8002322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43da      	mvns	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	4013      	ands	r3, r2
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002342:	491e      	ldr	r1, [pc, #120]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 8002344:	2284      	movs	r2, #132	; 0x84
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43da      	mvns	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	035b      	lsls	r3, r3, #13
 8002362:	4013      	ands	r3, r2
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	43da      	mvns	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	039b      	lsls	r3, r3, #14
 800238c:	4013      	ands	r3, r2
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_GPIO_Init+0x2b8>)
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3301      	adds	r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	40da      	lsrs	r2, r3
 80023ac:	1e13      	subs	r3, r2, #0
 80023ae:	d000      	beq.n	80023b2 <HAL_GPIO_Init+0x2ae>
 80023b0:	e6b0      	b.n	8002114 <HAL_GPIO_Init+0x10>
  }
}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b006      	add	sp, #24
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	40021800 	.word	0x40021800
 80023c0:	50000400 	.word	0x50000400
 80023c4:	50000800 	.word	0x50000800
 80023c8:	50000c00 	.word	0x50000c00

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	0008      	movs	r0, r1
 80023d6:	0011      	movs	r1, r2
 80023d8:	1cbb      	adds	r3, r7, #2
 80023da:	1c02      	adds	r2, r0, #0
 80023dc:	801a      	strh	r2, [r3, #0]
 80023de:	1c7b      	adds	r3, r7, #1
 80023e0:	1c0a      	adds	r2, r1, #0
 80023e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023e4:	1c7b      	adds	r3, r7, #1
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ec:	1cbb      	adds	r3, r7, #2
 80023ee:	881a      	ldrh	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023f4:	e003      	b.n	80023fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023f6:	1cbb      	adds	r3, r7, #2
 80023f8:	881a      	ldrh	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d11f      	bne.n	800246c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	0013      	movs	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	189b      	adds	r3, r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4912      	ldr	r1, [pc, #72]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800243a:	0018      	movs	r0, r3
 800243c:	f7fd fe62 	bl	8000104 <__udivsi3>
 8002440:	0003      	movs	r3, r0
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002446:	e008      	b.n	800245a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3b01      	subs	r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e001      	b.n	800245a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e009      	b.n	800246e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	401a      	ands	r2, r3
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	429a      	cmp	r2, r3
 800246a:	d0ed      	beq.n	8002448 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	40007000 	.word	0x40007000
 800247c:	fffff9ff 	.word	0xfffff9ff
 8002480:	20000004 	.word	0x20000004
 8002484:	000f4240 	.word	0x000f4240

08002488 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <LL_RCC_GetAPB1Prescaler+0x14>)
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	23e0      	movs	r3, #224	; 0xe0
 8002492:	01db      	lsls	r3, r3, #7
 8002494:	4013      	ands	r3, r2
}
 8002496:	0018      	movs	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000

080024a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e304      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	d100      	bne.n	80024be <HAL_RCC_OscConfig+0x1e>
 80024bc:	e07c      	b.n	80025b8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024be:	4bc3      	ldr	r3, [pc, #780]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2238      	movs	r2, #56	; 0x38
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c8:	4bc0      	ldr	r3, [pc, #768]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2203      	movs	r2, #3
 80024ce:	4013      	ands	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d102      	bne.n	80024de <HAL_RCC_OscConfig+0x3e>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_OscConfig+0x44>
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d10b      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	4bb9      	ldr	r3, [pc, #740]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	4013      	ands	r3, r2
 80024ee:	d062      	beq.n	80025b6 <HAL_RCC_OscConfig+0x116>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d15e      	bne.n	80025b6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e2df      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	025b      	lsls	r3, r3, #9
 8002504:	429a      	cmp	r2, r3
 8002506:	d107      	bne.n	8002518 <HAL_RCC_OscConfig+0x78>
 8002508:	4bb0      	ldr	r3, [pc, #704]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4baf      	ldr	r3, [pc, #700]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 800250e:	2180      	movs	r1, #128	; 0x80
 8002510:	0249      	lsls	r1, r1, #9
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e020      	b.n	800255a <HAL_RCC_OscConfig+0xba>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	23a0      	movs	r3, #160	; 0xa0
 800251e:	02db      	lsls	r3, r3, #11
 8002520:	429a      	cmp	r2, r3
 8002522:	d10e      	bne.n	8002542 <HAL_RCC_OscConfig+0xa2>
 8002524:	4ba9      	ldr	r3, [pc, #676]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4ba8      	ldr	r3, [pc, #672]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	02c9      	lsls	r1, r1, #11
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	4ba6      	ldr	r3, [pc, #664]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4ba5      	ldr	r3, [pc, #660]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0249      	lsls	r1, r1, #9
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e00b      	b.n	800255a <HAL_RCC_OscConfig+0xba>
 8002542:	4ba2      	ldr	r3, [pc, #648]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4ba1      	ldr	r3, [pc, #644]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002548:	49a1      	ldr	r1, [pc, #644]	; (80027d0 <HAL_RCC_OscConfig+0x330>)
 800254a:	400a      	ands	r2, r1
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	4b9f      	ldr	r3, [pc, #636]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b9e      	ldr	r3, [pc, #632]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002554:	499f      	ldr	r1, [pc, #636]	; (80027d4 <HAL_RCC_OscConfig+0x334>)
 8002556:	400a      	ands	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d014      	beq.n	800258c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff fa03 	bl	800196c <HAL_GetTick>
 8002566:	0003      	movs	r3, r0
 8002568:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff f9fe 	bl	800196c <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e29e      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257e:	4b93      	ldr	r3, [pc, #588]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	4013      	ands	r3, r2
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0xcc>
 800258a:	e015      	b.n	80025b8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f9ee 	bl	800196c <HAL_GetTick>
 8002590:	0003      	movs	r3, r0
 8002592:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002596:	f7ff f9e9 	bl	800196c <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b64      	cmp	r3, #100	; 0x64
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e289      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a8:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	029b      	lsls	r3, r3, #10
 80025b0:	4013      	ands	r3, r2
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0xf6>
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2202      	movs	r2, #2
 80025be:	4013      	ands	r3, r2
 80025c0:	d100      	bne.n	80025c4 <HAL_RCC_OscConfig+0x124>
 80025c2:	e099      	b.n	80026f8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2238      	movs	r2, #56	; 0x38
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2203      	movs	r2, #3
 80025d4:	4013      	ands	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_OscConfig+0x144>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d002      	beq.n	80025ea <HAL_RCC_OscConfig+0x14a>
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d135      	bne.n	8002656 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ea:	4b78      	ldr	r3, [pc, #480]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4013      	ands	r3, r2
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x162>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e25c      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b72      	ldr	r3, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a74      	ldr	r2, [pc, #464]	; (80027d8 <HAL_RCC_OscConfig+0x338>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	021a      	lsls	r2, r3, #8
 8002612:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800261e:	4b6b      	ldr	r3, [pc, #428]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a6e      	ldr	r2, [pc, #440]	; (80027dc <HAL_RCC_OscConfig+0x33c>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	4b67      	ldr	r3, [pc, #412]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002632:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	0adb      	lsrs	r3, r3, #11
 8002638:	2207      	movs	r2, #7
 800263a:	4013      	ands	r3, r2
 800263c:	4a68      	ldr	r2, [pc, #416]	; (80027e0 <HAL_RCC_OscConfig+0x340>)
 800263e:	40da      	lsrs	r2, r3
 8002640:	4b68      	ldr	r3, [pc, #416]	; (80027e4 <HAL_RCC_OscConfig+0x344>)
 8002642:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002644:	4b68      	ldr	r3, [pc, #416]	; (80027e8 <HAL_RCC_OscConfig+0x348>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0018      	movs	r0, r3
 800264a:	f7ff f935 	bl	80018b8 <HAL_InitTick>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d051      	beq.n	80026f6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e232      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d030      	beq.n	80026c0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800265e:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a5e      	ldr	r2, [pc, #376]	; (80027dc <HAL_RCC_OscConfig+0x33c>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002672:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b55      	ldr	r3, [pc, #340]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	0049      	lsls	r1, r1, #1
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7ff f974 	bl	800196c <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff f96f 	bl	800196c <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e20f      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800269c:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4013      	ands	r3, r2
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b48      	ldr	r3, [pc, #288]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <HAL_RCC_OscConfig+0x338>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	021a      	lsls	r2, r3, #8
 80026b8:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	e01b      	b.n	80026f8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80026c0:	4b42      	ldr	r3, [pc, #264]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80026c6:	4949      	ldr	r1, [pc, #292]	; (80027ec <HAL_RCC_OscConfig+0x34c>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f94e 	bl	800196c <HAL_GetTick>
 80026d0:	0003      	movs	r3, r0
 80026d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d6:	f7ff f949 	bl	800196c <HAL_GetTick>
 80026da:	0002      	movs	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e1e9      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026e8:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x236>
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2208      	movs	r2, #8
 80026fe:	4013      	ands	r3, r2
 8002700:	d047      	beq.n	8002792 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2238      	movs	r2, #56	; 0x38
 8002708:	4013      	ands	r3, r2
 800270a:	2b18      	cmp	r3, #24
 800270c:	d10a      	bne.n	8002724 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002712:	2202      	movs	r2, #2
 8002714:	4013      	ands	r3, r2
 8002716:	d03c      	beq.n	8002792 <HAL_RCC_OscConfig+0x2f2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d138      	bne.n	8002792 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e1cb      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d019      	beq.n	8002760 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 800272e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002730:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002732:	2101      	movs	r1, #1
 8002734:	430a      	orrs	r2, r1
 8002736:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7ff f918 	bl	800196c <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002742:	f7ff f913 	bl	800196c <HAL_GetTick>
 8002746:	0002      	movs	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1b3      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002754:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	2202      	movs	r2, #2
 800275a:	4013      	ands	r3, r2
 800275c:	d0f1      	beq.n	8002742 <HAL_RCC_OscConfig+0x2a2>
 800275e:	e018      	b.n	8002792 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 8002766:	2101      	movs	r1, #1
 8002768:	438a      	bics	r2, r1
 800276a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff f8fe 	bl	800196c <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002776:	f7ff f8f9 	bl	800196c <HAL_GetTick>
 800277a:	0002      	movs	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e199      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 800278a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278c:	2202      	movs	r2, #2
 800278e:	4013      	ands	r3, r2
 8002790:	d1f1      	bne.n	8002776 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2204      	movs	r2, #4
 8002798:	4013      	ands	r3, r2
 800279a:	d100      	bne.n	800279e <HAL_RCC_OscConfig+0x2fe>
 800279c:	e0c6      	b.n	800292c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	231f      	movs	r3, #31
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2238      	movs	r2, #56	; 0x38
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d11e      	bne.n	80027f0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_OscConfig+0x32c>)
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d100      	bne.n	80027be <HAL_RCC_OscConfig+0x31e>
 80027bc:	e0b6      	b.n	800292c <HAL_RCC_OscConfig+0x48c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d000      	beq.n	80027c8 <HAL_RCC_OscConfig+0x328>
 80027c6:	e0b1      	b.n	800292c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e177      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	fffeffff 	.word	0xfffeffff
 80027d4:	fffbffff 	.word	0xfffbffff
 80027d8:	ffff80ff 	.word	0xffff80ff
 80027dc:	ffffc7ff 	.word	0xffffc7ff
 80027e0:	00f42400 	.word	0x00f42400
 80027e4:	20000004 	.word	0x20000004
 80027e8:	20000008 	.word	0x20000008
 80027ec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027f0:	4bb4      	ldr	r3, [pc, #720]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80027f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	4013      	ands	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x360>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x362>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d011      	beq.n	800282a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4baf      	ldr	r3, [pc, #700]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800280a:	4bae      	ldr	r3, [pc, #696]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0549      	lsls	r1, r1, #21
 8002810:	430a      	orrs	r2, r1
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
 8002814:	4bab      	ldr	r3, [pc, #684]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	055b      	lsls	r3, r3, #21
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002822:	231f      	movs	r3, #31
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282a:	4ba7      	ldr	r3, [pc, #668]	; (8002ac8 <HAL_RCC_OscConfig+0x628>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d11a      	bne.n	800286c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002836:	4ba4      	ldr	r3, [pc, #656]	; (8002ac8 <HAL_RCC_OscConfig+0x628>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4ba3      	ldr	r3, [pc, #652]	; (8002ac8 <HAL_RCC_OscConfig+0x628>)
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0049      	lsls	r1, r1, #1
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002844:	f7ff f892 	bl	800196c <HAL_GetTick>
 8002848:	0003      	movs	r3, r0
 800284a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7ff f88d 	bl	800196c <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e12d      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002860:	4b99      	ldr	r3, [pc, #612]	; (8002ac8 <HAL_RCC_OscConfig+0x628>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4013      	ands	r3, r2
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x3e2>
 8002874:	4b93      	ldr	r3, [pc, #588]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002876:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002878:	4b92      	ldr	r3, [pc, #584]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 800287a:	2101      	movs	r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x41c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x404>
 800288a:	4b8e      	ldr	r3, [pc, #568]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 800288c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800288e:	4b8d      	ldr	r3, [pc, #564]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002890:	2104      	movs	r1, #4
 8002892:	430a      	orrs	r2, r1
 8002894:	65da      	str	r2, [r3, #92]	; 0x5c
 8002896:	4b8b      	ldr	r3, [pc, #556]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800289a:	4b8a      	ldr	r3, [pc, #552]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 800289c:	2101      	movs	r1, #1
 800289e:	430a      	orrs	r2, r1
 80028a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0x41c>
 80028a4:	4b87      	ldr	r3, [pc, #540]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80028a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028a8:	4b86      	ldr	r3, [pc, #536]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	438a      	bics	r2, r1
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80028b0:	4b84      	ldr	r3, [pc, #528]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80028b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028b4:	4b83      	ldr	r3, [pc, #524]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80028b6:	2104      	movs	r1, #4
 80028b8:	438a      	bics	r2, r1
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d014      	beq.n	80028ee <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff f852 	bl	800196c <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028cc:	e009      	b.n	80028e2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ce:	f7ff f84d 	bl	800196c <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	4a7c      	ldr	r2, [pc, #496]	; (8002acc <HAL_RCC_OscConfig+0x62c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0ec      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e2:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	2202      	movs	r2, #2
 80028e8:	4013      	ands	r3, r2
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x42e>
 80028ec:	e013      	b.n	8002916 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7ff f83d 	bl	800196c <HAL_GetTick>
 80028f2:	0003      	movs	r3, r0
 80028f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028f6:	e009      	b.n	800290c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7ff f838 	bl	800196c <HAL_GetTick>
 80028fc:	0002      	movs	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_RCC_OscConfig+0x62c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0d7      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800290c:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002916:	231f      	movs	r3, #31
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002924:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002926:	496a      	ldr	r1, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x630>)
 8002928:	400a      	ands	r2, r1
 800292a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d100      	bne.n	8002936 <HAL_RCC_OscConfig+0x496>
 8002934:	e0c1      	b.n	8002aba <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2238      	movs	r2, #56	; 0x38
 800293c:	4013      	ands	r3, r2
 800293e:	2b10      	cmp	r3, #16
 8002940:	d100      	bne.n	8002944 <HAL_RCC_OscConfig+0x4a4>
 8002942:	e081      	b.n	8002a48 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d156      	bne.n	80029fa <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294c:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002952:	4960      	ldr	r1, [pc, #384]	; (8002ad4 <HAL_RCC_OscConfig+0x634>)
 8002954:	400a      	ands	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7ff f808 	bl	800196c <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7ff f803 	bl	800196c <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0a3      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	049b      	lsls	r3, r3, #18
 800297c:	4013      	ands	r3, r2
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a54      	ldr	r2, [pc, #336]	; (8002ad8 <HAL_RCC_OscConfig+0x638>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1a      	ldr	r2, [r3, #32]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	431a      	orrs	r2, r3
 80029ae:	4b45      	ldr	r3, [pc, #276]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b42      	ldr	r3, [pc, #264]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	0449      	lsls	r1, r1, #17
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80029c2:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	0549      	lsls	r1, r1, #21
 80029cc:	430a      	orrs	r2, r1
 80029ce:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe ffcc 	bl	800196c <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe ffc7 	bl	800196c <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e067      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	049b      	lsls	r3, r3, #18
 80029f4:	4013      	ands	r3, r2
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x53a>
 80029f8:	e05f      	b.n	8002aba <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002a00:	4934      	ldr	r1, [pc, #208]	; (8002ad4 <HAL_RCC_OscConfig+0x634>)
 8002a02:	400a      	ands	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002a06:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002a0c:	2103      	movs	r1, #3
 8002a0e:	438a      	bics	r2, r1
 8002a10:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002a12:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002a18:	4930      	ldr	r1, [pc, #192]	; (8002adc <HAL_RCC_OscConfig+0x63c>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe ffa5 	bl	800196c <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe ffa0 	bl	800196c <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e040      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3a:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	049b      	lsls	r3, r3, #18
 8002a42:	4013      	ands	r3, r2
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x588>
 8002a46:	e038      	b.n	8002aba <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e033      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCC_OscConfig+0x624>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d126      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2270      	movs	r2, #112	; 0x70
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d11f      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	23fe      	movs	r3, #254	; 0xfe
 8002a7a:	01db      	lsls	r3, r3, #7
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d116      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	23f8      	movs	r3, #248	; 0xf8
 8002a8c:	039b      	lsls	r3, r3, #14
 8002a8e:	401a      	ands	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d10e      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	23e0      	movs	r3, #224	; 0xe0
 8002a9c:	051b      	lsls	r3, r3, #20
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	0f5b      	lsrs	r3, r3, #29
 8002aac:	075a      	lsls	r2, r3, #29
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b008      	add	sp, #32
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	00001388 	.word	0x00001388
 8002ad0:	efffffff 	.word	0xefffffff
 8002ad4:	feffffff 	.word	0xfeffffff
 8002ad8:	11c1808c 	.word	0x11c1808c
 8002adc:	eefeffff 	.word	0xeefeffff

08002ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0e9      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b76      	ldr	r3, [pc, #472]	; (8002cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2207      	movs	r2, #7
 8002afa:	4013      	ands	r3, r2
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d91e      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b73      	ldr	r3, [pc, #460]	; (8002cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2207      	movs	r2, #7
 8002b08:	4393      	bics	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b14:	f7fe ff2a 	bl	800196c <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b1c:	e009      	b.n	8002b32 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1e:	f7fe ff25 	bl	800196c <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	4a6a      	ldr	r2, [pc, #424]	; (8002cd4 <HAL_RCC_ClockConfig+0x1f4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0ca      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b32:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2207      	movs	r2, #7
 8002b38:	4013      	ands	r3, r2
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2202      	movs	r2, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d015      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2204      	movs	r2, #4
 8002b50:	4013      	ands	r3, r2
 8002b52:	d006      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b54:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b5a:	21e0      	movs	r1, #224	; 0xe0
 8002b5c:	01c9      	lsls	r1, r1, #7
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	4a5d      	ldr	r2, [pc, #372]	; (8002cdc <HAL_RCC_ClockConfig+0x1fc>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d057      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	029b      	lsls	r3, r3, #10
 8002b90:	4013      	ands	r3, r2
 8002b92:	d12b      	bne.n	8002bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e097      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba0:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	; 0x80
 8002ba6:	049b      	lsls	r3, r3, #18
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d11f      	bne.n	8002bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e08b      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb8:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d113      	bne.n	8002bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e07f      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd0:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d108      	bne.n	8002bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e074      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bde:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2202      	movs	r2, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e06d      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bec:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	4393      	bics	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe feb4 	bl	800196c <HAL_GetTick>
 8002c04:	0003      	movs	r3, r0
 8002c06:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c08:	e009      	b.n	8002c1e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0a:	f7fe feaf 	bl	800196c <HAL_GetTick>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <HAL_RCC_ClockConfig+0x1f4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e054      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2238      	movs	r2, #56	; 0x38
 8002c24:	401a      	ands	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1ec      	bne.n	8002c0a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2207      	movs	r2, #7
 8002c36:	4013      	ands	r3, r2
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d21e      	bcs.n	8002c7c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2207      	movs	r2, #7
 8002c44:	4393      	bics	r3, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fe8c 	bl	800196c <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c58:	e009      	b.n	8002c6e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5a:	f7fe fe87 	bl	800196c <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <HAL_RCC_ClockConfig+0x1f4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e02c      	b.n	8002cc8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2207      	movs	r2, #7
 8002c74:	4013      	ands	r3, r2
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2204      	movs	r2, #4
 8002c82:	4013      	ands	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <HAL_RCC_ClockConfig+0x200>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	0019      	movs	r1, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c9a:	f000 f829 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002c9e:	0001      	movs	r1, r0
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	401a      	ands	r2, r3
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RCC_ClockConfig+0x204>)
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	58d3      	ldr	r3, [r2, r3]
 8002cb0:	221f      	movs	r2, #31
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	000a      	movs	r2, r1
 8002cb6:	40da      	lsrs	r2, r3
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x208>)
 8002cba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_ClockConfig+0x20c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7fe fdf9 	bl	80018b8 <HAL_InitTick>
 8002cc6:	0003      	movs	r3, r0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	00001388 	.word	0x00001388
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	fffff0ff 	.word	0xfffff0ff
 8002ce0:	ffff8fff 	.word	0xffff8fff
 8002ce4:	08008c3c 	.word	0x08008c3c
 8002ce8:	20000004 	.word	0x20000004
 8002cec:	20000008 	.word	0x20000008

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cf6:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2238      	movs	r2, #56	; 0x38
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d10f      	bne.n	8002d20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0adb      	lsrs	r3, r3, #11
 8002d06:	2207      	movs	r2, #7
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	0013      	movs	r3, r2
 8002d10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002d12:	6839      	ldr	r1, [r7, #0]
 8002d14:	4835      	ldr	r0, [pc, #212]	; (8002dec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d16:	f7fd f9f5 	bl	8000104 <__udivsi3>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e05d      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d20:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2238      	movs	r2, #56	; 0x38
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d102      	bne.n	8002d32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d2c:	4b30      	ldr	r3, [pc, #192]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	e054      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2238      	movs	r2, #56	; 0x38
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d138      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2203      	movs	r2, #3
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	2207      	movs	r2, #7
 8002d50:	4013      	ands	r3, r2
 8002d52:	3301      	adds	r3, #1
 8002d54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d10d      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4824      	ldr	r0, [pc, #144]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d60:	f7fd f9d0 	bl	8000104 <__udivsi3>
 8002d64:	0003      	movs	r3, r0
 8002d66:	0019      	movs	r1, r3
 8002d68:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	227f      	movs	r2, #127	; 0x7f
 8002d70:	4013      	ands	r3, r2
 8002d72:	434b      	muls	r3, r1
 8002d74:	617b      	str	r3, [r7, #20]
        break;
 8002d76:	e00d      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	481c      	ldr	r0, [pc, #112]	; (8002dec <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d7c:	f7fd f9c2 	bl	8000104 <__udivsi3>
 8002d80:	0003      	movs	r3, r0
 8002d82:	0019      	movs	r1, r3
 8002d84:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	227f      	movs	r2, #127	; 0x7f
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	434b      	muls	r3, r1
 8002d90:	617b      	str	r3, [r7, #20]
        break;
 8002d92:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0f5b      	lsrs	r3, r3, #29
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	3301      	adds	r3, #1
 8002da0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	6978      	ldr	r0, [r7, #20]
 8002da6:	f7fd f9ad 	bl	8000104 <__udivsi3>
 8002daa:	0003      	movs	r3, r0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e015      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002db0:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2238      	movs	r2, #56	; 0x38
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d103      	bne.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2238      	movs	r2, #56	; 0x38
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b18      	cmp	r3, #24
 8002dce:	d103      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002dd0:	23fa      	movs	r3, #250	; 0xfa
 8002dd2:	01db      	lsls	r3, r3, #7
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	e001      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ddc:	693b      	ldr	r3, [r7, #16]
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b006      	add	sp, #24
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	40021000 	.word	0x40021000
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e0c:	f7ff fff2 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e10:	0004      	movs	r4, r0
 8002e12:	f7ff fb39 	bl	8002488 <LL_RCC_GetAPB1Prescaler>
 8002e16:	0003      	movs	r3, r0
 8002e18:	0b1a      	lsrs	r2, r3, #12
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	58d3      	ldr	r3, [r2, r3]
 8002e20:	221f      	movs	r2, #31
 8002e22:	4013      	ands	r3, r2
 8002e24:	40dc      	lsrs	r4, r3
 8002e26:	0023      	movs	r3, r4
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	08008c7c 	.word	0x08008c7c

08002e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e3c:	2313      	movs	r3, #19
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e44:	2312      	movs	r3, #18
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	029b      	lsls	r3, r3, #10
 8002e54:	4013      	ands	r3, r2
 8002e56:	d100      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e58:	e0a4      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5a:	2311      	movs	r3, #17
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e62:	4bc3      	ldr	r3, [pc, #780]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	055b      	lsls	r3, r3, #21
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d111      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	4bc0      	ldr	r3, [pc, #768]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e72:	4bbf      	ldr	r3, [pc, #764]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0549      	lsls	r1, r1, #21
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e7c:	4bbc      	ldr	r3, [pc, #752]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	055b      	lsls	r3, r3, #21
 8002e84:	4013      	ands	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2311      	movs	r3, #17
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e92:	4bb8      	ldr	r3, [pc, #736]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4bb7      	ldr	r3, [pc, #732]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e98:	2180      	movs	r1, #128	; 0x80
 8002e9a:	0049      	lsls	r1, r1, #1
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fd64 	bl	800196c <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ea8:	e00b      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eaa:	f7fe fd5f 	bl	800196c <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d904      	bls.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002eb8:	2313      	movs	r3, #19
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	701a      	strb	r2, [r3, #0]
        break;
 8002ec0:	e005      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ec2:	4bac      	ldr	r3, [pc, #688]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d0ed      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002ece:	2313      	movs	r3, #19
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d154      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ed8:	4ba5      	ldr	r3, [pc, #660]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002edc:	23c0      	movs	r3, #192	; 0xc0
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d019      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d014      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ef4:	4b9e      	ldr	r3, [pc, #632]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	4a9f      	ldr	r2, [pc, #636]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002efe:	4b9c      	ldr	r3, [pc, #624]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f02:	4b9b      	ldr	r3, [pc, #620]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0249      	lsls	r1, r1, #9
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0c:	4b98      	ldr	r3, [pc, #608]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f10:	4b97      	ldr	r3, [pc, #604]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f12:	499a      	ldr	r1, [pc, #616]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f18:	4b95      	ldr	r3, [pc, #596]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2201      	movs	r2, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	d016      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe fd21 	bl	800196c <HAL_GetTick>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2e:	e00c      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe fd1c 	bl	800196c <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	4a91      	ldr	r2, [pc, #580]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d904      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002f40:	2313      	movs	r3, #19
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2203      	movs	r2, #3
 8002f46:	701a      	strb	r2, [r3, #0]
            break;
 8002f48:	e004      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d0ed      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002f54:	2313      	movs	r3, #19
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f5e:	4b84      	ldr	r3, [pc, #528]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	4a85      	ldr	r2, [pc, #532]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	0019      	movs	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6c:	4b80      	ldr	r3, [pc, #512]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f72:	e00c      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f74:	2312      	movs	r3, #18
 8002f76:	18fb      	adds	r3, r7, r3
 8002f78:	2213      	movs	r2, #19
 8002f7a:	18ba      	adds	r2, r7, r2
 8002f7c:	7812      	ldrb	r2, [r2, #0]
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	e005      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f82:	2312      	movs	r3, #18
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2213      	movs	r2, #19
 8002f88:	18ba      	adds	r2, r7, r2
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f8e:	2311      	movs	r3, #17
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f98:	4b75      	ldr	r3, [pc, #468]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f9c:	4b74      	ldr	r3, [pc, #464]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f9e:	4979      	ldr	r1, [pc, #484]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4013      	ands	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fae:	4b70      	ldr	r3, [pc, #448]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4b6c      	ldr	r3, [pc, #432]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	220c      	movs	r2, #12
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	4b65      	ldr	r3, [pc, #404]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fea:	4b61      	ldr	r3, [pc, #388]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	4a66      	ldr	r2, [pc, #408]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	4b5d      	ldr	r3, [pc, #372]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4013      	ands	r3, r2
 8003008:	d009      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300a:	4b59      	ldr	r3, [pc, #356]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	4a5f      	ldr	r2, [pc, #380]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	4b55      	ldr	r3, [pc, #340]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800301a:	430a      	orrs	r2, r1
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4013      	ands	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800302a:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	4a58      	ldr	r2, [pc, #352]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69da      	ldr	r2, [r3, #28]
 8003038:	4b4d      	ldr	r3, [pc, #308]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800303a:	430a      	orrs	r2, r1
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	4013      	ands	r3, r2
 8003046:	d009      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003048:	4b49      	ldr	r3, [pc, #292]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	4a51      	ldr	r2, [pc, #324]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003058:	430a      	orrs	r2, r1
 800305a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	01db      	lsls	r3, r3, #7
 8003064:	4013      	ands	r3, r2
 8003066:	d015      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003068:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	0899      	lsrs	r1, r3, #2
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1a      	ldr	r2, [r3, #32]
 8003074:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003076:	430a      	orrs	r2, r1
 8003078:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1a      	ldr	r2, [r3, #32]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	05db      	lsls	r3, r3, #23
 8003082:	429a      	cmp	r2, r3
 8003084:	d106      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003086:	4b3a      	ldr	r3, [pc, #232]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	4b39      	ldr	r3, [pc, #228]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	0249      	lsls	r1, r1, #9
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	031b      	lsls	r3, r3, #12
 800309c:	4013      	ands	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	2240      	movs	r2, #64	; 0x40
 80030a6:	4393      	bics	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030b0:	430a      	orrs	r2, r1
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	039b      	lsls	r3, r3, #14
 80030bc:	4013      	ands	r3, r2
 80030be:	d016      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030c0:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	4a34      	ldr	r2, [pc, #208]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	03db      	lsls	r3, r3, #15
 80030dc:	429a      	cmp	r2, r3
 80030de:	d106      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030e0:	4b23      	ldr	r3, [pc, #140]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	0449      	lsls	r1, r1, #17
 80030ea:	430a      	orrs	r2, r1
 80030ec:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	03db      	lsls	r3, r3, #15
 80030f6:	4013      	ands	r3, r2
 80030f8:	d016      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003100:	4013      	ands	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	4b19      	ldr	r3, [pc, #100]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800310a:	430a      	orrs	r2, r1
 800310c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	045b      	lsls	r3, r3, #17
 8003116:	429a      	cmp	r2, r3
 8003118:	d106      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	0449      	lsls	r1, r1, #17
 8003124:	430a      	orrs	r2, r1
 8003126:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4013      	ands	r3, r2
 8003132:	d016      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	4a19      	ldr	r2, [pc, #100]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003144:	430a      	orrs	r2, r1
 8003146:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	01db      	lsls	r3, r3, #7
 8003150:	429a      	cmp	r2, r3
 8003152:	d106      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800315a:	2180      	movs	r1, #128	; 0x80
 800315c:	0249      	lsls	r1, r1, #9
 800315e:	430a      	orrs	r2, r1
 8003160:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8003162:	2312      	movs	r3, #18
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b006      	add	sp, #24
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	40007000 	.word	0x40007000
 8003178:	fffffcff 	.word	0xfffffcff
 800317c:	fffeffff 	.word	0xfffeffff
 8003180:	00001388 	.word	0x00001388
 8003184:	efffffff 	.word	0xefffffff
 8003188:	fffff3ff 	.word	0xfffff3ff
 800318c:	fff3ffff 	.word	0xfff3ffff
 8003190:	ffcfffff 	.word	0xffcfffff
 8003194:	ffffcfff 	.word	0xffffcfff
 8003198:	ffbfffff 	.word	0xffbfffff
 800319c:	feffffff 	.word	0xfeffffff
 80031a0:	ffff3fff 	.word	0xffff3fff

080031a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e01e      	b.n	80031f4 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	223d      	movs	r2, #61	; 0x3d
 80031ba:	5c9b      	ldrb	r3, [r3, r2]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	223c      	movs	r2, #60	; 0x3c
 80031c6:	2100      	movs	r1, #0
 80031c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7fe f90d 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	223d      	movs	r2, #61	; 0x3d
 80031d6:	2102      	movs	r1, #2
 80031d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	0019      	movs	r1, r3
 80031e4:	0010      	movs	r0, r2
 80031e6:	f000 f91d 	bl	8003424 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	223d      	movs	r2, #61	; 0x3d
 80031ee:	2101      	movs	r1, #1
 80031f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	223d      	movs	r2, #61	; 0x3d
 8003208:	2102      	movs	r1, #2
 800320a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_TIM_Base_Start+0x50>)
 8003214:	4013      	ands	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b06      	cmp	r3, #6
 800321c:	d00c      	beq.n	8003238 <HAL_TIM_Base_Start+0x3c>
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	025b      	lsls	r3, r3, #9
 8003224:	429a      	cmp	r2, r3
 8003226:	d007      	beq.n	8003238 <HAL_TIM_Base_Start+0x3c>
  {
    __HAL_TIM_ENABLE(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2101      	movs	r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	223d      	movs	r2, #61	; 0x3d
 800323c:	2101      	movs	r1, #1
 800323e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	00010007 	.word	0x00010007

08003250 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	223d      	movs	r2, #61	; 0x3d
 800325c:	2102      	movs	r1, #2
 800325e:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_TIM_Base_Stop+0x4c>)
 8003268:	4013      	ands	r3, r2
 800326a:	d10d      	bne.n	8003288 <HAL_TIM_Base_Stop+0x38>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <HAL_TIM_Base_Stop+0x50>)
 8003274:	4013      	ands	r3, r2
 8003276:	d107      	bne.n	8003288 <HAL_TIM_Base_Stop+0x38>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2101      	movs	r1, #1
 8003284:	438a      	bics	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	223d      	movs	r2, #61	; 0x3d
 800328c:	2101      	movs	r1, #1
 800328e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	00001111 	.word	0x00001111
 80032a0:	00000444 	.word	0x00000444

080032a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	223c      	movs	r2, #60	; 0x3c
 80032b2:	5c9b      	ldrb	r3, [r3, r2]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_TIM_ConfigClockSource+0x18>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0ab      	b.n	8003414 <HAL_TIM_ConfigClockSource+0x170>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	223c      	movs	r2, #60	; 0x3c
 80032c0:	2101      	movs	r1, #1
 80032c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	223d      	movs	r2, #61	; 0x3d
 80032c8:	2102      	movs	r1, #2
 80032ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a51      	ldr	r2, [pc, #324]	; (800341c <HAL_TIM_ConfigClockSource+0x178>)
 80032d8:	4013      	ands	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a50      	ldr	r2, [pc, #320]	; (8003420 <HAL_TIM_ConfigClockSource+0x17c>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d100      	bne.n	80032f6 <HAL_TIM_ConfigClockSource+0x52>
 80032f4:	e06b      	b.n	80033ce <HAL_TIM_ConfigClockSource+0x12a>
 80032f6:	d80e      	bhi.n	8003316 <HAL_TIM_ConfigClockSource+0x72>
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d100      	bne.n	80032fe <HAL_TIM_ConfigClockSource+0x5a>
 80032fc:	e077      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x14a>
 80032fe:	d803      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x64>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d100      	bne.n	8003306 <HAL_TIM_ConfigClockSource+0x62>
 8003304:	e073      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003306:	e07c      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003308:	2b20      	cmp	r3, #32
 800330a:	d100      	bne.n	800330e <HAL_TIM_ConfigClockSource+0x6a>
 800330c:	e06f      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x14a>
 800330e:	2b30      	cmp	r3, #48	; 0x30
 8003310:	d100      	bne.n	8003314 <HAL_TIM_ConfigClockSource+0x70>
 8003312:	e06c      	b.n	80033ee <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003314:	e075      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003316:	2b70      	cmp	r3, #112	; 0x70
 8003318:	d00e      	beq.n	8003338 <HAL_TIM_ConfigClockSource+0x94>
 800331a:	d804      	bhi.n	8003326 <HAL_TIM_ConfigClockSource+0x82>
 800331c:	2b50      	cmp	r3, #80	; 0x50
 800331e:	d036      	beq.n	800338e <HAL_TIM_ConfigClockSource+0xea>
 8003320:	2b60      	cmp	r3, #96	; 0x60
 8003322:	d044      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003324:	e06d      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003326:	2280      	movs	r2, #128	; 0x80
 8003328:	0152      	lsls	r2, r2, #5
 800332a:	4293      	cmp	r3, r2
 800332c:	d068      	beq.n	8003400 <HAL_TIM_ConfigClockSource+0x15c>
 800332e:	2280      	movs	r2, #128	; 0x80
 8003330:	0192      	lsls	r2, r2, #6
 8003332:	4293      	cmp	r3, r2
 8003334:	d017      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003336:	e064      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f000 f968 	bl	800361c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2277      	movs	r2, #119	; 0x77
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	609a      	str	r2, [r3, #8]
      break;
 8003364:	e04d      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f000 f951 	bl	800361c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	01c9      	lsls	r1, r1, #7
 8003388:	430a      	orrs	r2, r1
 800338a:	609a      	str	r2, [r3, #8]
      break;
 800338c:	e039      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6859      	ldr	r1, [r3, #4]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	001a      	movs	r2, r3
 800339c:	f000 f8c2 	bl	8003524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2150      	movs	r1, #80	; 0x50
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 f91c 	bl	80035e4 <TIM_ITRx_SetConfig>
      break;
 80033ac:	e029      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	001a      	movs	r2, r3
 80033bc:	f000 f8e0 	bl	8003580 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2160      	movs	r1, #96	; 0x60
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f90c 	bl	80035e4 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e019      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	001a      	movs	r2, r3
 80033dc:	f000 f8a2 	bl	8003524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2140      	movs	r1, #64	; 0x40
 80033e6:	0018      	movs	r0, r3
 80033e8:	f000 f8fc 	bl	80035e4 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e009      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0019      	movs	r1, r3
 80033f8:	0010      	movs	r0, r2
 80033fa:	f000 f8f3 	bl	80035e4 <TIM_ITRx_SetConfig>
      break;
 80033fe:	e000      	b.n	8003402 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003400:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223d      	movs	r2, #61	; 0x3d
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	223c      	movs	r2, #60	; 0x3c
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b004      	add	sp, #16
 800341a:	bd80      	pop	{r7, pc}
 800341c:	ffceff88 	.word	0xffceff88
 8003420:	ffff00ff 	.word	0xffff00ff

08003424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a34      	ldr	r2, [pc, #208]	; (8003508 <TIM_Base_SetConfig+0xe4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d008      	beq.n	800344e <TIM_Base_SetConfig+0x2a>
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	429a      	cmp	r2, r3
 8003444:	d003      	beq.n	800344e <TIM_Base_SetConfig+0x2a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a30      	ldr	r2, [pc, #192]	; (800350c <TIM_Base_SetConfig+0xe8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d108      	bne.n	8003460 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2270      	movs	r2, #112	; 0x70
 8003452:	4393      	bics	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a29      	ldr	r2, [pc, #164]	; (8003508 <TIM_Base_SetConfig+0xe4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <TIM_Base_SetConfig+0x76>
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	429a      	cmp	r2, r3
 8003470:	d013      	beq.n	800349a <TIM_Base_SetConfig+0x76>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <TIM_Base_SetConfig+0xe8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00f      	beq.n	800349a <TIM_Base_SetConfig+0x76>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a24      	ldr	r2, [pc, #144]	; (8003510 <TIM_Base_SetConfig+0xec>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00b      	beq.n	800349a <TIM_Base_SetConfig+0x76>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a23      	ldr	r2, [pc, #140]	; (8003514 <TIM_Base_SetConfig+0xf0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <TIM_Base_SetConfig+0x76>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a22      	ldr	r2, [pc, #136]	; (8003518 <TIM_Base_SetConfig+0xf4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d003      	beq.n	800349a <TIM_Base_SetConfig+0x76>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a21      	ldr	r2, [pc, #132]	; (800351c <TIM_Base_SetConfig+0xf8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d108      	bne.n	80034ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4a20      	ldr	r2, [pc, #128]	; (8003520 <TIM_Base_SetConfig+0xfc>)
 800349e:	4013      	ands	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	4393      	bics	r3, r2
 80034b2:	001a      	movs	r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <TIM_Base_SetConfig+0xe4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0xce>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <TIM_Base_SetConfig+0xf0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0xce>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <TIM_Base_SetConfig+0xf4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0xce>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a0b      	ldr	r2, [pc, #44]	; (800351c <TIM_Base_SetConfig+0xf8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d103      	bne.n	80034fa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	615a      	str	r2, [r3, #20]
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b004      	add	sp, #16
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40000400 	.word	0x40000400
 8003510:	40002000 	.word	0x40002000
 8003514:	40014000 	.word	0x40014000
 8003518:	40014400 	.word	0x40014400
 800351c:	40014800 	.word	0x40014800
 8003520:	fffffcff 	.word	0xfffffcff

08003524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	2201      	movs	r2, #1
 800353c:	4393      	bics	r3, r2
 800353e:	001a      	movs	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	22f0      	movs	r2, #240	; 0xf0
 800354e:	4393      	bics	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	220a      	movs	r2, #10
 8003560:	4393      	bics	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b006      	add	sp, #24
 800357e:	bd80      	pop	{r7, pc}

08003580 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	2210      	movs	r2, #16
 8003592:	4393      	bics	r3, r2
 8003594:	001a      	movs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <TIM_TI2_ConfigInputStage+0x60>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	22a0      	movs	r2, #160	; 0xa0
 80035bc:	4393      	bics	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b006      	add	sp, #24
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	ffff0fff 	.word	0xffff0fff

080035e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <TIM_ITRx_SetConfig+0x34>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	2207      	movs	r2, #7
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	609a      	str	r2, [r3, #8]
}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	46bd      	mov	sp, r7
 8003612:	b004      	add	sp, #16
 8003614:	bd80      	pop	{r7, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	ffcfff8f 	.word	0xffcfff8f

0800361c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <TIM_ETR_SetConfig+0x3c>)
 8003634:	4013      	ands	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	431a      	orrs	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4313      	orrs	r3, r2
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	609a      	str	r2, [r3, #8]
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b006      	add	sp, #24
 8003656:	bd80      	pop	{r7, pc}
 8003658:	ffff00ff 	.word	0xffff00ff

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	223c      	movs	r2, #60	; 0x3c
 800366a:	5c9b      	ldrb	r3, [r3, r2]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e040      	b.n	80036f6 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	223c      	movs	r2, #60	; 0x3c
 8003678:	2101      	movs	r1, #1
 800367a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	223d      	movs	r2, #61	; 0x3d
 8003680:	2102      	movs	r1, #2
 8003682:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a18      	ldr	r2, [pc, #96]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2270      	movs	r2, #112	; 0x70
 80036b4:	4393      	bics	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2280      	movs	r2, #128	; 0x80
 80036c6:	4393      	bics	r3, r2
 80036c8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	223d      	movs	r2, #61	; 0x3d
 80036e8:	2101      	movs	r1, #1
 80036ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	223c      	movs	r2, #60	; 0x3c
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b004      	add	sp, #16
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	40012c00 	.word	0x40012c00
 8003704:	ff0fffff 	.word	0xff0fffff

08003708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e046      	b.n	80037a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	589b      	ldr	r3, [r3, r2]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	227c      	movs	r2, #124	; 0x7c
 8003728:	2100      	movs	r1, #0
 800372a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f7fd fe90 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	2124      	movs	r1, #36	; 0x24
 800373a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2101      	movs	r1, #1
 8003748:	438a      	bics	r2, r1
 800374a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 fbd2 	bl	8003ef8 <UART_SetConfig>
 8003754:	0003      	movs	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e024      	b.n	80037a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	0018      	movs	r0, r3
 800376a:	f001 fcb9 	bl	80050e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	490d      	ldr	r1, [pc, #52]	; (80037b0 <HAL_UART_Init+0xa8>)
 800377a:	400a      	ands	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	212a      	movs	r1, #42	; 0x2a
 800378a:	438a      	bics	r2, r1
 800378c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f001 fd51 	bl	8005248 <UART_CheckIdleState>
 80037a6:	0003      	movs	r3, r0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b002      	add	sp, #8
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	ffffb7ff 	.word	0xffffb7ff

080037b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	1dbb      	adds	r3, r7, #6
 80037c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2284      	movs	r2, #132	; 0x84
 80037c6:	589b      	ldr	r3, [r3, r2]
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d000      	beq.n	80037ce <HAL_UART_Receive_IT+0x1a>
 80037cc:	e0d6      	b.n	800397c <HAL_UART_Receive_IT+0x1c8>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_UART_Receive_IT+0x28>
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0ce      	b.n	800397e <HAL_UART_Receive_IT+0x1ca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	015b      	lsls	r3, r3, #5
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d109      	bne.n	8003800 <HAL_UART_Receive_IT+0x4c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d105      	bne.n	8003800 <HAL_UART_Receive_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2201      	movs	r2, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	d001      	beq.n	8003800 <HAL_UART_Receive_IT+0x4c>
      {
        return  HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0be      	b.n	800397e <HAL_UART_Receive_IT+0x1ca>
      }
    }

    __HAL_LOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	227c      	movs	r2, #124	; 0x7c
 8003804:	5c9b      	ldrb	r3, [r3, r2]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UART_Receive_IT+0x5a>
 800380a:	2302      	movs	r3, #2
 800380c:	e0b7      	b.n	800397e <HAL_UART_Receive_IT+0x1ca>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	227c      	movs	r2, #124	; 0x7c
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1dba      	adds	r2, r7, #6
 8003820:	215c      	movs	r1, #92	; 0x5c
 8003822:	8812      	ldrh	r2, [r2, #0]
 8003824:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1dba      	adds	r2, r7, #6
 800382a:	215e      	movs	r1, #94	; 0x5e
 800382c:	8812      	ldrh	r2, [r2, #0]
 800382e:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	015b      	lsls	r3, r3, #5
 800383e:	429a      	cmp	r2, r3
 8003840:	d10d      	bne.n	800385e <HAL_UART_Receive_IT+0xaa>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <HAL_UART_Receive_IT+0xa0>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2260      	movs	r2, #96	; 0x60
 800384e:	494e      	ldr	r1, [pc, #312]	; (8003988 <HAL_UART_Receive_IT+0x1d4>)
 8003850:	5299      	strh	r1, [r3, r2]
 8003852:	e02e      	b.n	80038b2 <HAL_UART_Receive_IT+0xfe>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2260      	movs	r2, #96	; 0x60
 8003858:	21ff      	movs	r1, #255	; 0xff
 800385a:	5299      	strh	r1, [r3, r2]
 800385c:	e029      	b.n	80038b2 <HAL_UART_Receive_IT+0xfe>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10d      	bne.n	8003882 <HAL_UART_Receive_IT+0xce>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_UART_Receive_IT+0xc4>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2260      	movs	r2, #96	; 0x60
 8003872:	21ff      	movs	r1, #255	; 0xff
 8003874:	5299      	strh	r1, [r3, r2]
 8003876:	e01c      	b.n	80038b2 <HAL_UART_Receive_IT+0xfe>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2260      	movs	r2, #96	; 0x60
 800387c:	217f      	movs	r1, #127	; 0x7f
 800387e:	5299      	strh	r1, [r3, r2]
 8003880:	e017      	b.n	80038b2 <HAL_UART_Receive_IT+0xfe>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	055b      	lsls	r3, r3, #21
 800388a:	429a      	cmp	r2, r3
 800388c:	d10d      	bne.n	80038aa <HAL_UART_Receive_IT+0xf6>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <HAL_UART_Receive_IT+0xec>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2260      	movs	r2, #96	; 0x60
 800389a:	217f      	movs	r1, #127	; 0x7f
 800389c:	5299      	strh	r1, [r3, r2]
 800389e:	e008      	b.n	80038b2 <HAL_UART_Receive_IT+0xfe>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2260      	movs	r2, #96	; 0x60
 80038a4:	213f      	movs	r1, #63	; 0x3f
 80038a6:	5299      	strh	r1, [r3, r2]
 80038a8:	e003      	b.n	80038b2 <HAL_UART_Receive_IT+0xfe>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2260      	movs	r2, #96	; 0x60
 80038ae:	2100      	movs	r1, #0
 80038b0:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2288      	movs	r2, #136	; 0x88
 80038b6:	2100      	movs	r1, #0
 80038b8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2284      	movs	r2, #132	; 0x84
 80038be:	2122      	movs	r1, #34	; 0x22
 80038c0:	5099      	str	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	059b      	lsls	r3, r3, #22
 80038da:	429a      	cmp	r2, r3
 80038dc:	d12e      	bne.n	800393c <HAL_UART_Receive_IT+0x188>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2268      	movs	r2, #104	; 0x68
 80038e2:	5a9b      	ldrh	r3, [r3, r2]
 80038e4:	1dba      	adds	r2, r7, #6
 80038e6:	8812      	ldrh	r2, [r2, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d327      	bcc.n	800393c <HAL_UART_Receive_IT+0x188>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	015b      	lsls	r3, r3, #5
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d107      	bne.n	8003908 <HAL_UART_Receive_IT+0x154>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <HAL_UART_Receive_IT+0x154>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a22      	ldr	r2, [pc, #136]	; (800398c <HAL_UART_Receive_IT+0x1d8>)
 8003904:	66da      	str	r2, [r3, #108]	; 0x6c
 8003906:	e002      	b.n	800390e <HAL_UART_Receive_IT+0x15a>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a21      	ldr	r2, [pc, #132]	; (8003990 <HAL_UART_Receive_IT+0x1dc>)
 800390c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	227c      	movs	r2, #124	; 0x7c
 8003912:	2100      	movs	r1, #0
 8003914:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	0049      	lsls	r1, r1, #1
 8003924:	430a      	orrs	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2180      	movs	r1, #128	; 0x80
 8003934:	0549      	lsls	r1, r1, #21
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	e01d      	b.n	8003978 <HAL_UART_Receive_IT+0x1c4>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	015b      	lsls	r3, r3, #5
 8003944:	429a      	cmp	r2, r3
 8003946:	d107      	bne.n	8003958 <HAL_UART_Receive_IT+0x1a4>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d103      	bne.n	8003958 <HAL_UART_Receive_IT+0x1a4>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_UART_Receive_IT+0x1e0>)
 8003954:	66da      	str	r2, [r3, #108]	; 0x6c
 8003956:	e002      	b.n	800395e <HAL_UART_Receive_IT+0x1aa>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <HAL_UART_Receive_IT+0x1e4>)
 800395c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	227c      	movs	r2, #124	; 0x7c
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2190      	movs	r1, #144	; 0x90
 8003972:	0049      	lsls	r1, r1, #1
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e000      	b.n	800397e <HAL_UART_Receive_IT+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 800397c:	2302      	movs	r3, #2
  }
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	000001ff 	.word	0x000001ff
 800398c:	080058a1 	.word	0x080058a1
 8003990:	08005765 	.word	0x08005765
 8003994:	080056a5 	.word	0x080056a5
 8003998:	080055e5 	.word	0x080055e5

0800399c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	1dbb      	adds	r3, r7, #6
 80039a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	589b      	ldr	r3, [r3, r2]
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d000      	beq.n	80039b6 <HAL_UART_Transmit_DMA+0x1a>
 80039b4:	e07b      	b.n	8003aae <HAL_UART_Transmit_DMA+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_UART_Transmit_DMA+0x28>
 80039bc:	1dbb      	adds	r3, r7, #6
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e073      	b.n	8003ab0 <HAL_UART_Transmit_DMA+0x114>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	015b      	lsls	r3, r3, #5
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d109      	bne.n	80039e8 <HAL_UART_Transmit_DMA+0x4c>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2201      	movs	r2, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e063      	b.n	8003ab0 <HAL_UART_Transmit_DMA+0x114>
      }
    }

    __HAL_LOCK(huart);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	227c      	movs	r2, #124	; 0x7c
 80039ec:	5c9b      	ldrb	r3, [r3, r2]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Transmit_DMA+0x5a>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e05c      	b.n	8003ab0 <HAL_UART_Transmit_DMA+0x114>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	227c      	movs	r2, #124	; 0x7c
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1dba      	adds	r2, r7, #6
 8003a08:	2154      	movs	r1, #84	; 0x54
 8003a0a:	8812      	ldrh	r2, [r2, #0]
 8003a0c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1dba      	adds	r2, r7, #6
 8003a12:	2156      	movs	r1, #86	; 0x56
 8003a14:	8812      	ldrh	r2, [r2, #0]
 8003a16:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2288      	movs	r2, #136	; 0x88
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	2121      	movs	r1, #33	; 0x21
 8003a26:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02c      	beq.n	8003a8a <HAL_UART_Transmit_DMA+0xee>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	4a20      	ldr	r2, [pc, #128]	; (8003ab8 <HAL_UART_Transmit_DMA+0x11c>)
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3c:	4a1f      	ldr	r2, [pc, #124]	; (8003abc <HAL_UART_Transmit_DMA+0x120>)
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a44:	4a1e      	ldr	r2, [pc, #120]	; (8003ac0 <HAL_UART_Transmit_DMA+0x124>)
 8003a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a58:	0019      	movs	r1, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3328      	adds	r3, #40	; 0x28
 8003a60:	001a      	movs	r2, r3
 8003a62:	1dbb      	adds	r3, r7, #6
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	f7fe f909 	bl	8001c7c <HAL_DMA_Start_IT>
 8003a6a:	1e03      	subs	r3, r0, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_UART_Transmit_DMA+0xee>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2288      	movs	r2, #136	; 0x88
 8003a72:	2110      	movs	r1, #16
 8003a74:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	227c      	movs	r2, #124	; 0x7c
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	2120      	movs	r1, #32
 8003a84:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e012      	b.n	8003ab0 <HAL_UART_Transmit_DMA+0x114>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2240      	movs	r2, #64	; 0x40
 8003a90:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	227c      	movs	r2, #124	; 0x7c
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_UART_Transmit_DMA+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	080053f9 	.word	0x080053f9
 8003abc:	0800544d 	.word	0x0800544d
 8003ac0:	080054fb 	.word	0x080054fb

08003ac4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	1dbb      	adds	r3, r7, #6
 8003ad0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2284      	movs	r2, #132	; 0x84
 8003ad6:	589b      	ldr	r3, [r3, r2]
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d000      	beq.n	8003ade <HAL_UART_Receive_DMA+0x1a>
 8003adc:	e083      	b.n	8003be6 <HAL_UART_Receive_DMA+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_UART_Receive_DMA+0x28>
 8003ae4:	1dbb      	adds	r3, r7, #6
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Receive_DMA+0x2c>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e07b      	b.n	8003be8 <HAL_UART_Receive_DMA+0x124>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	015b      	lsls	r3, r3, #5
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d109      	bne.n	8003b10 <HAL_UART_Receive_DMA+0x4c>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <HAL_UART_Receive_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2201      	movs	r2, #1
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d001      	beq.n	8003b10 <HAL_UART_Receive_DMA+0x4c>
      {
        return  HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e06b      	b.n	8003be8 <HAL_UART_Receive_DMA+0x124>
      }
    }

    __HAL_LOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	227c      	movs	r2, #124	; 0x7c
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_UART_Receive_DMA+0x5a>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e064      	b.n	8003be8 <HAL_UART_Receive_DMA+0x124>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	227c      	movs	r2, #124	; 0x7c
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1dba      	adds	r2, r7, #6
 8003b30:	215c      	movs	r1, #92	; 0x5c
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2288      	movs	r2, #136	; 0x88
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2284      	movs	r2, #132	; 0x84
 8003b42:	2122      	movs	r1, #34	; 0x22
 8003b44:	5099      	str	r1, [r3, r2]

    if (huart->hdmarx != NULL)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02c      	beq.n	8003ba8 <HAL_UART_Receive_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b52:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <HAL_UART_Receive_DMA+0x12c>)
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b5a:	4a26      	ldr	r2, [pc, #152]	; (8003bf4 <HAL_UART_Receive_DMA+0x130>)
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b62:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <HAL_UART_Receive_DMA+0x134>)
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	0019      	movs	r1, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	001a      	movs	r2, r3
 8003b80:	1dbb      	adds	r3, r7, #6
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	f7fe f87a 	bl	8001c7c <HAL_DMA_Start_IT>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_UART_Receive_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2288      	movs	r2, #136	; 0x88
 8003b90:	2110      	movs	r1, #16
 8003b92:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	227c      	movs	r2, #124	; 0x7c
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e01f      	b.n	8003be8 <HAL_UART_Receive_DMA+0x124>
      }
    }
    __HAL_UNLOCK(huart);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	227c      	movs	r2, #124	; 0x7c
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	0049      	lsls	r1, r1, #1
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <HAL_UART_Receive_DMA+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b004      	add	sp, #16
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	0800546d 	.word	0x0800546d
 8003bf4:	080054dd 	.word	0x080054dd
 8003bf8:	080054fb 	.word	0x080054fb

08003bfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	220f      	movs	r2, #15
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d117      	bne.n	8003c5a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2220      	movs	r2, #32
 8003c36:	4013      	ands	r3, r2
 8003c38:	d104      	bne.n	8003c44 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	055b      	lsls	r3, r3, #21
 8003c40:	4013      	ands	r3, r2
 8003c42:	d00a      	beq.n	8003c5a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d100      	bne.n	8003c4e <HAL_UART_IRQHandler+0x52>
 8003c4c:	e127      	b.n	8003e9e <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	0010      	movs	r0, r2
 8003c56:	4798      	blx	r3
      }
      return;
 8003c58:	e121      	b.n	8003e9e <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d100      	bne.n	8003c62 <HAL_UART_IRQHandler+0x66>
 8003c60:	e0c8      	b.n	8003df4 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	4a92      	ldr	r2, [pc, #584]	; (8003eb0 <HAL_UART_IRQHandler+0x2b4>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	d105      	bne.n	8003c76 <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	2390      	movs	r3, #144	; 0x90
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4013      	ands	r3, r2
 8003c72:	d100      	bne.n	8003c76 <HAL_UART_IRQHandler+0x7a>
 8003c74:	e0be      	b.n	8003df4 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d010      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xa4>
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4013      	ands	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2288      	movs	r2, #136	; 0x88
 8003c94:	589b      	ldr	r3, [r3, r2]
 8003c96:	2201      	movs	r2, #1
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2188      	movs	r1, #136	; 0x88
 8003c9e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <HAL_UART_IRQHandler+0xcc>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2201      	movs	r2, #1
 8003cac:	4013      	ands	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2288      	movs	r2, #136	; 0x88
 8003cbc:	589b      	ldr	r3, [r3, r2]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2188      	movs	r1, #136	; 0x88
 8003cc6:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2204      	movs	r2, #4
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d00f      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xf4>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2204      	movs	r2, #4
 8003cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2288      	movs	r2, #136	; 0x88
 8003ce4:	589b      	ldr	r3, [r3, r2]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2188      	movs	r1, #136	; 0x88
 8003cee:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d103      	bne.n	8003d08 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4a6b      	ldr	r2, [pc, #428]	; (8003eb0 <HAL_UART_IRQHandler+0x2b4>)
 8003d04:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d06:	d00b      	beq.n	8003d20 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2288      	movs	r2, #136	; 0x88
 8003d14:	589b      	ldr	r3, [r3, r2]
 8003d16:	2208      	movs	r2, #8
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2188      	movs	r1, #136	; 0x88
 8003d1e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2288      	movs	r2, #136	; 0x88
 8003d24:	589b      	ldr	r3, [r3, r2]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d100      	bne.n	8003d2c <HAL_UART_IRQHandler+0x130>
 8003d2a:	e0ba      	b.n	8003ea2 <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	4013      	ands	r3, r2
 8003d32:	d011      	beq.n	8003d58 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2220      	movs	r2, #32
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d104      	bne.n	8003d46 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	055b      	lsls	r3, r3, #21
 8003d42:	4013      	ands	r3, r2
 8003d44:	d008      	beq.n	8003d58 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	0010      	movs	r0, r2
 8003d56:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2288      	movs	r2, #136	; 0x88
 8003d5c:	589b      	ldr	r3, [r3, r2]
 8003d5e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2240      	movs	r2, #64	; 0x40
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d003      	beq.n	8003d76 <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2208      	movs	r2, #8
 8003d72:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d74:	d033      	beq.n	8003dde <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f001 fb19 	bl	80053b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2240      	movs	r2, #64	; 0x40
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d123      	bne.n	8003dd4 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2140      	movs	r1, #64	; 0x40
 8003d98:	438a      	bics	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da8:	4a42      	ldr	r2, [pc, #264]	; (8003eb4 <HAL_UART_IRQHandler+0x2b8>)
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7fd ffeb 	bl	8001d8c <HAL_DMA_Abort_IT>
 8003db6:	1e03      	subs	r3, r0, #0
 8003db8:	d01a      	beq.n	8003df0 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e012      	b.n	8003df0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 f88b 	bl	8003ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd2:	e00d      	b.n	8003df0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 f886 	bl	8003ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	e008      	b.n	8003df0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 f881 	bl	8003ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2288      	movs	r2, #136	; 0x88
 8003dea:	2100      	movs	r1, #0
 8003dec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003dee:	e058      	b.n	8003ea2 <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	46c0      	nop			; (mov r8, r8)
    return;
 8003df2:	e056      	b.n	8003ea2 <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003df4:	69fa      	ldr	r2, [r7, #28]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	035b      	lsls	r3, r3, #13
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <HAL_UART_IRQHandler+0x220>
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	03db      	lsls	r3, r3, #15
 8003e04:	4013      	ands	r3, r2
 8003e06:	d009      	beq.n	8003e1c <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	0352      	lsls	r2, r2, #13
 8003e10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f001 fde1 	bl	80059dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e1a:	e045      	b.n	8003ea8 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	4013      	ands	r3, r2
 8003e22:	d012      	beq.n	8003e4a <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2280      	movs	r2, #128	; 0x80
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d104      	bne.n	8003e36 <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	4013      	ands	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d033      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	0010      	movs	r0, r2
 8003e46:	4798      	blx	r3
    }
    return;
 8003e48:	e02d      	b.n	8003ea6 <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2240      	movs	r2, #64	; 0x40
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d008      	beq.n	8003e64 <HAL_UART_IRQHandler+0x268>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2240      	movs	r2, #64	; 0x40
 8003e56:	4013      	ands	r3, r2
 8003e58:	d004      	beq.n	8003e64 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f001 fba6 	bl	80055ae <UART_EndTransmit_IT>
    return;
 8003e62:	e021      	b.n	8003ea8 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_UART_IRQHandler+0x286>
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	05db      	lsls	r3, r3, #23
 8003e74:	4013      	ands	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f001 fdbe 	bl	80059fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e80:	e012      	b.n	8003ea8 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	045b      	lsls	r3, r3, #17
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_UART_IRQHandler+0x2ac>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da0a      	bge.n	8003ea8 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f001 fda9 	bl	80059ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	e004      	b.n	8003ea8 <HAL_UART_IRQHandler+0x2ac>
      return;
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	e002      	b.n	8003ea8 <HAL_UART_IRQHandler+0x2ac>
    return;
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	e000      	b.n	8003ea8 <HAL_UART_IRQHandler+0x2ac>
    return;
 8003ea6:	46c0      	nop			; (mov r8, r8)
  }
}
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b008      	add	sp, #32
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	10000001 	.word	0x10000001
 8003eb4:	08005581 	.word	0x08005581

08003eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b002      	add	sp, #8
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	b0a1      	sub	sp, #132	; 0x84
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f04:	231b      	movs	r3, #27
 8003f06:	2258      	movs	r2, #88	; 0x58
 8003f08:	18ba      	adds	r2, r7, r2
 8003f0a:	18d2      	adds	r2, r2, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f32:	4313      	orrs	r3, r2
 8003f34:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4bba      	ldr	r3, [pc, #744]	; (8004228 <UART_SetConfig+0x330>)
 8003f3e:	401a      	ands	r2, r3
 8003f40:	0011      	movs	r1, r2
 8003f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4bb6      	ldr	r3, [pc, #728]	; (800422c <UART_SetConfig+0x334>)
 8003f54:	401a      	ands	r2, r3
 8003f56:	0010      	movs	r0, r2
 8003f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5a:	68d9      	ldr	r1, [r3, #12]
 8003f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	0003      	movs	r3, r0
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4baf      	ldr	r3, [pc, #700]	; (8004230 <UART_SetConfig+0x338>)
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d004      	beq.n	8003f80 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	4bab      	ldr	r3, [pc, #684]	; (8004234 <UART_SetConfig+0x33c>)
 8003f88:	401a      	ands	r2, r3
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	230f      	movs	r3, #15
 8003f9e:	439a      	bics	r2, r3
 8003fa0:	0010      	movs	r0, r2
 8003fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	0003      	movs	r3, r0
 8003fac:	430b      	orrs	r3, r1
 8003fae:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4ba0      	ldr	r3, [pc, #640]	; (8004238 <UART_SetConfig+0x340>)
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d12f      	bne.n	800401a <UART_SetConfig+0x122>
 8003fba:	4ba0      	ldr	r3, [pc, #640]	; (800423c <UART_SetConfig+0x344>)
 8003fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d013      	beq.n	8003fee <UART_SetConfig+0xf6>
 8003fc6:	d304      	bcc.n	8003fd2 <UART_SetConfig+0xda>
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d009      	beq.n	8003fe0 <UART_SetConfig+0xe8>
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d015      	beq.n	8003ffc <UART_SetConfig+0x104>
 8003fd0:	e01b      	b.n	800400a <UART_SetConfig+0x112>
 8003fd2:	2323      	movs	r3, #35	; 0x23
 8003fd4:	2258      	movs	r2, #88	; 0x58
 8003fd6:	18ba      	adds	r2, r7, r2
 8003fd8:	18d2      	adds	r2, r2, r3
 8003fda:	2300      	movs	r3, #0
 8003fdc:	7013      	strb	r3, [r2, #0]
 8003fde:	e0b4      	b.n	800414a <UART_SetConfig+0x252>
 8003fe0:	2323      	movs	r3, #35	; 0x23
 8003fe2:	2258      	movs	r2, #88	; 0x58
 8003fe4:	18ba      	adds	r2, r7, r2
 8003fe6:	18d2      	adds	r2, r2, r3
 8003fe8:	2302      	movs	r3, #2
 8003fea:	7013      	strb	r3, [r2, #0]
 8003fec:	e0ad      	b.n	800414a <UART_SetConfig+0x252>
 8003fee:	2323      	movs	r3, #35	; 0x23
 8003ff0:	2258      	movs	r2, #88	; 0x58
 8003ff2:	18ba      	adds	r2, r7, r2
 8003ff4:	18d2      	adds	r2, r2, r3
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	7013      	strb	r3, [r2, #0]
 8003ffa:	e0a6      	b.n	800414a <UART_SetConfig+0x252>
 8003ffc:	2323      	movs	r3, #35	; 0x23
 8003ffe:	2258      	movs	r2, #88	; 0x58
 8004000:	18ba      	adds	r2, r7, r2
 8004002:	18d2      	adds	r2, r2, r3
 8004004:	2308      	movs	r3, #8
 8004006:	7013      	strb	r3, [r2, #0]
 8004008:	e09f      	b.n	800414a <UART_SetConfig+0x252>
 800400a:	2323      	movs	r3, #35	; 0x23
 800400c:	2258      	movs	r2, #88	; 0x58
 800400e:	18ba      	adds	r2, r7, r2
 8004010:	18d2      	adds	r2, r2, r3
 8004012:	2310      	movs	r3, #16
 8004014:	7013      	strb	r3, [r2, #0]
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	e097      	b.n	800414a <UART_SetConfig+0x252>
 800401a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b88      	ldr	r3, [pc, #544]	; (8004240 <UART_SetConfig+0x348>)
 8004020:	429a      	cmp	r2, r3
 8004022:	d132      	bne.n	800408a <UART_SetConfig+0x192>
 8004024:	4b85      	ldr	r3, [pc, #532]	; (800423c <UART_SetConfig+0x344>)
 8004026:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004028:	230c      	movs	r3, #12
 800402a:	4013      	ands	r3, r2
 800402c:	2b04      	cmp	r3, #4
 800402e:	d016      	beq.n	800405e <UART_SetConfig+0x166>
 8004030:	d802      	bhi.n	8004038 <UART_SetConfig+0x140>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <UART_SetConfig+0x14a>
 8004036:	e020      	b.n	800407a <UART_SetConfig+0x182>
 8004038:	2b08      	cmp	r3, #8
 800403a:	d009      	beq.n	8004050 <UART_SetConfig+0x158>
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d015      	beq.n	800406c <UART_SetConfig+0x174>
 8004040:	e01b      	b.n	800407a <UART_SetConfig+0x182>
 8004042:	2323      	movs	r3, #35	; 0x23
 8004044:	2258      	movs	r2, #88	; 0x58
 8004046:	18ba      	adds	r2, r7, r2
 8004048:	18d2      	adds	r2, r2, r3
 800404a:	2300      	movs	r3, #0
 800404c:	7013      	strb	r3, [r2, #0]
 800404e:	e07c      	b.n	800414a <UART_SetConfig+0x252>
 8004050:	2323      	movs	r3, #35	; 0x23
 8004052:	2258      	movs	r2, #88	; 0x58
 8004054:	18ba      	adds	r2, r7, r2
 8004056:	18d2      	adds	r2, r2, r3
 8004058:	2302      	movs	r3, #2
 800405a:	7013      	strb	r3, [r2, #0]
 800405c:	e075      	b.n	800414a <UART_SetConfig+0x252>
 800405e:	2323      	movs	r3, #35	; 0x23
 8004060:	2258      	movs	r2, #88	; 0x58
 8004062:	18ba      	adds	r2, r7, r2
 8004064:	18d2      	adds	r2, r2, r3
 8004066:	2304      	movs	r3, #4
 8004068:	7013      	strb	r3, [r2, #0]
 800406a:	e06e      	b.n	800414a <UART_SetConfig+0x252>
 800406c:	2323      	movs	r3, #35	; 0x23
 800406e:	2258      	movs	r2, #88	; 0x58
 8004070:	18ba      	adds	r2, r7, r2
 8004072:	18d2      	adds	r2, r2, r3
 8004074:	2308      	movs	r3, #8
 8004076:	7013      	strb	r3, [r2, #0]
 8004078:	e067      	b.n	800414a <UART_SetConfig+0x252>
 800407a:	2323      	movs	r3, #35	; 0x23
 800407c:	2258      	movs	r2, #88	; 0x58
 800407e:	18ba      	adds	r2, r7, r2
 8004080:	18d2      	adds	r2, r2, r3
 8004082:	2310      	movs	r3, #16
 8004084:	7013      	strb	r3, [r2, #0]
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	e05f      	b.n	800414a <UART_SetConfig+0x252>
 800408a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b6d      	ldr	r3, [pc, #436]	; (8004244 <UART_SetConfig+0x34c>)
 8004090:	429a      	cmp	r2, r3
 8004092:	d106      	bne.n	80040a2 <UART_SetConfig+0x1aa>
 8004094:	2323      	movs	r3, #35	; 0x23
 8004096:	2258      	movs	r2, #88	; 0x58
 8004098:	18ba      	adds	r2, r7, r2
 800409a:	18d2      	adds	r2, r2, r3
 800409c:	2300      	movs	r3, #0
 800409e:	7013      	strb	r3, [r2, #0]
 80040a0:	e053      	b.n	800414a <UART_SetConfig+0x252>
 80040a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b68      	ldr	r3, [pc, #416]	; (8004248 <UART_SetConfig+0x350>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d106      	bne.n	80040ba <UART_SetConfig+0x1c2>
 80040ac:	2323      	movs	r3, #35	; 0x23
 80040ae:	2258      	movs	r2, #88	; 0x58
 80040b0:	18ba      	adds	r2, r7, r2
 80040b2:	18d2      	adds	r2, r2, r3
 80040b4:	2300      	movs	r3, #0
 80040b6:	7013      	strb	r3, [r2, #0]
 80040b8:	e047      	b.n	800414a <UART_SetConfig+0x252>
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b5c      	ldr	r3, [pc, #368]	; (8004230 <UART_SetConfig+0x338>)
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d13c      	bne.n	800413e <UART_SetConfig+0x246>
 80040c4:	4b5d      	ldr	r3, [pc, #372]	; (800423c <UART_SetConfig+0x344>)
 80040c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c8:	23c0      	movs	r3, #192	; 0xc0
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	401a      	ands	r2, r3
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d01d      	beq.n	8004112 <UART_SetConfig+0x21a>
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	429a      	cmp	r2, r3
 80040dc:	d802      	bhi.n	80040e4 <UART_SetConfig+0x1ec>
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d009      	beq.n	80040f6 <UART_SetConfig+0x1fe>
 80040e2:	e024      	b.n	800412e <UART_SetConfig+0x236>
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d00b      	beq.n	8004104 <UART_SetConfig+0x20c>
 80040ec:	23c0      	movs	r3, #192	; 0xc0
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d015      	beq.n	8004120 <UART_SetConfig+0x228>
 80040f4:	e01b      	b.n	800412e <UART_SetConfig+0x236>
 80040f6:	2323      	movs	r3, #35	; 0x23
 80040f8:	2258      	movs	r2, #88	; 0x58
 80040fa:	18ba      	adds	r2, r7, r2
 80040fc:	18d2      	adds	r2, r2, r3
 80040fe:	2300      	movs	r3, #0
 8004100:	7013      	strb	r3, [r2, #0]
 8004102:	e022      	b.n	800414a <UART_SetConfig+0x252>
 8004104:	2323      	movs	r3, #35	; 0x23
 8004106:	2258      	movs	r2, #88	; 0x58
 8004108:	18ba      	adds	r2, r7, r2
 800410a:	18d2      	adds	r2, r2, r3
 800410c:	2302      	movs	r3, #2
 800410e:	7013      	strb	r3, [r2, #0]
 8004110:	e01b      	b.n	800414a <UART_SetConfig+0x252>
 8004112:	2323      	movs	r3, #35	; 0x23
 8004114:	2258      	movs	r2, #88	; 0x58
 8004116:	18ba      	adds	r2, r7, r2
 8004118:	18d2      	adds	r2, r2, r3
 800411a:	2304      	movs	r3, #4
 800411c:	7013      	strb	r3, [r2, #0]
 800411e:	e014      	b.n	800414a <UART_SetConfig+0x252>
 8004120:	2323      	movs	r3, #35	; 0x23
 8004122:	2258      	movs	r2, #88	; 0x58
 8004124:	18ba      	adds	r2, r7, r2
 8004126:	18d2      	adds	r2, r2, r3
 8004128:	2308      	movs	r3, #8
 800412a:	7013      	strb	r3, [r2, #0]
 800412c:	e00d      	b.n	800414a <UART_SetConfig+0x252>
 800412e:	2323      	movs	r3, #35	; 0x23
 8004130:	2258      	movs	r2, #88	; 0x58
 8004132:	18ba      	adds	r2, r7, r2
 8004134:	18d2      	adds	r2, r2, r3
 8004136:	2310      	movs	r3, #16
 8004138:	7013      	strb	r3, [r2, #0]
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	e005      	b.n	800414a <UART_SetConfig+0x252>
 800413e:	2323      	movs	r3, #35	; 0x23
 8004140:	2258      	movs	r2, #88	; 0x58
 8004142:	18ba      	adds	r2, r7, r2
 8004144:	18d2      	adds	r2, r2, r3
 8004146:	2310      	movs	r3, #16
 8004148:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800414a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4b38      	ldr	r3, [pc, #224]	; (8004230 <UART_SetConfig+0x338>)
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <UART_SetConfig+0x260>
 8004154:	f000 fbd0 	bl	80048f8 <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004158:	2323      	movs	r3, #35	; 0x23
 800415a:	2258      	movs	r2, #88	; 0x58
 800415c:	4694      	mov	ip, r2
 800415e:	44bc      	add	ip, r7
 8004160:	4463      	add	r3, ip
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d100      	bne.n	800416a <UART_SetConfig+0x272>
 8004168:	e070      	b.n	800424c <UART_SetConfig+0x354>
 800416a:	dc02      	bgt.n	8004172 <UART_SetConfig+0x27a>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <UART_SetConfig+0x288>
 8004170:	e15f      	b.n	8004432 <UART_SetConfig+0x53a>
 8004172:	2b04      	cmp	r3, #4
 8004174:	d100      	bne.n	8004178 <UART_SetConfig+0x280>
 8004176:	e0b4      	b.n	80042e2 <UART_SetConfig+0x3ea>
 8004178:	2b08      	cmp	r3, #8
 800417a:	d100      	bne.n	800417e <UART_SetConfig+0x286>
 800417c:	e105      	b.n	800438a <UART_SetConfig+0x492>
 800417e:	e158      	b.n	8004432 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004180:	f7fe fe42 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8004184:	0002      	movs	r2, r0
 8004186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d044      	beq.n	8004218 <UART_SetConfig+0x320>
 800418e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b01      	cmp	r3, #1
 8004194:	d03e      	beq.n	8004214 <UART_SetConfig+0x31c>
 8004196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b02      	cmp	r3, #2
 800419c:	d038      	beq.n	8004210 <UART_SetConfig+0x318>
 800419e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d032      	beq.n	800420c <UART_SetConfig+0x314>
 80041a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d02c      	beq.n	8004208 <UART_SetConfig+0x310>
 80041ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d026      	beq.n	8004204 <UART_SetConfig+0x30c>
 80041b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	2b06      	cmp	r3, #6
 80041bc:	d020      	beq.n	8004200 <UART_SetConfig+0x308>
 80041be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b07      	cmp	r3, #7
 80041c4:	d01a      	beq.n	80041fc <UART_SetConfig+0x304>
 80041c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d014      	beq.n	80041f8 <UART_SetConfig+0x300>
 80041ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b09      	cmp	r3, #9
 80041d4:	d00e      	beq.n	80041f4 <UART_SetConfig+0x2fc>
 80041d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	2b0a      	cmp	r3, #10
 80041dc:	d008      	beq.n	80041f0 <UART_SetConfig+0x2f8>
 80041de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b0b      	cmp	r3, #11
 80041e4:	d102      	bne.n	80041ec <UART_SetConfig+0x2f4>
 80041e6:	2380      	movs	r3, #128	; 0x80
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	e016      	b.n	800421a <UART_SetConfig+0x322>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e014      	b.n	800421a <UART_SetConfig+0x322>
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	e012      	b.n	800421a <UART_SetConfig+0x322>
 80041f4:	2340      	movs	r3, #64	; 0x40
 80041f6:	e010      	b.n	800421a <UART_SetConfig+0x322>
 80041f8:	2320      	movs	r3, #32
 80041fa:	e00e      	b.n	800421a <UART_SetConfig+0x322>
 80041fc:	2310      	movs	r3, #16
 80041fe:	e00c      	b.n	800421a <UART_SetConfig+0x322>
 8004200:	230c      	movs	r3, #12
 8004202:	e00a      	b.n	800421a <UART_SetConfig+0x322>
 8004204:	230a      	movs	r3, #10
 8004206:	e008      	b.n	800421a <UART_SetConfig+0x322>
 8004208:	2308      	movs	r3, #8
 800420a:	e006      	b.n	800421a <UART_SetConfig+0x322>
 800420c:	2306      	movs	r3, #6
 800420e:	e004      	b.n	800421a <UART_SetConfig+0x322>
 8004210:	2304      	movs	r3, #4
 8004212:	e002      	b.n	800421a <UART_SetConfig+0x322>
 8004214:	2302      	movs	r3, #2
 8004216:	e000      	b.n	800421a <UART_SetConfig+0x322>
 8004218:	2301      	movs	r3, #1
 800421a:	0019      	movs	r1, r3
 800421c:	0010      	movs	r0, r2
 800421e:	f7fb ff71 	bl	8000104 <__udivsi3>
 8004222:	0003      	movs	r3, r0
 8004224:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004226:	e10b      	b.n	8004440 <UART_SetConfig+0x548>
 8004228:	cfff69f3 	.word	0xcfff69f3
 800422c:	ffffcfff 	.word	0xffffcfff
 8004230:	40008000 	.word	0x40008000
 8004234:	11fff4ff 	.word	0x11fff4ff
 8004238:	40013800 	.word	0x40013800
 800423c:	40021000 	.word	0x40021000
 8004240:	40004400 	.word	0x40004400
 8004244:	40004800 	.word	0x40004800
 8004248:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800424c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d043      	beq.n	80042dc <UART_SetConfig+0x3e4>
 8004254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2b01      	cmp	r3, #1
 800425a:	d03d      	beq.n	80042d8 <UART_SetConfig+0x3e0>
 800425c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b02      	cmp	r3, #2
 8004262:	d037      	beq.n	80042d4 <UART_SetConfig+0x3dc>
 8004264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b03      	cmp	r3, #3
 800426a:	d031      	beq.n	80042d0 <UART_SetConfig+0x3d8>
 800426c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	2b04      	cmp	r3, #4
 8004272:	d02b      	beq.n	80042cc <UART_SetConfig+0x3d4>
 8004274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b05      	cmp	r3, #5
 800427a:	d025      	beq.n	80042c8 <UART_SetConfig+0x3d0>
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	2b06      	cmp	r3, #6
 8004282:	d01f      	beq.n	80042c4 <UART_SetConfig+0x3cc>
 8004284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2b07      	cmp	r3, #7
 800428a:	d019      	beq.n	80042c0 <UART_SetConfig+0x3c8>
 800428c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	2b08      	cmp	r3, #8
 8004292:	d013      	beq.n	80042bc <UART_SetConfig+0x3c4>
 8004294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	2b09      	cmp	r3, #9
 800429a:	d00d      	beq.n	80042b8 <UART_SetConfig+0x3c0>
 800429c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	2b0a      	cmp	r3, #10
 80042a2:	d007      	beq.n	80042b4 <UART_SetConfig+0x3bc>
 80042a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	2b0b      	cmp	r3, #11
 80042aa:	d101      	bne.n	80042b0 <UART_SetConfig+0x3b8>
 80042ac:	4bab      	ldr	r3, [pc, #684]	; (800455c <UART_SetConfig+0x664>)
 80042ae:	e016      	b.n	80042de <UART_SetConfig+0x3e6>
 80042b0:	4bab      	ldr	r3, [pc, #684]	; (8004560 <UART_SetConfig+0x668>)
 80042b2:	e014      	b.n	80042de <UART_SetConfig+0x3e6>
 80042b4:	4bab      	ldr	r3, [pc, #684]	; (8004564 <UART_SetConfig+0x66c>)
 80042b6:	e012      	b.n	80042de <UART_SetConfig+0x3e6>
 80042b8:	4bab      	ldr	r3, [pc, #684]	; (8004568 <UART_SetConfig+0x670>)
 80042ba:	e010      	b.n	80042de <UART_SetConfig+0x3e6>
 80042bc:	4bab      	ldr	r3, [pc, #684]	; (800456c <UART_SetConfig+0x674>)
 80042be:	e00e      	b.n	80042de <UART_SetConfig+0x3e6>
 80042c0:	4bab      	ldr	r3, [pc, #684]	; (8004570 <UART_SetConfig+0x678>)
 80042c2:	e00c      	b.n	80042de <UART_SetConfig+0x3e6>
 80042c4:	4bab      	ldr	r3, [pc, #684]	; (8004574 <UART_SetConfig+0x67c>)
 80042c6:	e00a      	b.n	80042de <UART_SetConfig+0x3e6>
 80042c8:	4bab      	ldr	r3, [pc, #684]	; (8004578 <UART_SetConfig+0x680>)
 80042ca:	e008      	b.n	80042de <UART_SetConfig+0x3e6>
 80042cc:	4bab      	ldr	r3, [pc, #684]	; (800457c <UART_SetConfig+0x684>)
 80042ce:	e006      	b.n	80042de <UART_SetConfig+0x3e6>
 80042d0:	4bab      	ldr	r3, [pc, #684]	; (8004580 <UART_SetConfig+0x688>)
 80042d2:	e004      	b.n	80042de <UART_SetConfig+0x3e6>
 80042d4:	4bab      	ldr	r3, [pc, #684]	; (8004584 <UART_SetConfig+0x68c>)
 80042d6:	e002      	b.n	80042de <UART_SetConfig+0x3e6>
 80042d8:	4bab      	ldr	r3, [pc, #684]	; (8004588 <UART_SetConfig+0x690>)
 80042da:	e000      	b.n	80042de <UART_SetConfig+0x3e6>
 80042dc:	4ba0      	ldr	r3, [pc, #640]	; (8004560 <UART_SetConfig+0x668>)
 80042de:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80042e0:	e0ae      	b.n	8004440 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80042e2:	f7fe fd05 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 80042e6:	0002      	movs	r2, r0
 80042e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d044      	beq.n	800437a <UART_SetConfig+0x482>
 80042f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d03e      	beq.n	8004376 <UART_SetConfig+0x47e>
 80042f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d038      	beq.n	8004372 <UART_SetConfig+0x47a>
 8004300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	2b03      	cmp	r3, #3
 8004306:	d032      	beq.n	800436e <UART_SetConfig+0x476>
 8004308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b04      	cmp	r3, #4
 800430e:	d02c      	beq.n	800436a <UART_SetConfig+0x472>
 8004310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2b05      	cmp	r3, #5
 8004316:	d026      	beq.n	8004366 <UART_SetConfig+0x46e>
 8004318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	2b06      	cmp	r3, #6
 800431e:	d020      	beq.n	8004362 <UART_SetConfig+0x46a>
 8004320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	2b07      	cmp	r3, #7
 8004326:	d01a      	beq.n	800435e <UART_SetConfig+0x466>
 8004328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	2b08      	cmp	r3, #8
 800432e:	d014      	beq.n	800435a <UART_SetConfig+0x462>
 8004330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2b09      	cmp	r3, #9
 8004336:	d00e      	beq.n	8004356 <UART_SetConfig+0x45e>
 8004338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2b0a      	cmp	r3, #10
 800433e:	d008      	beq.n	8004352 <UART_SetConfig+0x45a>
 8004340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	2b0b      	cmp	r3, #11
 8004346:	d102      	bne.n	800434e <UART_SetConfig+0x456>
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	e016      	b.n	800437c <UART_SetConfig+0x484>
 800434e:	2301      	movs	r3, #1
 8004350:	e014      	b.n	800437c <UART_SetConfig+0x484>
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	e012      	b.n	800437c <UART_SetConfig+0x484>
 8004356:	2340      	movs	r3, #64	; 0x40
 8004358:	e010      	b.n	800437c <UART_SetConfig+0x484>
 800435a:	2320      	movs	r3, #32
 800435c:	e00e      	b.n	800437c <UART_SetConfig+0x484>
 800435e:	2310      	movs	r3, #16
 8004360:	e00c      	b.n	800437c <UART_SetConfig+0x484>
 8004362:	230c      	movs	r3, #12
 8004364:	e00a      	b.n	800437c <UART_SetConfig+0x484>
 8004366:	230a      	movs	r3, #10
 8004368:	e008      	b.n	800437c <UART_SetConfig+0x484>
 800436a:	2308      	movs	r3, #8
 800436c:	e006      	b.n	800437c <UART_SetConfig+0x484>
 800436e:	2306      	movs	r3, #6
 8004370:	e004      	b.n	800437c <UART_SetConfig+0x484>
 8004372:	2304      	movs	r3, #4
 8004374:	e002      	b.n	800437c <UART_SetConfig+0x484>
 8004376:	2302      	movs	r3, #2
 8004378:	e000      	b.n	800437c <UART_SetConfig+0x484>
 800437a:	2301      	movs	r3, #1
 800437c:	0019      	movs	r1, r3
 800437e:	0010      	movs	r0, r2
 8004380:	f7fb fec0 	bl	8000104 <__udivsi3>
 8004384:	0003      	movs	r3, r0
 8004386:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004388:	e05a      	b.n	8004440 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800438a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d04b      	beq.n	800442a <UART_SetConfig+0x532>
 8004392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b01      	cmp	r3, #1
 8004398:	d044      	beq.n	8004424 <UART_SetConfig+0x52c>
 800439a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d03d      	beq.n	800441e <UART_SetConfig+0x526>
 80043a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d037      	beq.n	800441a <UART_SetConfig+0x522>
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d030      	beq.n	8004414 <UART_SetConfig+0x51c>
 80043b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d02a      	beq.n	8004410 <UART_SetConfig+0x518>
 80043ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d024      	beq.n	800440c <UART_SetConfig+0x514>
 80043c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b07      	cmp	r3, #7
 80043c8:	d01d      	beq.n	8004406 <UART_SetConfig+0x50e>
 80043ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d016      	beq.n	8004400 <UART_SetConfig+0x508>
 80043d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	2b09      	cmp	r3, #9
 80043d8:	d00f      	beq.n	80043fa <UART_SetConfig+0x502>
 80043da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	2b0a      	cmp	r3, #10
 80043e0:	d008      	beq.n	80043f4 <UART_SetConfig+0x4fc>
 80043e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b0b      	cmp	r3, #11
 80043e8:	d101      	bne.n	80043ee <UART_SetConfig+0x4f6>
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	e01f      	b.n	800442e <UART_SetConfig+0x536>
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	e01c      	b.n	800442e <UART_SetConfig+0x536>
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	e019      	b.n	800442e <UART_SetConfig+0x536>
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	e016      	b.n	800442e <UART_SetConfig+0x536>
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	e013      	b.n	800442e <UART_SetConfig+0x536>
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x536>
 800440c:	4b5f      	ldr	r3, [pc, #380]	; (800458c <UART_SetConfig+0x694>)
 800440e:	e00e      	b.n	800442e <UART_SetConfig+0x536>
 8004410:	4b5f      	ldr	r3, [pc, #380]	; (8004590 <UART_SetConfig+0x698>)
 8004412:	e00c      	b.n	800442e <UART_SetConfig+0x536>
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	015b      	lsls	r3, r3, #5
 8004418:	e009      	b.n	800442e <UART_SetConfig+0x536>
 800441a:	4b5e      	ldr	r3, [pc, #376]	; (8004594 <UART_SetConfig+0x69c>)
 800441c:	e007      	b.n	800442e <UART_SetConfig+0x536>
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	e004      	b.n	800442e <UART_SetConfig+0x536>
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	01db      	lsls	r3, r3, #7
 8004428:	e001      	b.n	800442e <UART_SetConfig+0x536>
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004430:	e006      	b.n	8004440 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 8004432:	231b      	movs	r3, #27
 8004434:	2258      	movs	r2, #88	; 0x58
 8004436:	18ba      	adds	r2, r7, r2
 8004438:	18d2      	adds	r2, r2, r3
 800443a:	2301      	movs	r3, #1
 800443c:	7013      	strb	r3, [r2, #0]
        break;
 800443e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <UART_SetConfig+0x552>
 8004446:	f000 fe12 	bl	800506e <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800444a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	0013      	movs	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	189a      	adds	r2, r3, r2
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004456:	4293      	cmp	r3, r2
 8004458:	d305      	bcc.n	8004466 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800445a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004462:	4293      	cmp	r3, r2
 8004464:	d908      	bls.n	8004478 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 8004466:	231b      	movs	r3, #27
 8004468:	2258      	movs	r2, #88	; 0x58
 800446a:	4694      	mov	ip, r2
 800446c:	44bc      	add	ip, r7
 800446e:	4463      	add	r3, ip
 8004470:	2201      	movs	r2, #1
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	f000 fdfb 	bl	800506e <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 8004478:	2323      	movs	r3, #35	; 0x23
 800447a:	2258      	movs	r2, #88	; 0x58
 800447c:	4694      	mov	ip, r2
 800447e:	44bc      	add	ip, r7
 8004480:	4463      	add	r3, ip
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d100      	bne.n	800448a <UART_SetConfig+0x592>
 8004488:	e0ab      	b.n	80045e2 <UART_SetConfig+0x6ea>
 800448a:	dc02      	bgt.n	8004492 <UART_SetConfig+0x59a>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <UART_SetConfig+0x5a8>
 8004490:	e213      	b.n	80048ba <UART_SetConfig+0x9c2>
 8004492:	2b04      	cmp	r3, #4
 8004494:	d100      	bne.n	8004498 <UART_SetConfig+0x5a0>
 8004496:	e111      	b.n	80046bc <UART_SetConfig+0x7c4>
 8004498:	2b08      	cmp	r3, #8
 800449a:	d100      	bne.n	800449e <UART_SetConfig+0x5a6>
 800449c:	e196      	b.n	80047cc <UART_SetConfig+0x8d4>
 800449e:	e20c      	b.n	80048ba <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fe fcb2 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80044a4:	0003      	movs	r3, r0
 80044a6:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ac:	2300      	movs	r3, #0
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d100      	bne.n	80044ba <UART_SetConfig+0x5c2>
 80044b8:	e06e      	b.n	8004598 <UART_SetConfig+0x6a0>
 80044ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d049      	beq.n	8004556 <UART_SetConfig+0x65e>
 80044c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d042      	beq.n	8004550 <UART_SetConfig+0x658>
 80044ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d03b      	beq.n	800454a <UART_SetConfig+0x652>
 80044d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d034      	beq.n	8004544 <UART_SetConfig+0x64c>
 80044da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d02d      	beq.n	800453e <UART_SetConfig+0x646>
 80044e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d026      	beq.n	8004538 <UART_SetConfig+0x640>
 80044ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2b07      	cmp	r3, #7
 80044f0:	d01f      	beq.n	8004532 <UART_SetConfig+0x63a>
 80044f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d018      	beq.n	800452c <UART_SetConfig+0x634>
 80044fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	2b09      	cmp	r3, #9
 8004500:	d011      	beq.n	8004526 <UART_SetConfig+0x62e>
 8004502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b0a      	cmp	r3, #10
 8004508:	d00a      	beq.n	8004520 <UART_SetConfig+0x628>
 800450a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	2b0b      	cmp	r3, #11
 8004510:	d103      	bne.n	800451a <UART_SetConfig+0x622>
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2400      	movs	r4, #0
 8004518:	e040      	b.n	800459c <UART_SetConfig+0x6a4>
 800451a:	2301      	movs	r3, #1
 800451c:	2400      	movs	r4, #0
 800451e:	e03d      	b.n	800459c <UART_SetConfig+0x6a4>
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	2400      	movs	r4, #0
 8004524:	e03a      	b.n	800459c <UART_SetConfig+0x6a4>
 8004526:	2340      	movs	r3, #64	; 0x40
 8004528:	2400      	movs	r4, #0
 800452a:	e037      	b.n	800459c <UART_SetConfig+0x6a4>
 800452c:	2320      	movs	r3, #32
 800452e:	2400      	movs	r4, #0
 8004530:	e034      	b.n	800459c <UART_SetConfig+0x6a4>
 8004532:	2310      	movs	r3, #16
 8004534:	2400      	movs	r4, #0
 8004536:	e031      	b.n	800459c <UART_SetConfig+0x6a4>
 8004538:	230c      	movs	r3, #12
 800453a:	2400      	movs	r4, #0
 800453c:	e02e      	b.n	800459c <UART_SetConfig+0x6a4>
 800453e:	230a      	movs	r3, #10
 8004540:	2400      	movs	r4, #0
 8004542:	e02b      	b.n	800459c <UART_SetConfig+0x6a4>
 8004544:	2308      	movs	r3, #8
 8004546:	2400      	movs	r4, #0
 8004548:	e028      	b.n	800459c <UART_SetConfig+0x6a4>
 800454a:	2306      	movs	r3, #6
 800454c:	2400      	movs	r4, #0
 800454e:	e025      	b.n	800459c <UART_SetConfig+0x6a4>
 8004550:	2304      	movs	r3, #4
 8004552:	2400      	movs	r4, #0
 8004554:	e022      	b.n	800459c <UART_SetConfig+0x6a4>
 8004556:	2302      	movs	r3, #2
 8004558:	2400      	movs	r4, #0
 800455a:	e01f      	b.n	800459c <UART_SetConfig+0x6a4>
 800455c:	0000f424 	.word	0x0000f424
 8004560:	00f42400 	.word	0x00f42400
 8004564:	0001e848 	.word	0x0001e848
 8004568:	0003d090 	.word	0x0003d090
 800456c:	0007a120 	.word	0x0007a120
 8004570:	000f4240 	.word	0x000f4240
 8004574:	00145855 	.word	0x00145855
 8004578:	00186a00 	.word	0x00186a00
 800457c:	001e8480 	.word	0x001e8480
 8004580:	0028b0aa 	.word	0x0028b0aa
 8004584:	003d0900 	.word	0x003d0900
 8004588:	007a1200 	.word	0x007a1200
 800458c:	00000aaa 	.word	0x00000aaa
 8004590:	00000ccc 	.word	0x00000ccc
 8004594:	00001555 	.word	0x00001555
 8004598:	2301      	movs	r3, #1
 800459a:	2400      	movs	r4, #0
 800459c:	001a      	movs	r2, r3
 800459e:	0023      	movs	r3, r4
 80045a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80045a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045a4:	f7fb ff24 	bl	80003f0 <__aeabi_uldivmod>
 80045a8:	0003      	movs	r3, r0
 80045aa:	000c      	movs	r4, r1
 80045ac:	0e1a      	lsrs	r2, r3, #24
 80045ae:	0226      	lsls	r6, r4, #8
 80045b0:	4316      	orrs	r6, r2
 80045b2:	021d      	lsls	r5, r3, #8
 80045b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	643b      	str	r3, [r7, #64]	; 0x40
 80045bc:	2300      	movs	r3, #0
 80045be:	647b      	str	r3, [r7, #68]	; 0x44
 80045c0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80045c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045c4:	1940      	adds	r0, r0, r5
 80045c6:	4171      	adcs	r1, r6
 80045c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ce:	2300      	movs	r3, #0
 80045d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d6:	f7fb ff0b 	bl	80003f0 <__aeabi_uldivmod>
 80045da:	0003      	movs	r3, r0
 80045dc:	000c      	movs	r4, r1
 80045de:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80045e0:	e173      	b.n	80048ca <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d04f      	beq.n	800468a <UART_SetConfig+0x792>
 80045ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d048      	beq.n	8004684 <UART_SetConfig+0x78c>
 80045f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d041      	beq.n	800467e <UART_SetConfig+0x786>
 80045fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d03a      	beq.n	8004678 <UART_SetConfig+0x780>
 8004602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b04      	cmp	r3, #4
 8004608:	d033      	beq.n	8004672 <UART_SetConfig+0x77a>
 800460a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2b05      	cmp	r3, #5
 8004610:	d02c      	beq.n	800466c <UART_SetConfig+0x774>
 8004612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b06      	cmp	r3, #6
 8004618:	d025      	beq.n	8004666 <UART_SetConfig+0x76e>
 800461a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b07      	cmp	r3, #7
 8004620:	d01e      	beq.n	8004660 <UART_SetConfig+0x768>
 8004622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	2b08      	cmp	r3, #8
 8004628:	d017      	beq.n	800465a <UART_SetConfig+0x762>
 800462a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b09      	cmp	r3, #9
 8004630:	d010      	beq.n	8004654 <UART_SetConfig+0x75c>
 8004632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2b0a      	cmp	r3, #10
 8004638:	d009      	beq.n	800464e <UART_SetConfig+0x756>
 800463a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b0b      	cmp	r3, #11
 8004640:	d102      	bne.n	8004648 <UART_SetConfig+0x750>
 8004642:	4bbb      	ldr	r3, [pc, #748]	; (8004930 <UART_SetConfig+0xa38>)
 8004644:	2400      	movs	r4, #0
 8004646:	e022      	b.n	800468e <UART_SetConfig+0x796>
 8004648:	4bba      	ldr	r3, [pc, #744]	; (8004934 <UART_SetConfig+0xa3c>)
 800464a:	2400      	movs	r4, #0
 800464c:	e01f      	b.n	800468e <UART_SetConfig+0x796>
 800464e:	4bba      	ldr	r3, [pc, #744]	; (8004938 <UART_SetConfig+0xa40>)
 8004650:	2400      	movs	r4, #0
 8004652:	e01c      	b.n	800468e <UART_SetConfig+0x796>
 8004654:	4bb9      	ldr	r3, [pc, #740]	; (800493c <UART_SetConfig+0xa44>)
 8004656:	2400      	movs	r4, #0
 8004658:	e019      	b.n	800468e <UART_SetConfig+0x796>
 800465a:	4bb9      	ldr	r3, [pc, #740]	; (8004940 <UART_SetConfig+0xa48>)
 800465c:	2400      	movs	r4, #0
 800465e:	e016      	b.n	800468e <UART_SetConfig+0x796>
 8004660:	4bb8      	ldr	r3, [pc, #736]	; (8004944 <UART_SetConfig+0xa4c>)
 8004662:	2400      	movs	r4, #0
 8004664:	e013      	b.n	800468e <UART_SetConfig+0x796>
 8004666:	4bb8      	ldr	r3, [pc, #736]	; (8004948 <UART_SetConfig+0xa50>)
 8004668:	2400      	movs	r4, #0
 800466a:	e010      	b.n	800468e <UART_SetConfig+0x796>
 800466c:	4bb7      	ldr	r3, [pc, #732]	; (800494c <UART_SetConfig+0xa54>)
 800466e:	2400      	movs	r4, #0
 8004670:	e00d      	b.n	800468e <UART_SetConfig+0x796>
 8004672:	4bb7      	ldr	r3, [pc, #732]	; (8004950 <UART_SetConfig+0xa58>)
 8004674:	2400      	movs	r4, #0
 8004676:	e00a      	b.n	800468e <UART_SetConfig+0x796>
 8004678:	4bb6      	ldr	r3, [pc, #728]	; (8004954 <UART_SetConfig+0xa5c>)
 800467a:	2400      	movs	r4, #0
 800467c:	e007      	b.n	800468e <UART_SetConfig+0x796>
 800467e:	4bb6      	ldr	r3, [pc, #728]	; (8004958 <UART_SetConfig+0xa60>)
 8004680:	2400      	movs	r4, #0
 8004682:	e004      	b.n	800468e <UART_SetConfig+0x796>
 8004684:	4bb5      	ldr	r3, [pc, #724]	; (800495c <UART_SetConfig+0xa64>)
 8004686:	2400      	movs	r4, #0
 8004688:	e001      	b.n	800468e <UART_SetConfig+0x796>
 800468a:	4baa      	ldr	r3, [pc, #680]	; (8004934 <UART_SetConfig+0xa3c>)
 800468c:	2400      	movs	r4, #0
 800468e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004690:	6852      	ldr	r2, [r2, #4]
 8004692:	0852      	lsrs	r2, r2, #1
 8004694:	633a      	str	r2, [r7, #48]	; 0x30
 8004696:	2200      	movs	r2, #0
 8004698:	637a      	str	r2, [r7, #52]	; 0x34
 800469a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800469c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800469e:	18c0      	adds	r0, r0, r3
 80046a0:	4161      	adcs	r1, r4
 80046a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	f7fb fe9e 	bl	80003f0 <__aeabi_uldivmod>
 80046b4:	0003      	movs	r3, r0
 80046b6:	000c      	movs	r4, r1
 80046b8:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80046ba:	e106      	b.n	80048ca <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80046bc:	f7fe fb18 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 80046c0:	0003      	movs	r3, r0
 80046c2:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	2300      	movs	r3, #0
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d050      	beq.n	8004776 <UART_SetConfig+0x87e>
 80046d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d049      	beq.n	8004770 <UART_SetConfig+0x878>
 80046dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d042      	beq.n	800476a <UART_SetConfig+0x872>
 80046e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d03b      	beq.n	8004764 <UART_SetConfig+0x86c>
 80046ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d034      	beq.n	800475e <UART_SetConfig+0x866>
 80046f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d02d      	beq.n	8004758 <UART_SetConfig+0x860>
 80046fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b06      	cmp	r3, #6
 8004702:	d026      	beq.n	8004752 <UART_SetConfig+0x85a>
 8004704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	2b07      	cmp	r3, #7
 800470a:	d01f      	beq.n	800474c <UART_SetConfig+0x854>
 800470c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	2b08      	cmp	r3, #8
 8004712:	d018      	beq.n	8004746 <UART_SetConfig+0x84e>
 8004714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	2b09      	cmp	r3, #9
 800471a:	d011      	beq.n	8004740 <UART_SetConfig+0x848>
 800471c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2b0a      	cmp	r3, #10
 8004722:	d00a      	beq.n	800473a <UART_SetConfig+0x842>
 8004724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	2b0b      	cmp	r3, #11
 800472a:	d103      	bne.n	8004734 <UART_SetConfig+0x83c>
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	2400      	movs	r4, #0
 8004732:	e022      	b.n	800477a <UART_SetConfig+0x882>
 8004734:	2301      	movs	r3, #1
 8004736:	2400      	movs	r4, #0
 8004738:	e01f      	b.n	800477a <UART_SetConfig+0x882>
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	2400      	movs	r4, #0
 800473e:	e01c      	b.n	800477a <UART_SetConfig+0x882>
 8004740:	2340      	movs	r3, #64	; 0x40
 8004742:	2400      	movs	r4, #0
 8004744:	e019      	b.n	800477a <UART_SetConfig+0x882>
 8004746:	2320      	movs	r3, #32
 8004748:	2400      	movs	r4, #0
 800474a:	e016      	b.n	800477a <UART_SetConfig+0x882>
 800474c:	2310      	movs	r3, #16
 800474e:	2400      	movs	r4, #0
 8004750:	e013      	b.n	800477a <UART_SetConfig+0x882>
 8004752:	230c      	movs	r3, #12
 8004754:	2400      	movs	r4, #0
 8004756:	e010      	b.n	800477a <UART_SetConfig+0x882>
 8004758:	230a      	movs	r3, #10
 800475a:	2400      	movs	r4, #0
 800475c:	e00d      	b.n	800477a <UART_SetConfig+0x882>
 800475e:	2308      	movs	r3, #8
 8004760:	2400      	movs	r4, #0
 8004762:	e00a      	b.n	800477a <UART_SetConfig+0x882>
 8004764:	2306      	movs	r3, #6
 8004766:	2400      	movs	r4, #0
 8004768:	e007      	b.n	800477a <UART_SetConfig+0x882>
 800476a:	2304      	movs	r3, #4
 800476c:	2400      	movs	r4, #0
 800476e:	e004      	b.n	800477a <UART_SetConfig+0x882>
 8004770:	2302      	movs	r3, #2
 8004772:	2400      	movs	r4, #0
 8004774:	e001      	b.n	800477a <UART_SetConfig+0x882>
 8004776:	2301      	movs	r3, #1
 8004778:	2400      	movs	r4, #0
 800477a:	001a      	movs	r2, r3
 800477c:	0023      	movs	r3, r4
 800477e:	6a38      	ldr	r0, [r7, #32]
 8004780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004782:	f7fb fe35 	bl	80003f0 <__aeabi_uldivmod>
 8004786:	0003      	movs	r3, r0
 8004788:	000c      	movs	r4, r1
 800478a:	0e1a      	lsrs	r2, r3, #24
 800478c:	0221      	lsls	r1, r4, #8
 800478e:	6579      	str	r1, [r7, #84]	; 0x54
 8004790:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004792:	4311      	orrs	r1, r2
 8004794:	6579      	str	r1, [r7, #84]	; 0x54
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	653b      	str	r3, [r7, #80]	; 0x50
 800479a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80047a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	69fc      	ldr	r4, [r7, #28]
 80047ae:	18c0      	adds	r0, r0, r3
 80047b0:	4161      	adcs	r1, r4
 80047b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f7fb fe16 	bl	80003f0 <__aeabi_uldivmod>
 80047c4:	0003      	movs	r3, r0
 80047c6:	000c      	movs	r4, r1
 80047c8:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80047ca:	e07e      	b.n	80048ca <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d058      	beq.n	8004886 <UART_SetConfig+0x98e>
 80047d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d050      	beq.n	800487e <UART_SetConfig+0x986>
 80047dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d048      	beq.n	8004876 <UART_SetConfig+0x97e>
 80047e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d041      	beq.n	8004870 <UART_SetConfig+0x978>
 80047ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d039      	beq.n	8004868 <UART_SetConfig+0x970>
 80047f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d032      	beq.n	8004862 <UART_SetConfig+0x96a>
 80047fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b06      	cmp	r3, #6
 8004802:	d02b      	beq.n	800485c <UART_SetConfig+0x964>
 8004804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	2b07      	cmp	r3, #7
 800480a:	d023      	beq.n	8004854 <UART_SetConfig+0x95c>
 800480c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b08      	cmp	r3, #8
 8004812:	d01b      	beq.n	800484c <UART_SetConfig+0x954>
 8004814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b09      	cmp	r3, #9
 800481a:	d013      	beq.n	8004844 <UART_SetConfig+0x94c>
 800481c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b0a      	cmp	r3, #10
 8004822:	d00b      	beq.n	800483c <UART_SetConfig+0x944>
 8004824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b0b      	cmp	r3, #11
 800482a:	d103      	bne.n	8004834 <UART_SetConfig+0x93c>
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	2400      	movs	r4, #0
 8004832:	e02b      	b.n	800488c <UART_SetConfig+0x994>
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	2400      	movs	r4, #0
 800483a:	e027      	b.n	800488c <UART_SetConfig+0x994>
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	025b      	lsls	r3, r3, #9
 8004840:	2400      	movs	r4, #0
 8004842:	e023      	b.n	800488c <UART_SetConfig+0x994>
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	2400      	movs	r4, #0
 800484a:	e01f      	b.n	800488c <UART_SetConfig+0x994>
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	02db      	lsls	r3, r3, #11
 8004850:	2400      	movs	r4, #0
 8004852:	e01b      	b.n	800488c <UART_SetConfig+0x994>
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	031b      	lsls	r3, r3, #12
 8004858:	2400      	movs	r4, #0
 800485a:	e017      	b.n	800488c <UART_SetConfig+0x994>
 800485c:	4b40      	ldr	r3, [pc, #256]	; (8004960 <UART_SetConfig+0xa68>)
 800485e:	2400      	movs	r4, #0
 8004860:	e014      	b.n	800488c <UART_SetConfig+0x994>
 8004862:	4b40      	ldr	r3, [pc, #256]	; (8004964 <UART_SetConfig+0xa6c>)
 8004864:	2400      	movs	r4, #0
 8004866:	e011      	b.n	800488c <UART_SetConfig+0x994>
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	035b      	lsls	r3, r3, #13
 800486c:	2400      	movs	r4, #0
 800486e:	e00d      	b.n	800488c <UART_SetConfig+0x994>
 8004870:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <UART_SetConfig+0xa70>)
 8004872:	2400      	movs	r4, #0
 8004874:	e00a      	b.n	800488c <UART_SetConfig+0x994>
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	039b      	lsls	r3, r3, #14
 800487a:	2400      	movs	r4, #0
 800487c:	e006      	b.n	800488c <UART_SetConfig+0x994>
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	03db      	lsls	r3, r3, #15
 8004882:	2400      	movs	r4, #0
 8004884:	e002      	b.n	800488c <UART_SetConfig+0x994>
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	2400      	movs	r4, #0
 800488c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800488e:	6852      	ldr	r2, [r2, #4]
 8004890:	0852      	lsrs	r2, r2, #1
 8004892:	60ba      	str	r2, [r7, #8]
 8004894:	2200      	movs	r2, #0
 8004896:	60fa      	str	r2, [r7, #12]
 8004898:	68b8      	ldr	r0, [r7, #8]
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	18c0      	adds	r0, r0, r3
 800489e:	4161      	adcs	r1, r4
 80048a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	2300      	movs	r3, #0
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f7fb fd9f 	bl	80003f0 <__aeabi_uldivmod>
 80048b2:	0003      	movs	r3, r0
 80048b4:	000c      	movs	r4, r1
 80048b6:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80048b8:	e007      	b.n	80048ca <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 80048ba:	231b      	movs	r3, #27
 80048bc:	2258      	movs	r2, #88	; 0x58
 80048be:	4694      	mov	ip, r2
 80048c0:	44bc      	add	ip, r7
 80048c2:	4463      	add	r3, ip
 80048c4:	2201      	movs	r2, #1
 80048c6:	701a      	strb	r2, [r3, #0]
            break;
 80048c8:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <UART_SetConfig+0xa74>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d909      	bls.n	80048e6 <UART_SetConfig+0x9ee>
 80048d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d4:	4a26      	ldr	r2, [pc, #152]	; (8004970 <UART_SetConfig+0xa78>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d805      	bhi.n	80048e6 <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 80048da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	f000 fbc4 	bl	800506e <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 80048e6:	231b      	movs	r3, #27
 80048e8:	2258      	movs	r2, #88	; 0x58
 80048ea:	4694      	mov	ip, r2
 80048ec:	44bc      	add	ip, r7
 80048ee:	4463      	add	r3, ip
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	f000 fbbb 	bl	800506e <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	2380      	movs	r3, #128	; 0x80
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	429a      	cmp	r2, r3
 8004902:	d000      	beq.n	8004906 <UART_SetConfig+0xa0e>
 8004904:	e1e6      	b.n	8004cd4 <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 8004906:	2323      	movs	r3, #35	; 0x23
 8004908:	2258      	movs	r2, #88	; 0x58
 800490a:	4694      	mov	ip, r2
 800490c:	44bc      	add	ip, r7
 800490e:	4463      	add	r3, ip
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d100      	bne.n	8004918 <UART_SetConfig+0xa20>
 8004916:	e08f      	b.n	8004a38 <UART_SetConfig+0xb40>
 8004918:	dc02      	bgt.n	8004920 <UART_SetConfig+0xa28>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02a      	beq.n	8004974 <UART_SetConfig+0xa7c>
 800491e:	e1a5      	b.n	8004c6c <UART_SetConfig+0xd74>
 8004920:	2b04      	cmp	r3, #4
 8004922:	d100      	bne.n	8004926 <UART_SetConfig+0xa2e>
 8004924:	e0df      	b.n	8004ae6 <UART_SetConfig+0xbee>
 8004926:	2b08      	cmp	r3, #8
 8004928:	d100      	bne.n	800492c <UART_SetConfig+0xa34>
 800492a:	e13e      	b.n	8004baa <UART_SetConfig+0xcb2>
 800492c:	e19e      	b.n	8004c6c <UART_SetConfig+0xd74>
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	00f42400 	.word	0x00f42400
 8004934:	f4240000 	.word	0xf4240000
 8004938:	01e84800 	.word	0x01e84800
 800493c:	03d09000 	.word	0x03d09000
 8004940:	07a12000 	.word	0x07a12000
 8004944:	0f424000 	.word	0x0f424000
 8004948:	14585500 	.word	0x14585500
 800494c:	186a0000 	.word	0x186a0000
 8004950:	1e848000 	.word	0x1e848000
 8004954:	28b0aa00 	.word	0x28b0aa00
 8004958:	3d090000 	.word	0x3d090000
 800495c:	7a120000 	.word	0x7a120000
 8004960:	000aaa00 	.word	0x000aaa00
 8004964:	000ccc00 	.word	0x000ccc00
 8004968:	00155500 	.word	0x00155500
 800496c:	000002ff 	.word	0x000002ff
 8004970:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004974:	f7fe fa48 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8004978:	0003      	movs	r3, r0
 800497a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800497c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2b00      	cmp	r3, #0
 8004982:	d044      	beq.n	8004a0e <UART_SetConfig+0xb16>
 8004984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2b01      	cmp	r3, #1
 800498a:	d03e      	beq.n	8004a0a <UART_SetConfig+0xb12>
 800498c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	2b02      	cmp	r3, #2
 8004992:	d038      	beq.n	8004a06 <UART_SetConfig+0xb0e>
 8004994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	2b03      	cmp	r3, #3
 800499a:	d032      	beq.n	8004a02 <UART_SetConfig+0xb0a>
 800499c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d02c      	beq.n	80049fe <UART_SetConfig+0xb06>
 80049a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d026      	beq.n	80049fa <UART_SetConfig+0xb02>
 80049ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	2b06      	cmp	r3, #6
 80049b2:	d020      	beq.n	80049f6 <UART_SetConfig+0xafe>
 80049b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2b07      	cmp	r3, #7
 80049ba:	d01a      	beq.n	80049f2 <UART_SetConfig+0xafa>
 80049bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d014      	beq.n	80049ee <UART_SetConfig+0xaf6>
 80049c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	2b09      	cmp	r3, #9
 80049ca:	d00e      	beq.n	80049ea <UART_SetConfig+0xaf2>
 80049cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	2b0a      	cmp	r3, #10
 80049d2:	d008      	beq.n	80049e6 <UART_SetConfig+0xaee>
 80049d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	2b0b      	cmp	r3, #11
 80049da:	d102      	bne.n	80049e2 <UART_SetConfig+0xaea>
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	e016      	b.n	8004a10 <UART_SetConfig+0xb18>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e014      	b.n	8004a10 <UART_SetConfig+0xb18>
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	e012      	b.n	8004a10 <UART_SetConfig+0xb18>
 80049ea:	2340      	movs	r3, #64	; 0x40
 80049ec:	e010      	b.n	8004a10 <UART_SetConfig+0xb18>
 80049ee:	2320      	movs	r3, #32
 80049f0:	e00e      	b.n	8004a10 <UART_SetConfig+0xb18>
 80049f2:	2310      	movs	r3, #16
 80049f4:	e00c      	b.n	8004a10 <UART_SetConfig+0xb18>
 80049f6:	230c      	movs	r3, #12
 80049f8:	e00a      	b.n	8004a10 <UART_SetConfig+0xb18>
 80049fa:	230a      	movs	r3, #10
 80049fc:	e008      	b.n	8004a10 <UART_SetConfig+0xb18>
 80049fe:	2308      	movs	r3, #8
 8004a00:	e006      	b.n	8004a10 <UART_SetConfig+0xb18>
 8004a02:	2306      	movs	r3, #6
 8004a04:	e004      	b.n	8004a10 <UART_SetConfig+0xb18>
 8004a06:	2304      	movs	r3, #4
 8004a08:	e002      	b.n	8004a10 <UART_SetConfig+0xb18>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e000      	b.n	8004a10 <UART_SetConfig+0xb18>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	0019      	movs	r1, r3
 8004a12:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004a14:	f7fb fb76 	bl	8000104 <__udivsi3>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	005a      	lsls	r2, r3, #1
 8004a1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	18d2      	adds	r2, r2, r3
 8004a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	0019      	movs	r1, r3
 8004a2a:	0010      	movs	r0, r2
 8004a2c:	f7fb fb6a 	bl	8000104 <__udivsi3>
 8004a30:	0003      	movs	r3, r0
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004a36:	e121      	b.n	8004c7c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d043      	beq.n	8004ac8 <UART_SetConfig+0xbd0>
 8004a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d03d      	beq.n	8004ac4 <UART_SetConfig+0xbcc>
 8004a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d037      	beq.n	8004ac0 <UART_SetConfig+0xbc8>
 8004a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d031      	beq.n	8004abc <UART_SetConfig+0xbc4>
 8004a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d02b      	beq.n	8004ab8 <UART_SetConfig+0xbc0>
 8004a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d025      	beq.n	8004ab4 <UART_SetConfig+0xbbc>
 8004a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d01f      	beq.n	8004ab0 <UART_SetConfig+0xbb8>
 8004a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	2b07      	cmp	r3, #7
 8004a76:	d019      	beq.n	8004aac <UART_SetConfig+0xbb4>
 8004a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d013      	beq.n	8004aa8 <UART_SetConfig+0xbb0>
 8004a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2b09      	cmp	r3, #9
 8004a86:	d00d      	beq.n	8004aa4 <UART_SetConfig+0xbac>
 8004a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2b0a      	cmp	r3, #10
 8004a8e:	d007      	beq.n	8004aa0 <UART_SetConfig+0xba8>
 8004a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b0b      	cmp	r3, #11
 8004a96:	d101      	bne.n	8004a9c <UART_SetConfig+0xba4>
 8004a98:	4bba      	ldr	r3, [pc, #744]	; (8004d84 <UART_SetConfig+0xe8c>)
 8004a9a:	e016      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004a9c:	4bba      	ldr	r3, [pc, #744]	; (8004d88 <UART_SetConfig+0xe90>)
 8004a9e:	e014      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004aa0:	4bba      	ldr	r3, [pc, #744]	; (8004d8c <UART_SetConfig+0xe94>)
 8004aa2:	e012      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004aa4:	4bba      	ldr	r3, [pc, #744]	; (8004d90 <UART_SetConfig+0xe98>)
 8004aa6:	e010      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004aa8:	4bba      	ldr	r3, [pc, #744]	; (8004d94 <UART_SetConfig+0xe9c>)
 8004aaa:	e00e      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004aac:	4bba      	ldr	r3, [pc, #744]	; (8004d98 <UART_SetConfig+0xea0>)
 8004aae:	e00c      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004ab0:	4bba      	ldr	r3, [pc, #744]	; (8004d9c <UART_SetConfig+0xea4>)
 8004ab2:	e00a      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004ab4:	4bba      	ldr	r3, [pc, #744]	; (8004da0 <UART_SetConfig+0xea8>)
 8004ab6:	e008      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004ab8:	4bba      	ldr	r3, [pc, #744]	; (8004da4 <UART_SetConfig+0xeac>)
 8004aba:	e006      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004abc:	4bba      	ldr	r3, [pc, #744]	; (8004da8 <UART_SetConfig+0xeb0>)
 8004abe:	e004      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004ac0:	4bba      	ldr	r3, [pc, #744]	; (8004dac <UART_SetConfig+0xeb4>)
 8004ac2:	e002      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004ac4:	4bba      	ldr	r3, [pc, #744]	; (8004db0 <UART_SetConfig+0xeb8>)
 8004ac6:	e000      	b.n	8004aca <UART_SetConfig+0xbd2>
 8004ac8:	4baf      	ldr	r3, [pc, #700]	; (8004d88 <UART_SetConfig+0xe90>)
 8004aca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004acc:	6852      	ldr	r2, [r2, #4]
 8004ace:	0852      	lsrs	r2, r2, #1
 8004ad0:	189a      	adds	r2, r3, r2
 8004ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	0010      	movs	r0, r2
 8004ada:	f7fb fb13 	bl	8000104 <__udivsi3>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004ae4:	e0ca      	b.n	8004c7c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae6:	f7fe f903 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8004aea:	0003      	movs	r3, r0
 8004aec:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d044      	beq.n	8004b80 <UART_SetConfig+0xc88>
 8004af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d03e      	beq.n	8004b7c <UART_SetConfig+0xc84>
 8004afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d038      	beq.n	8004b78 <UART_SetConfig+0xc80>
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d032      	beq.n	8004b74 <UART_SetConfig+0xc7c>
 8004b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d02c      	beq.n	8004b70 <UART_SetConfig+0xc78>
 8004b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d026      	beq.n	8004b6c <UART_SetConfig+0xc74>
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d020      	beq.n	8004b68 <UART_SetConfig+0xc70>
 8004b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	2b07      	cmp	r3, #7
 8004b2c:	d01a      	beq.n	8004b64 <UART_SetConfig+0xc6c>
 8004b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d014      	beq.n	8004b60 <UART_SetConfig+0xc68>
 8004b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	2b09      	cmp	r3, #9
 8004b3c:	d00e      	beq.n	8004b5c <UART_SetConfig+0xc64>
 8004b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	2b0a      	cmp	r3, #10
 8004b44:	d008      	beq.n	8004b58 <UART_SetConfig+0xc60>
 8004b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	2b0b      	cmp	r3, #11
 8004b4c:	d102      	bne.n	8004b54 <UART_SetConfig+0xc5c>
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	e016      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e014      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	e012      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b5c:	2340      	movs	r3, #64	; 0x40
 8004b5e:	e010      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b60:	2320      	movs	r3, #32
 8004b62:	e00e      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b64:	2310      	movs	r3, #16
 8004b66:	e00c      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b68:	230c      	movs	r3, #12
 8004b6a:	e00a      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b6c:	230a      	movs	r3, #10
 8004b6e:	e008      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b70:	2308      	movs	r3, #8
 8004b72:	e006      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b74:	2306      	movs	r3, #6
 8004b76:	e004      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	e002      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e000      	b.n	8004b82 <UART_SetConfig+0xc8a>
 8004b80:	2301      	movs	r3, #1
 8004b82:	0019      	movs	r1, r3
 8004b84:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004b86:	f7fb fabd 	bl	8000104 <__udivsi3>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	005a      	lsls	r2, r3, #1
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	18d2      	adds	r2, r2, r3
 8004b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	0010      	movs	r0, r2
 8004b9e:	f7fb fab1 	bl	8000104 <__udivsi3>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004ba8:	e068      	b.n	8004c7c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d04c      	beq.n	8004c4c <UART_SetConfig+0xd54>
 8004bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d045      	beq.n	8004c46 <UART_SetConfig+0xd4e>
 8004bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d03e      	beq.n	8004c40 <UART_SetConfig+0xd48>
 8004bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d038      	beq.n	8004c3c <UART_SetConfig+0xd44>
 8004bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d031      	beq.n	8004c36 <UART_SetConfig+0xd3e>
 8004bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d02b      	beq.n	8004c32 <UART_SetConfig+0xd3a>
 8004bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d025      	beq.n	8004c2e <UART_SetConfig+0xd36>
 8004be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	2b07      	cmp	r3, #7
 8004be8:	d01e      	beq.n	8004c28 <UART_SetConfig+0xd30>
 8004bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d017      	beq.n	8004c22 <UART_SetConfig+0xd2a>
 8004bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b09      	cmp	r3, #9
 8004bf8:	d010      	beq.n	8004c1c <UART_SetConfig+0xd24>
 8004bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	2b0a      	cmp	r3, #10
 8004c00:	d009      	beq.n	8004c16 <UART_SetConfig+0xd1e>
 8004c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b0b      	cmp	r3, #11
 8004c08:	d102      	bne.n	8004c10 <UART_SetConfig+0xd18>
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	e01f      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	025b      	lsls	r3, r3, #9
 8004c14:	e01c      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c16:	2380      	movs	r3, #128	; 0x80
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	e019      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	e016      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	e013      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	015b      	lsls	r3, r3, #5
 8004c2c:	e010      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c2e:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <UART_SetConfig+0xebc>)
 8004c30:	e00e      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c32:	4b61      	ldr	r3, [pc, #388]	; (8004db8 <UART_SetConfig+0xec0>)
 8004c34:	e00c      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	e009      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c3c:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <UART_SetConfig+0xec4>)
 8004c3e:	e007      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	01db      	lsls	r3, r3, #7
 8004c44:	e004      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	e001      	b.n	8004c50 <UART_SetConfig+0xd58>
 8004c4c:	2380      	movs	r3, #128	; 0x80
 8004c4e:	025b      	lsls	r3, r3, #9
 8004c50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c52:	6852      	ldr	r2, [r2, #4]
 8004c54:	0852      	lsrs	r2, r2, #1
 8004c56:	189a      	adds	r2, r3, r2
 8004c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	0010      	movs	r0, r2
 8004c60:	f7fb fa50 	bl	8000104 <__udivsi3>
 8004c64:	0003      	movs	r3, r0
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004c6a:	e007      	b.n	8004c7c <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 8004c6c:	231b      	movs	r3, #27
 8004c6e:	2258      	movs	r2, #88	; 0x58
 8004c70:	4694      	mov	ip, r2
 8004c72:	44bc      	add	ip, r7
 8004c74:	4463      	add	r3, ip
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
        break;
 8004c7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7e:	2b0f      	cmp	r3, #15
 8004c80:	d920      	bls.n	8004cc4 <UART_SetConfig+0xdcc>
 8004c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c84:	4a4e      	ldr	r2, [pc, #312]	; (8004dc0 <UART_SetConfig+0xec8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d81c      	bhi.n	8004cc4 <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	200e      	movs	r0, #14
 8004c90:	2458      	movs	r4, #88	; 0x58
 8004c92:	193b      	adds	r3, r7, r4
 8004c94:	181b      	adds	r3, r3, r0
 8004c96:	210f      	movs	r1, #15
 8004c98:	438a      	bics	r2, r1
 8004c9a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2207      	movs	r2, #7
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b299      	uxth	r1, r3
 8004ca8:	193b      	adds	r3, r7, r4
 8004caa:	181b      	adds	r3, r3, r0
 8004cac:	193a      	adds	r2, r7, r4
 8004cae:	1812      	adds	r2, r2, r0
 8004cb0:	8812      	ldrh	r2, [r2, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	193a      	adds	r2, r7, r4
 8004cbc:	1812      	adds	r2, r2, r0
 8004cbe:	8812      	ldrh	r2, [r2, #0]
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	e1d4      	b.n	800506e <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8004cc4:	231b      	movs	r3, #27
 8004cc6:	2258      	movs	r2, #88	; 0x58
 8004cc8:	4694      	mov	ip, r2
 8004cca:	44bc      	add	ip, r7
 8004ccc:	4463      	add	r3, ip
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e1cc      	b.n	800506e <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 8004cd4:	2323      	movs	r3, #35	; 0x23
 8004cd6:	2258      	movs	r2, #88	; 0x58
 8004cd8:	4694      	mov	ip, r2
 8004cda:	44bc      	add	ip, r7
 8004cdc:	4463      	add	r3, ip
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d100      	bne.n	8004ce6 <UART_SetConfig+0xdee>
 8004ce4:	e08f      	b.n	8004e06 <UART_SetConfig+0xf0e>
 8004ce6:	dc02      	bgt.n	8004cee <UART_SetConfig+0xdf6>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <UART_SetConfig+0xe04>
 8004cec:	e1a4      	b.n	8005038 <UART_SetConfig+0x1140>
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d100      	bne.n	8004cf4 <UART_SetConfig+0xdfc>
 8004cf2:	e0df      	b.n	8004eb4 <UART_SetConfig+0xfbc>
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d100      	bne.n	8004cfa <UART_SetConfig+0xe02>
 8004cf8:	e13e      	b.n	8004f78 <UART_SetConfig+0x1080>
 8004cfa:	e19d      	b.n	8005038 <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfc:	f7fe f884 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8004d00:	0003      	movs	r3, r0
 8004d02:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d100      	bne.n	8004d0e <UART_SetConfig+0xe16>
 8004d0c:	e066      	b.n	8004ddc <UART_SetConfig+0xee4>
 8004d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d100      	bne.n	8004d18 <UART_SetConfig+0xe20>
 8004d16:	e05f      	b.n	8004dd8 <UART_SetConfig+0xee0>
 8004d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d059      	beq.n	8004dd4 <UART_SetConfig+0xedc>
 8004d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d053      	beq.n	8004dd0 <UART_SetConfig+0xed8>
 8004d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d04d      	beq.n	8004dcc <UART_SetConfig+0xed4>
 8004d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d047      	beq.n	8004dc8 <UART_SetConfig+0xed0>
 8004d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	2b06      	cmp	r3, #6
 8004d3e:	d041      	beq.n	8004dc4 <UART_SetConfig+0xecc>
 8004d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b07      	cmp	r3, #7
 8004d46:	d01a      	beq.n	8004d7e <UART_SetConfig+0xe86>
 8004d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d014      	beq.n	8004d7a <UART_SetConfig+0xe82>
 8004d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b09      	cmp	r3, #9
 8004d56:	d00e      	beq.n	8004d76 <UART_SetConfig+0xe7e>
 8004d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b0a      	cmp	r3, #10
 8004d5e:	d008      	beq.n	8004d72 <UART_SetConfig+0xe7a>
 8004d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2b0b      	cmp	r3, #11
 8004d66:	d102      	bne.n	8004d6e <UART_SetConfig+0xe76>
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	e037      	b.n	8004dde <UART_SetConfig+0xee6>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e035      	b.n	8004dde <UART_SetConfig+0xee6>
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	e033      	b.n	8004dde <UART_SetConfig+0xee6>
 8004d76:	2340      	movs	r3, #64	; 0x40
 8004d78:	e031      	b.n	8004dde <UART_SetConfig+0xee6>
 8004d7a:	2320      	movs	r3, #32
 8004d7c:	e02f      	b.n	8004dde <UART_SetConfig+0xee6>
 8004d7e:	2310      	movs	r3, #16
 8004d80:	e02d      	b.n	8004dde <UART_SetConfig+0xee6>
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	0001e848 	.word	0x0001e848
 8004d88:	01e84800 	.word	0x01e84800
 8004d8c:	0003d090 	.word	0x0003d090
 8004d90:	0007a120 	.word	0x0007a120
 8004d94:	000f4240 	.word	0x000f4240
 8004d98:	001e8480 	.word	0x001e8480
 8004d9c:	0028b0aa 	.word	0x0028b0aa
 8004da0:	0030d400 	.word	0x0030d400
 8004da4:	003d0900 	.word	0x003d0900
 8004da8:	00516154 	.word	0x00516154
 8004dac:	007a1200 	.word	0x007a1200
 8004db0:	00f42400 	.word	0x00f42400
 8004db4:	00001554 	.word	0x00001554
 8004db8:	00001998 	.word	0x00001998
 8004dbc:	00002aaa 	.word	0x00002aaa
 8004dc0:	0000ffff 	.word	0x0000ffff
 8004dc4:	230c      	movs	r3, #12
 8004dc6:	e00a      	b.n	8004dde <UART_SetConfig+0xee6>
 8004dc8:	230a      	movs	r3, #10
 8004dca:	e008      	b.n	8004dde <UART_SetConfig+0xee6>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	e006      	b.n	8004dde <UART_SetConfig+0xee6>
 8004dd0:	2306      	movs	r3, #6
 8004dd2:	e004      	b.n	8004dde <UART_SetConfig+0xee6>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	e002      	b.n	8004dde <UART_SetConfig+0xee6>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e000      	b.n	8004dde <UART_SetConfig+0xee6>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	0019      	movs	r1, r3
 8004de0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004de2:	f7fb f98f 	bl	8000104 <__udivsi3>
 8004de6:	0003      	movs	r3, r0
 8004de8:	001a      	movs	r2, r3
 8004dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	18d2      	adds	r2, r2, r3
 8004df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	0019      	movs	r1, r3
 8004df8:	0010      	movs	r0, r2
 8004dfa:	f7fb f983 	bl	8000104 <__udivsi3>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004e04:	e120      	b.n	8005048 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d043      	beq.n	8004e96 <UART_SetConfig+0xf9e>
 8004e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d03d      	beq.n	8004e92 <UART_SetConfig+0xf9a>
 8004e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d037      	beq.n	8004e8e <UART_SetConfig+0xf96>
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d031      	beq.n	8004e8a <UART_SetConfig+0xf92>
 8004e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d02b      	beq.n	8004e86 <UART_SetConfig+0xf8e>
 8004e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	d025      	beq.n	8004e82 <UART_SetConfig+0xf8a>
 8004e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d01f      	beq.n	8004e7e <UART_SetConfig+0xf86>
 8004e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b07      	cmp	r3, #7
 8004e44:	d019      	beq.n	8004e7a <UART_SetConfig+0xf82>
 8004e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d013      	beq.n	8004e76 <UART_SetConfig+0xf7e>
 8004e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b09      	cmp	r3, #9
 8004e54:	d00d      	beq.n	8004e72 <UART_SetConfig+0xf7a>
 8004e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b0a      	cmp	r3, #10
 8004e5c:	d007      	beq.n	8004e6e <UART_SetConfig+0xf76>
 8004e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b0b      	cmp	r3, #11
 8004e64:	d101      	bne.n	8004e6a <UART_SetConfig+0xf72>
 8004e66:	4b8e      	ldr	r3, [pc, #568]	; (80050a0 <UART_SetConfig+0x11a8>)
 8004e68:	e016      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e6a:	4b8e      	ldr	r3, [pc, #568]	; (80050a4 <UART_SetConfig+0x11ac>)
 8004e6c:	e014      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e6e:	4b8e      	ldr	r3, [pc, #568]	; (80050a8 <UART_SetConfig+0x11b0>)
 8004e70:	e012      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e72:	4b8e      	ldr	r3, [pc, #568]	; (80050ac <UART_SetConfig+0x11b4>)
 8004e74:	e010      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e76:	4b8e      	ldr	r3, [pc, #568]	; (80050b0 <UART_SetConfig+0x11b8>)
 8004e78:	e00e      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e7a:	4b8e      	ldr	r3, [pc, #568]	; (80050b4 <UART_SetConfig+0x11bc>)
 8004e7c:	e00c      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e7e:	4b8e      	ldr	r3, [pc, #568]	; (80050b8 <UART_SetConfig+0x11c0>)
 8004e80:	e00a      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e82:	4b8e      	ldr	r3, [pc, #568]	; (80050bc <UART_SetConfig+0x11c4>)
 8004e84:	e008      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e86:	4b8e      	ldr	r3, [pc, #568]	; (80050c0 <UART_SetConfig+0x11c8>)
 8004e88:	e006      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e8a:	4b8e      	ldr	r3, [pc, #568]	; (80050c4 <UART_SetConfig+0x11cc>)
 8004e8c:	e004      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e8e:	4b8e      	ldr	r3, [pc, #568]	; (80050c8 <UART_SetConfig+0x11d0>)
 8004e90:	e002      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e92:	4b8e      	ldr	r3, [pc, #568]	; (80050cc <UART_SetConfig+0x11d4>)
 8004e94:	e000      	b.n	8004e98 <UART_SetConfig+0xfa0>
 8004e96:	4b83      	ldr	r3, [pc, #524]	; (80050a4 <UART_SetConfig+0x11ac>)
 8004e98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e9a:	6852      	ldr	r2, [r2, #4]
 8004e9c:	0852      	lsrs	r2, r2, #1
 8004e9e:	189a      	adds	r2, r3, r2
 8004ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	0010      	movs	r0, r2
 8004ea8:	f7fb f92c 	bl	8000104 <__udivsi3>
 8004eac:	0003      	movs	r3, r0
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004eb2:	e0c9      	b.n	8005048 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb4:	f7fd ff1c 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d044      	beq.n	8004f4e <UART_SetConfig+0x1056>
 8004ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d03e      	beq.n	8004f4a <UART_SetConfig+0x1052>
 8004ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d038      	beq.n	8004f46 <UART_SetConfig+0x104e>
 8004ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d032      	beq.n	8004f42 <UART_SetConfig+0x104a>
 8004edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d02c      	beq.n	8004f3e <UART_SetConfig+0x1046>
 8004ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2b05      	cmp	r3, #5
 8004eea:	d026      	beq.n	8004f3a <UART_SetConfig+0x1042>
 8004eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d020      	beq.n	8004f36 <UART_SetConfig+0x103e>
 8004ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b07      	cmp	r3, #7
 8004efa:	d01a      	beq.n	8004f32 <UART_SetConfig+0x103a>
 8004efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d014      	beq.n	8004f2e <UART_SetConfig+0x1036>
 8004f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	d00e      	beq.n	8004f2a <UART_SetConfig+0x1032>
 8004f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b0a      	cmp	r3, #10
 8004f12:	d008      	beq.n	8004f26 <UART_SetConfig+0x102e>
 8004f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2b0b      	cmp	r3, #11
 8004f1a:	d102      	bne.n	8004f22 <UART_SetConfig+0x102a>
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	e016      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e014      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	e012      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f2a:	2340      	movs	r3, #64	; 0x40
 8004f2c:	e010      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f2e:	2320      	movs	r3, #32
 8004f30:	e00e      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f32:	2310      	movs	r3, #16
 8004f34:	e00c      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f36:	230c      	movs	r3, #12
 8004f38:	e00a      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	e008      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	e006      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f42:	2306      	movs	r3, #6
 8004f44:	e004      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f46:	2304      	movs	r3, #4
 8004f48:	e002      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e000      	b.n	8004f50 <UART_SetConfig+0x1058>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	0019      	movs	r1, r3
 8004f52:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004f54:	f7fb f8d6 	bl	8000104 <__udivsi3>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	001a      	movs	r2, r3
 8004f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	18d2      	adds	r2, r2, r3
 8004f64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0019      	movs	r1, r3
 8004f6a:	0010      	movs	r0, r2
 8004f6c:	f7fb f8ca 	bl	8000104 <__udivsi3>
 8004f70:	0003      	movs	r3, r0
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004f76:	e067      	b.n	8005048 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d04b      	beq.n	8005018 <UART_SetConfig+0x1120>
 8004f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d044      	beq.n	8005012 <UART_SetConfig+0x111a>
 8004f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d03d      	beq.n	800500c <UART_SetConfig+0x1114>
 8004f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d037      	beq.n	8005008 <UART_SetConfig+0x1110>
 8004f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d030      	beq.n	8005002 <UART_SetConfig+0x110a>
 8004fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d02a      	beq.n	8004ffe <UART_SetConfig+0x1106>
 8004fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2b06      	cmp	r3, #6
 8004fae:	d024      	beq.n	8004ffa <UART_SetConfig+0x1102>
 8004fb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2b07      	cmp	r3, #7
 8004fb6:	d01d      	beq.n	8004ff4 <UART_SetConfig+0x10fc>
 8004fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d016      	beq.n	8004fee <UART_SetConfig+0x10f6>
 8004fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d00f      	beq.n	8004fe8 <UART_SetConfig+0x10f0>
 8004fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2b0a      	cmp	r3, #10
 8004fce:	d008      	beq.n	8004fe2 <UART_SetConfig+0x10ea>
 8004fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b0b      	cmp	r3, #11
 8004fd6:	d101      	bne.n	8004fdc <UART_SetConfig+0x10e4>
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	e01f      	b.n	800501c <UART_SetConfig+0x1124>
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	e01c      	b.n	800501c <UART_SetConfig+0x1124>
 8004fe2:	2380      	movs	r3, #128	; 0x80
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	e019      	b.n	800501c <UART_SetConfig+0x1124>
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	e016      	b.n	800501c <UART_SetConfig+0x1124>
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	e013      	b.n	800501c <UART_SetConfig+0x1124>
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	e010      	b.n	800501c <UART_SetConfig+0x1124>
 8004ffa:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <UART_SetConfig+0x11d8>)
 8004ffc:	e00e      	b.n	800501c <UART_SetConfig+0x1124>
 8004ffe:	4b35      	ldr	r3, [pc, #212]	; (80050d4 <UART_SetConfig+0x11dc>)
 8005000:	e00c      	b.n	800501c <UART_SetConfig+0x1124>
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	015b      	lsls	r3, r3, #5
 8005006:	e009      	b.n	800501c <UART_SetConfig+0x1124>
 8005008:	4b33      	ldr	r3, [pc, #204]	; (80050d8 <UART_SetConfig+0x11e0>)
 800500a:	e007      	b.n	800501c <UART_SetConfig+0x1124>
 800500c:	2380      	movs	r3, #128	; 0x80
 800500e:	019b      	lsls	r3, r3, #6
 8005010:	e004      	b.n	800501c <UART_SetConfig+0x1124>
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	01db      	lsls	r3, r3, #7
 8005016:	e001      	b.n	800501c <UART_SetConfig+0x1124>
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800501e:	6852      	ldr	r2, [r2, #4]
 8005020:	0852      	lsrs	r2, r2, #1
 8005022:	189a      	adds	r2, r3, r2
 8005024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	0019      	movs	r1, r3
 800502a:	0010      	movs	r0, r2
 800502c:	f7fb f86a 	bl	8000104 <__udivsi3>
 8005030:	0003      	movs	r3, r0
 8005032:	b29b      	uxth	r3, r3
 8005034:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005036:	e007      	b.n	8005048 <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 8005038:	231b      	movs	r3, #27
 800503a:	2258      	movs	r2, #88	; 0x58
 800503c:	4694      	mov	ip, r2
 800503e:	44bc      	add	ip, r7
 8005040:	4463      	add	r3, ip
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
        break;
 8005046:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d908      	bls.n	8005060 <UART_SetConfig+0x1168>
 800504e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005050:	4a22      	ldr	r2, [pc, #136]	; (80050dc <UART_SetConfig+0x11e4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d804      	bhi.n	8005060 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 8005056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800505c:	60da      	str	r2, [r3, #12]
 800505e:	e006      	b.n	800506e <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8005060:	231b      	movs	r3, #27
 8005062:	2258      	movs	r2, #88	; 0x58
 8005064:	4694      	mov	ip, r2
 8005066:	44bc      	add	ip, r7
 8005068:	4463      	add	r3, ip
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800506e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005070:	226a      	movs	r2, #106	; 0x6a
 8005072:	2101      	movs	r1, #1
 8005074:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005076:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005078:	2268      	movs	r2, #104	; 0x68
 800507a:	2101      	movs	r1, #1
 800507c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800507e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005080:	2200      	movs	r2, #0
 8005082:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005086:	2200      	movs	r2, #0
 8005088:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800508a:	231b      	movs	r3, #27
 800508c:	2258      	movs	r2, #88	; 0x58
 800508e:	4694      	mov	ip, r2
 8005090:	44bc      	add	ip, r7
 8005092:	4463      	add	r3, ip
 8005094:	781b      	ldrb	r3, [r3, #0]
}
 8005096:	0018      	movs	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	b021      	add	sp, #132	; 0x84
 800509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	0000f424 	.word	0x0000f424
 80050a4:	00f42400 	.word	0x00f42400
 80050a8:	0001e848 	.word	0x0001e848
 80050ac:	0003d090 	.word	0x0003d090
 80050b0:	0007a120 	.word	0x0007a120
 80050b4:	000f4240 	.word	0x000f4240
 80050b8:	00145855 	.word	0x00145855
 80050bc:	00186a00 	.word	0x00186a00
 80050c0:	001e8480 	.word	0x001e8480
 80050c4:	0028b0aa 	.word	0x0028b0aa
 80050c8:	003d0900 	.word	0x003d0900
 80050cc:	007a1200 	.word	0x007a1200
 80050d0:	00000aaa 	.word	0x00000aaa
 80050d4:	00000ccc 	.word	0x00000ccc
 80050d8:	00001555 	.word	0x00001555
 80050dc:	0000ffff 	.word	0x0000ffff

080050e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	2201      	movs	r2, #1
 80050ee:	4013      	ands	r3, r2
 80050f0:	d00b      	beq.n	800510a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4a4a      	ldr	r2, [pc, #296]	; (8005224 <UART_AdvFeatureConfig+0x144>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	0019      	movs	r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	2202      	movs	r2, #2
 8005110:	4013      	ands	r3, r2
 8005112:	d00b      	beq.n	800512c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4a43      	ldr	r2, [pc, #268]	; (8005228 <UART_AdvFeatureConfig+0x148>)
 800511c:	4013      	ands	r3, r2
 800511e:	0019      	movs	r1, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	2204      	movs	r2, #4
 8005132:	4013      	ands	r3, r2
 8005134:	d00b      	beq.n	800514e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	4a3b      	ldr	r2, [pc, #236]	; (800522c <UART_AdvFeatureConfig+0x14c>)
 800513e:	4013      	ands	r3, r2
 8005140:	0019      	movs	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	2208      	movs	r2, #8
 8005154:	4013      	ands	r3, r2
 8005156:	d00b      	beq.n	8005170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4a34      	ldr	r2, [pc, #208]	; (8005230 <UART_AdvFeatureConfig+0x150>)
 8005160:	4013      	ands	r3, r2
 8005162:	0019      	movs	r1, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	2210      	movs	r2, #16
 8005176:	4013      	ands	r3, r2
 8005178:	d00b      	beq.n	8005192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4a2c      	ldr	r2, [pc, #176]	; (8005234 <UART_AdvFeatureConfig+0x154>)
 8005182:	4013      	ands	r3, r2
 8005184:	0019      	movs	r1, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	2220      	movs	r2, #32
 8005198:	4013      	ands	r3, r2
 800519a:	d00b      	beq.n	80051b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	4a25      	ldr	r2, [pc, #148]	; (8005238 <UART_AdvFeatureConfig+0x158>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	0019      	movs	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	2240      	movs	r2, #64	; 0x40
 80051ba:	4013      	ands	r3, r2
 80051bc:	d01d      	beq.n	80051fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	4a1d      	ldr	r2, [pc, #116]	; (800523c <UART_AdvFeatureConfig+0x15c>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	0019      	movs	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	035b      	lsls	r3, r3, #13
 80051de:	429a      	cmp	r2, r3
 80051e0:	d10b      	bne.n	80051fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a15      	ldr	r2, [pc, #84]	; (8005240 <UART_AdvFeatureConfig+0x160>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	0019      	movs	r1, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	4013      	ands	r3, r2
 8005202:	d00b      	beq.n	800521c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	4a0e      	ldr	r2, [pc, #56]	; (8005244 <UART_AdvFeatureConfig+0x164>)
 800520c:	4013      	ands	r3, r2
 800520e:	0019      	movs	r1, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	605a      	str	r2, [r3, #4]
  }
}
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	46bd      	mov	sp, r7
 8005220:	b002      	add	sp, #8
 8005222:	bd80      	pop	{r7, pc}
 8005224:	fffdffff 	.word	0xfffdffff
 8005228:	fffeffff 	.word	0xfffeffff
 800522c:	fffbffff 	.word	0xfffbffff
 8005230:	ffff7fff 	.word	0xffff7fff
 8005234:	ffffefff 	.word	0xffffefff
 8005238:	ffffdfff 	.word	0xffffdfff
 800523c:	ffefffff 	.word	0xffefffff
 8005240:	ff9fffff 	.word	0xff9fffff
 8005244:	fff7ffff 	.word	0xfff7ffff

08005248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2288      	movs	r2, #136	; 0x88
 8005254:	2100      	movs	r1, #0
 8005256:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005258:	f7fc fb88 	bl	800196c <HAL_GetTick>
 800525c:	0003      	movs	r3, r0
 800525e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2208      	movs	r2, #8
 8005268:	4013      	ands	r3, r2
 800526a:	2b08      	cmp	r3, #8
 800526c:	d10d      	bne.n	800528a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	0399      	lsls	r1, r3, #14
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <UART_CheckIdleState+0x90>)
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	0013      	movs	r3, r2
 800527c:	2200      	movs	r2, #0
 800527e:	f000 f82d 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 8005282:	1e03      	subs	r3, r0, #0
 8005284:	d001      	beq.n	800528a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e021      	b.n	80052ce <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2204      	movs	r2, #4
 8005292:	4013      	ands	r3, r2
 8005294:	2b04      	cmp	r3, #4
 8005296:	d10d      	bne.n	80052b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	03d9      	lsls	r1, r3, #15
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <UART_CheckIdleState+0x90>)
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	0013      	movs	r3, r2
 80052a6:	2200      	movs	r2, #0
 80052a8:	f000 f818 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 80052ac:	1e03      	subs	r3, r0, #0
 80052ae:	d001      	beq.n	80052b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e00c      	b.n	80052ce <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	2120      	movs	r1, #32
 80052ba:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2284      	movs	r2, #132	; 0x84
 80052c0:	2120      	movs	r1, #32
 80052c2:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	227c      	movs	r2, #124	; 0x7c
 80052c8:	2100      	movs	r1, #0
 80052ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b004      	add	sp, #16
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	01ffffff 	.word	0x01ffffff

080052dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	1dfb      	adds	r3, r7, #7
 80052ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ec:	e02b      	b.n	8005346 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	3301      	adds	r3, #1
 80052f2:	d028      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f4:	f7fc fb3a 	bl	800196c <HAL_GetTick>
 80052f8:	0002      	movs	r2, r0
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	429a      	cmp	r2, r3
 8005302:	d302      	bcc.n	800530a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d11d      	bne.n	8005346 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4916      	ldr	r1, [pc, #88]	; (8005370 <UART_WaitOnFlagUntilTimeout+0x94>)
 8005316:	400a      	ands	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2101      	movs	r1, #1
 8005326:	438a      	bics	r2, r1
 8005328:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2280      	movs	r2, #128	; 0x80
 800532e:	2120      	movs	r1, #32
 8005330:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2284      	movs	r2, #132	; 0x84
 8005336:	2120      	movs	r1, #32
 8005338:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	227c      	movs	r2, #124	; 0x7c
 800533e:	2100      	movs	r1, #0
 8005340:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e00f      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	4013      	ands	r3, r2
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	425a      	negs	r2, r3
 8005356:	4153      	adcs	r3, r2
 8005358:	b2db      	uxtb	r3, r3
 800535a:	001a      	movs	r2, r3
 800535c:	1dfb      	adds	r3, r7, #7
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d0c4      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	0018      	movs	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	b004      	add	sp, #16
 800536c:	bd80      	pop	{r7, pc}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	fffffe5f 	.word	0xfffffe5f

08005374 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	21c0      	movs	r1, #192	; 0xc0
 8005388:	438a      	bics	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4905      	ldr	r1, [pc, #20]	; (80053ac <UART_EndTxTransfer+0x38>)
 8005398:	400a      	ands	r2, r1
 800539a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	2120      	movs	r1, #32
 80053a2:	5099      	str	r1, [r3, r2]
}
 80053a4:	46c0      	nop			; (mov r8, r8)
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	ff7fffff 	.word	0xff7fffff

080053b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	490b      	ldr	r1, [pc, #44]	; (80053f0 <UART_EndRxTransfer+0x40>)
 80053c4:	400a      	ands	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689a      	ldr	r2, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4908      	ldr	r1, [pc, #32]	; (80053f4 <UART_EndRxTransfer+0x44>)
 80053d4:	400a      	ands	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2284      	movs	r2, #132	; 0x84
 80053dc:	2120      	movs	r1, #32
 80053de:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	46bd      	mov	sp, r7
 80053ea:	b002      	add	sp, #8
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	46c0      	nop			; (mov r8, r8)
 80053f0:	fffffedf 	.word	0xfffffedf
 80053f4:	effffffe 	.word	0xeffffffe

080053f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2220      	movs	r2, #32
 800540e:	4013      	ands	r3, r2
 8005410:	d114      	bne.n	800543c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2256      	movs	r2, #86	; 0x56
 8005416:	2100      	movs	r1, #0
 8005418:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2180      	movs	r1, #128	; 0x80
 8005426:	438a      	bics	r2, r1
 8005428:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2140      	movs	r1, #64	; 0x40
 8005436:	430a      	orrs	r2, r1
 8005438:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800543a:	e003      	b.n	8005444 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	0018      	movs	r0, r3
 8005440:	f7fe fd3a 	bl	8003eb8 <HAL_UART_TxCpltCallback>
}
 8005444:	46c0      	nop			; (mov r8, r8)
 8005446:	46bd      	mov	sp, r7
 8005448:	b004      	add	sp, #16
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	0018      	movs	r0, r3
 800545e:	f7fe fd33 	bl	8003ec8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2220      	movs	r2, #32
 8005482:	4013      	ands	r3, r2
 8005484:	d11f      	bne.n	80054c6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	225e      	movs	r2, #94	; 0x5e
 800548a:	2100      	movs	r1, #0
 800548c:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	490f      	ldr	r1, [pc, #60]	; (80054d8 <UART_DMAReceiveCplt+0x6c>)
 800549a:	400a      	ands	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2101      	movs	r1, #1
 80054aa:	438a      	bics	r2, r1
 80054ac:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2140      	movs	r1, #64	; 0x40
 80054ba:	438a      	bics	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2284      	movs	r2, #132	; 0x84
 80054c2:	2120      	movs	r1, #32
 80054c4:	5099      	str	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fb f92d 	bl	8000728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b004      	add	sp, #16
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	fffffeff 	.word	0xfffffeff

080054dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7fe fcf3 	bl	8003ed8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b004      	add	sp, #16
 80054f8:	bd80      	pop	{r7, pc}

080054fa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b086      	sub	sp, #24
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	589b      	ldr	r3, [r3, r2]
 800550e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2284      	movs	r2, #132	; 0x84
 8005514:	589b      	ldr	r3, [r3, r2]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2280      	movs	r2, #128	; 0x80
 8005520:	4013      	ands	r3, r2
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d10a      	bne.n	800553c <UART_DMAError+0x42>
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b21      	cmp	r3, #33	; 0x21
 800552a:	d107      	bne.n	800553c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2256      	movs	r2, #86	; 0x56
 8005530:	2100      	movs	r1, #0
 8005532:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	0018      	movs	r0, r3
 8005538:	f7ff ff1c 	bl	8005374 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2240      	movs	r2, #64	; 0x40
 8005544:	4013      	ands	r3, r2
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	d10a      	bne.n	8005560 <UART_DMAError+0x66>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b22      	cmp	r3, #34	; 0x22
 800554e:	d107      	bne.n	8005560 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	225e      	movs	r2, #94	; 0x5e
 8005554:	2100      	movs	r1, #0
 8005556:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	0018      	movs	r0, r3
 800555c:	f7ff ff28 	bl	80053b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2288      	movs	r2, #136	; 0x88
 8005564:	589b      	ldr	r3, [r3, r2]
 8005566:	2210      	movs	r2, #16
 8005568:	431a      	orrs	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2188      	movs	r1, #136	; 0x88
 800556e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	0018      	movs	r0, r3
 8005574:	f7fe fcb8 	bl	8003ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005578:	46c0      	nop			; (mov r8, r8)
 800557a:	46bd      	mov	sp, r7
 800557c:	b006      	add	sp, #24
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	225e      	movs	r2, #94	; 0x5e
 8005592:	2100      	movs	r1, #0
 8005594:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2256      	movs	r2, #86	; 0x56
 800559a:	2100      	movs	r1, #0
 800559c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fe fca1 	bl	8003ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b004      	add	sp, #16
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2140      	movs	r1, #64	; 0x40
 80055c2:	438a      	bics	r2, r1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2280      	movs	r2, #128	; 0x80
 80055ca:	2120      	movs	r1, #32
 80055cc:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	0018      	movs	r0, r3
 80055d8:	f7fe fc6e 	bl	8003eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055ec:	230e      	movs	r3, #14
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	2160      	movs	r1, #96	; 0x60
 80055f4:	5a52      	ldrh	r2, [r2, r1]
 80055f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2284      	movs	r2, #132	; 0x84
 80055fc:	589b      	ldr	r3, [r3, r2]
 80055fe:	2b22      	cmp	r3, #34	; 0x22
 8005600:	d141      	bne.n	8005686 <UART_RxISR_8BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005608:	210c      	movs	r1, #12
 800560a:	187b      	adds	r3, r7, r1
 800560c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800560e:	187b      	adds	r3, r7, r1
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	230e      	movs	r3, #14
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b2d9      	uxtb	r1, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	400a      	ands	r2, r1
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	225e      	movs	r2, #94	; 0x5e
 8005634:	5a9b      	ldrh	r3, [r3, r2]
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b299      	uxth	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	225e      	movs	r2, #94	; 0x5e
 8005640:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	225e      	movs	r2, #94	; 0x5e
 8005646:	5a9b      	ldrh	r3, [r3, r2]
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d123      	bne.n	8005696 <UART_RxISR_8BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4911      	ldr	r1, [pc, #68]	; (80056a0 <UART_RxISR_8BIT+0xbc>)
 800565a:	400a      	ands	r2, r1
 800565c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2101      	movs	r1, #1
 800566a:	438a      	bics	r2, r1
 800566c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2284      	movs	r2, #132	; 0x84
 8005672:	2120      	movs	r1, #32
 8005674:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f7fb f852 	bl	8000728 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005684:	e007      	b.n	8005696 <UART_RxISR_8BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2108      	movs	r1, #8
 8005692:	430a      	orrs	r2, r1
 8005694:	619a      	str	r2, [r3, #24]
}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	46bd      	mov	sp, r7
 800569a:	b004      	add	sp, #16
 800569c:	bd80      	pop	{r7, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	fffffedf 	.word	0xfffffedf

080056a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056ac:	230e      	movs	r3, #14
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	2160      	movs	r1, #96	; 0x60
 80056b4:	5a52      	ldrh	r2, [r2, r1]
 80056b6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2284      	movs	r2, #132	; 0x84
 80056bc:	589b      	ldr	r3, [r3, r2]
 80056be:	2b22      	cmp	r3, #34	; 0x22
 80056c0:	d141      	bne.n	8005746 <UART_RxISR_16BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056c8:	210c      	movs	r1, #12
 80056ca:	187b      	adds	r3, r7, r1
 80056cc:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	220e      	movs	r2, #14
 80056d8:	18ba      	adds	r2, r7, r2
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	8812      	ldrh	r2, [r2, #0]
 80056de:	4013      	ands	r3, r2
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	225e      	movs	r2, #94	; 0x5e
 80056f4:	5a9b      	ldrh	r3, [r3, r2]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b299      	uxth	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	225e      	movs	r2, #94	; 0x5e
 8005700:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	225e      	movs	r2, #94	; 0x5e
 8005706:	5a9b      	ldrh	r3, [r3, r2]
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d123      	bne.n	8005756 <UART_RxISR_16BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4911      	ldr	r1, [pc, #68]	; (8005760 <UART_RxISR_16BIT+0xbc>)
 800571a:	400a      	ands	r2, r1
 800571c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2101      	movs	r1, #1
 800572a:	438a      	bics	r2, r1
 800572c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2284      	movs	r2, #132	; 0x84
 8005732:	2120      	movs	r1, #32
 8005734:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	0018      	movs	r0, r3
 8005740:	f7fa fff2 	bl	8000728 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005744:	e007      	b.n	8005756 <UART_RxISR_16BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2108      	movs	r1, #8
 8005752:	430a      	orrs	r2, r1
 8005754:	619a      	str	r2, [r3, #24]
}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	46bd      	mov	sp, r7
 800575a:	b004      	add	sp, #16
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	fffffedf 	.word	0xfffffedf

08005764 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800576c:	230c      	movs	r3, #12
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	2160      	movs	r1, #96	; 0x60
 8005774:	5a52      	ldrh	r2, [r2, r1]
 8005776:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2284      	movs	r2, #132	; 0x84
 800577c:	589b      	ldr	r3, [r3, r2]
 800577e:	2b22      	cmp	r3, #34	; 0x22
 8005780:	d000      	beq.n	8005784 <UART_RxISR_8BIT_FIFOEN+0x20>
 8005782:	e078      	b.n	8005876 <UART_RxISR_8BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005784:	230e      	movs	r3, #14
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	2168      	movs	r1, #104	; 0x68
 800578c:	5a52      	ldrh	r2, [r2, r1]
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	e046      	b.n	8005820 <UART_RxISR_8BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005798:	2108      	movs	r1, #8
 800579a:	187b      	adds	r3, r7, r1
 800579c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800579e:	187b      	adds	r3, r7, r1
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	230c      	movs	r3, #12
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	b2d9      	uxtb	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	400a      	ands	r2, r1
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	225e      	movs	r2, #94	; 0x5e
 80057c4:	5a9b      	ldrh	r3, [r3, r2]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b299      	uxth	r1, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	225e      	movs	r2, #94	; 0x5e
 80057d0:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	225e      	movs	r2, #94	; 0x5e
 80057d6:	5a9b      	ldrh	r3, [r3, r2]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d11a      	bne.n	8005814 <UART_RxISR_8BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4929      	ldr	r1, [pc, #164]	; (8005890 <UART_RxISR_8BIT_FIFOEN+0x12c>)
 80057ea:	400a      	ands	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4926      	ldr	r1, [pc, #152]	; (8005894 <UART_RxISR_8BIT_FIFOEN+0x130>)
 80057fa:	400a      	ands	r2, r1
 80057fc:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2284      	movs	r2, #132	; 0x84
 8005802:	2120      	movs	r1, #32
 8005804:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	0018      	movs	r0, r3
 8005810:	f7fa ff8a 	bl	8000728 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005814:	210e      	movs	r1, #14
 8005816:	187b      	adds	r3, r7, r1
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	187b      	adds	r3, r7, r1
 800581c:	3a01      	subs	r2, #1
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	230e      	movs	r3, #14
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1b3      	bne.n	8005792 <UART_RxISR_8BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800582a:	200a      	movs	r0, #10
 800582c:	183b      	adds	r3, r7, r0
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	215e      	movs	r1, #94	; 0x5e
 8005832:	5a52      	ldrh	r2, [r2, r1]
 8005834:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005836:	183b      	adds	r3, r7, r0
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d023      	beq.n	8005886 <UART_RxISR_8BIT_FIFOEN+0x122>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2268      	movs	r2, #104	; 0x68
 8005842:	5a9b      	ldrh	r3, [r3, r2]
 8005844:	220a      	movs	r2, #10
 8005846:	18ba      	adds	r2, r7, r2
 8005848:	8812      	ldrh	r2, [r2, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d21b      	bcs.n	8005886 <UART_RxISR_8BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	490f      	ldr	r1, [pc, #60]	; (8005898 <UART_RxISR_8BIT_FIFOEN+0x134>)
 800585a:	400a      	ands	r2, r1
 800585c:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a0e      	ldr	r2, [pc, #56]	; (800589c <UART_RxISR_8BIT_FIFOEN+0x138>)
 8005862:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2120      	movs	r1, #32
 8005870:	430a      	orrs	r2, r1
 8005872:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005874:	e007      	b.n	8005886 <UART_RxISR_8BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2108      	movs	r1, #8
 8005882:	430a      	orrs	r2, r1
 8005884:	619a      	str	r2, [r3, #24]
}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b004      	add	sp, #16
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	fffffeff 	.word	0xfffffeff
 8005894:	effffffe 	.word	0xeffffffe
 8005898:	efffffff 	.word	0xefffffff
 800589c:	080055e5 	.word	0x080055e5

080058a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80058a8:	2314      	movs	r3, #20
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	2160      	movs	r1, #96	; 0x60
 80058b0:	5a52      	ldrh	r2, [r2, r1]
 80058b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2284      	movs	r2, #132	; 0x84
 80058b8:	589b      	ldr	r3, [r3, r2]
 80058ba:	2b22      	cmp	r3, #34	; 0x22
 80058bc:	d000      	beq.n	80058c0 <UART_RxISR_16BIT_FIFOEN+0x20>
 80058be:	e078      	b.n	80059b2 <UART_RxISR_16BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80058c0:	2316      	movs	r3, #22
 80058c2:	18fb      	adds	r3, r7, r3
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	2168      	movs	r1, #104	; 0x68
 80058c8:	5a52      	ldrh	r2, [r2, r1]
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e046      	b.n	800595c <UART_RxISR_16BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058d4:	2110      	movs	r1, #16
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80058e0:	187b      	adds	r3, r7, r1
 80058e2:	2214      	movs	r2, #20
 80058e4:	18ba      	adds	r2, r7, r2
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	8812      	ldrh	r2, [r2, #0]
 80058ea:	4013      	ands	r3, r2
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	1c9a      	adds	r2, r3, #2
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	225e      	movs	r2, #94	; 0x5e
 8005900:	5a9b      	ldrh	r3, [r3, r2]
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b299      	uxth	r1, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	225e      	movs	r2, #94	; 0x5e
 800590c:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	225e      	movs	r2, #94	; 0x5e
 8005912:	5a9b      	ldrh	r3, [r3, r2]
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d11a      	bne.n	8005950 <UART_RxISR_16BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4929      	ldr	r1, [pc, #164]	; (80059cc <UART_RxISR_16BIT_FIFOEN+0x12c>)
 8005926:	400a      	ands	r2, r1
 8005928:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4926      	ldr	r1, [pc, #152]	; (80059d0 <UART_RxISR_16BIT_FIFOEN+0x130>)
 8005936:	400a      	ands	r2, r1
 8005938:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2284      	movs	r2, #132	; 0x84
 800593e:	2120      	movs	r1, #32
 8005940:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	0018      	movs	r0, r3
 800594c:	f7fa feec 	bl	8000728 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005950:	2116      	movs	r1, #22
 8005952:	187b      	adds	r3, r7, r1
 8005954:	881a      	ldrh	r2, [r3, #0]
 8005956:	187b      	adds	r3, r7, r1
 8005958:	3a01      	subs	r2, #1
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	2316      	movs	r3, #22
 800595e:	18fb      	adds	r3, r7, r3
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1b3      	bne.n	80058ce <UART_RxISR_16BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005966:	2012      	movs	r0, #18
 8005968:	183b      	adds	r3, r7, r0
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	215e      	movs	r1, #94	; 0x5e
 800596e:	5a52      	ldrh	r2, [r2, r1]
 8005970:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005972:	183b      	adds	r3, r7, r0
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d023      	beq.n	80059c2 <UART_RxISR_16BIT_FIFOEN+0x122>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2268      	movs	r2, #104	; 0x68
 800597e:	5a9b      	ldrh	r3, [r3, r2]
 8005980:	2212      	movs	r2, #18
 8005982:	18ba      	adds	r2, r7, r2
 8005984:	8812      	ldrh	r2, [r2, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d21b      	bcs.n	80059c2 <UART_RxISR_16BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	490f      	ldr	r1, [pc, #60]	; (80059d4 <UART_RxISR_16BIT_FIFOEN+0x134>)
 8005996:	400a      	ands	r2, r1
 8005998:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a0e      	ldr	r2, [pc, #56]	; (80059d8 <UART_RxISR_16BIT_FIFOEN+0x138>)
 800599e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2120      	movs	r1, #32
 80059ac:	430a      	orrs	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059b0:	e007      	b.n	80059c2 <UART_RxISR_16BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2108      	movs	r1, #8
 80059be:	430a      	orrs	r2, r1
 80059c0:	619a      	str	r2, [r3, #24]
}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b006      	add	sp, #24
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	fffffeff 	.word	0xfffffeff
 80059d0:	effffffe 	.word	0xeffffffe
 80059d4:	efffffff 	.word	0xefffffff
 80059d8:	080056a5 	.word	0x080056a5

080059dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b002      	add	sp, #8
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b002      	add	sp, #8
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a04:	46c0      	nop			; (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b002      	add	sp, #8
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	227c      	movs	r2, #124	; 0x7c
 8005a18:	5c9b      	ldrb	r3, [r3, r2]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e027      	b.n	8005a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	227c      	movs	r2, #124	; 0x7c
 8005a26:	2101      	movs	r1, #1
 8005a28:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2280      	movs	r2, #128	; 0x80
 8005a2e:	2124      	movs	r1, #36	; 0x24
 8005a30:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2101      	movs	r1, #1
 8005a46:	438a      	bics	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a0b      	ldr	r2, [pc, #44]	; (8005a7c <HAL_UARTEx_DisableFifoMode+0x70>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2280      	movs	r2, #128	; 0x80
 8005a64:	2120      	movs	r1, #32
 8005a66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	227c      	movs	r2, #124	; 0x7c
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	0018      	movs	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b004      	add	sp, #16
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	dfffffff 	.word	0xdfffffff

08005a80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	227c      	movs	r2, #124	; 0x7c
 8005a8e:	5c9b      	ldrb	r3, [r3, r2]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e02e      	b.n	8005af6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	227c      	movs	r2, #124	; 0x7c
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	2124      	movs	r1, #36	; 0x24
 8005aa6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2101      	movs	r1, #1
 8005abc:	438a      	bics	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	08d9      	lsrs	r1, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f000 f854 	bl	8005b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	2120      	movs	r1, #32
 8005aea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	227c      	movs	r2, #124	; 0x7c
 8005af0:	2100      	movs	r1, #0
 8005af2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	0018      	movs	r0, r3
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b004      	add	sp, #16
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	227c      	movs	r2, #124	; 0x7c
 8005b0e:	5c9b      	ldrb	r3, [r3, r2]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e02f      	b.n	8005b78 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	227c      	movs	r2, #124	; 0x7c
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2280      	movs	r2, #128	; 0x80
 8005b24:	2124      	movs	r1, #36	; 0x24
 8005b26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	438a      	bics	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4a0e      	ldr	r2, [pc, #56]	; (8005b80 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f000 f813 	bl	8005b84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	2120      	movs	r1, #32
 8005b6c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	227c      	movs	r2, #124	; 0x7c
 8005b72:	2100      	movs	r1, #0
 8005b74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	0018      	movs	r0, r3
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b004      	add	sp, #16
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	f1ffffff 	.word	0xf1ffffff

08005b84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005b8c:	2314      	movs	r3, #20
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	4a2f      	ldr	r2, [pc, #188]	; (8005c50 <UARTEx_SetNbDataToProcess+0xcc>)
 8005b92:	ca03      	ldmia	r2!, {r0, r1}
 8005b94:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005b96:	230c      	movs	r3, #12
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	4a2e      	ldr	r2, [pc, #184]	; (8005c54 <UARTEx_SetNbDataToProcess+0xd0>)
 8005b9c:	ca03      	ldmia	r2!, {r0, r1}
 8005b9e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d108      	bne.n	8005bba <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	226a      	movs	r2, #106	; 0x6a
 8005bac:	2101      	movs	r1, #1
 8005bae:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2268      	movs	r2, #104	; 0x68
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bb8:	e046      	b.n	8005c48 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bba:	261f      	movs	r6, #31
 8005bbc:	19bb      	adds	r3, r7, r6
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bc2:	201e      	movs	r0, #30
 8005bc4:	183b      	adds	r3, r7, r0
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	0e5b      	lsrs	r3, r3, #25
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	241d      	movs	r4, #29
 8005bd6:	193b      	adds	r3, r7, r4
 8005bd8:	2107      	movs	r1, #7
 8005bda:	400a      	ands	r2, r1
 8005bdc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	0f5b      	lsrs	r3, r3, #29
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	251c      	movs	r5, #28
 8005bea:	197b      	adds	r3, r7, r5
 8005bec:	2107      	movs	r1, #7
 8005bee:	400a      	ands	r2, r1
 8005bf0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005bf2:	183b      	adds	r3, r7, r0
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	197a      	adds	r2, r7, r5
 8005bf8:	7812      	ldrb	r2, [r2, #0]
 8005bfa:	2114      	movs	r1, #20
 8005bfc:	1879      	adds	r1, r7, r1
 8005bfe:	5c8a      	ldrb	r2, [r1, r2]
 8005c00:	435a      	muls	r2, r3
 8005c02:	0010      	movs	r0, r2
 8005c04:	197b      	adds	r3, r7, r5
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	250c      	movs	r5, #12
 8005c0a:	197a      	adds	r2, r7, r5
 8005c0c:	5cd3      	ldrb	r3, [r2, r3]
 8005c0e:	0019      	movs	r1, r3
 8005c10:	f7fa fb02 	bl	8000218 <__divsi3>
 8005c14:	0003      	movs	r3, r0
 8005c16:	b299      	uxth	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	226a      	movs	r2, #106	; 0x6a
 8005c1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005c1e:	19bb      	adds	r3, r7, r6
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	193a      	adds	r2, r7, r4
 8005c24:	7812      	ldrb	r2, [r2, #0]
 8005c26:	2114      	movs	r1, #20
 8005c28:	1879      	adds	r1, r7, r1
 8005c2a:	5c8a      	ldrb	r2, [r1, r2]
 8005c2c:	435a      	muls	r2, r3
 8005c2e:	0010      	movs	r0, r2
 8005c30:	193b      	adds	r3, r7, r4
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	197a      	adds	r2, r7, r5
 8005c36:	5cd3      	ldrb	r3, [r2, r3]
 8005c38:	0019      	movs	r1, r3
 8005c3a:	f7fa faed 	bl	8000218 <__divsi3>
 8005c3e:	0003      	movs	r3, r0
 8005c40:	b299      	uxth	r1, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2268      	movs	r2, #104	; 0x68
 8005c46:	5299      	strh	r1, [r3, r2]
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b009      	add	sp, #36	; 0x24
 8005c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c50:	080065d8 	.word	0x080065d8
 8005c54:	080065e0 	.word	0x080065e0

08005c58 <__errno>:
 8005c58:	4b01      	ldr	r3, [pc, #4]	; (8005c60 <__errno+0x8>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	4770      	bx	lr
 8005c5e:	46c0      	nop			; (mov r8, r8)
 8005c60:	20000010 	.word	0x20000010

08005c64 <__libc_init_array>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	2600      	movs	r6, #0
 8005c68:	4d0c      	ldr	r5, [pc, #48]	; (8005c9c <__libc_init_array+0x38>)
 8005c6a:	4c0d      	ldr	r4, [pc, #52]	; (8005ca0 <__libc_init_array+0x3c>)
 8005c6c:	1b64      	subs	r4, r4, r5
 8005c6e:	10a4      	asrs	r4, r4, #2
 8005c70:	42a6      	cmp	r6, r4
 8005c72:	d109      	bne.n	8005c88 <__libc_init_array+0x24>
 8005c74:	2600      	movs	r6, #0
 8005c76:	f000 fc29 	bl	80064cc <_init>
 8005c7a:	4d0a      	ldr	r5, [pc, #40]	; (8005ca4 <__libc_init_array+0x40>)
 8005c7c:	4c0a      	ldr	r4, [pc, #40]	; (8005ca8 <__libc_init_array+0x44>)
 8005c7e:	1b64      	subs	r4, r4, r5
 8005c80:	10a4      	asrs	r4, r4, #2
 8005c82:	42a6      	cmp	r6, r4
 8005c84:	d105      	bne.n	8005c92 <__libc_init_array+0x2e>
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	00b3      	lsls	r3, r6, #2
 8005c8a:	58eb      	ldr	r3, [r5, r3]
 8005c8c:	4798      	blx	r3
 8005c8e:	3601      	adds	r6, #1
 8005c90:	e7ee      	b.n	8005c70 <__libc_init_array+0xc>
 8005c92:	00b3      	lsls	r3, r6, #2
 8005c94:	58eb      	ldr	r3, [r5, r3]
 8005c96:	4798      	blx	r3
 8005c98:	3601      	adds	r6, #1
 8005c9a:	e7f2      	b.n	8005c82 <__libc_init_array+0x1e>
 8005c9c:	08008cd8 	.word	0x08008cd8
 8005ca0:	08008cd8 	.word	0x08008cd8
 8005ca4:	08008cd8 	.word	0x08008cd8
 8005ca8:	08008cdc 	.word	0x08008cdc

08005cac <memcpy>:
 8005cac:	2300      	movs	r3, #0
 8005cae:	b510      	push	{r4, lr}
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d100      	bne.n	8005cb6 <memcpy+0xa>
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	5ccc      	ldrb	r4, [r1, r3]
 8005cb8:	54c4      	strb	r4, [r0, r3]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	e7f8      	b.n	8005cb0 <memcpy+0x4>

08005cbe <memset>:
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	1812      	adds	r2, r2, r0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d100      	bne.n	8005cc8 <memset+0xa>
 8005cc6:	4770      	bx	lr
 8005cc8:	7019      	strb	r1, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	e7f9      	b.n	8005cc2 <memset+0x4>
	...

08005cd0 <siprintf>:
 8005cd0:	b40e      	push	{r1, r2, r3}
 8005cd2:	b500      	push	{lr}
 8005cd4:	490b      	ldr	r1, [pc, #44]	; (8005d04 <siprintf+0x34>)
 8005cd6:	b09c      	sub	sp, #112	; 0x70
 8005cd8:	ab1d      	add	r3, sp, #116	; 0x74
 8005cda:	9002      	str	r0, [sp, #8]
 8005cdc:	9006      	str	r0, [sp, #24]
 8005cde:	9107      	str	r1, [sp, #28]
 8005ce0:	9104      	str	r1, [sp, #16]
 8005ce2:	4809      	ldr	r0, [pc, #36]	; (8005d08 <siprintf+0x38>)
 8005ce4:	4909      	ldr	r1, [pc, #36]	; (8005d0c <siprintf+0x3c>)
 8005ce6:	cb04      	ldmia	r3!, {r2}
 8005ce8:	9105      	str	r1, [sp, #20]
 8005cea:	6800      	ldr	r0, [r0, #0]
 8005cec:	a902      	add	r1, sp, #8
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	f000 f870 	bl	8005dd4 <_svfiprintf_r>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9a02      	ldr	r2, [sp, #8]
 8005cf8:	7013      	strb	r3, [r2, #0]
 8005cfa:	b01c      	add	sp, #112	; 0x70
 8005cfc:	bc08      	pop	{r3}
 8005cfe:	b003      	add	sp, #12
 8005d00:	4718      	bx	r3
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	7fffffff 	.word	0x7fffffff
 8005d08:	20000010 	.word	0x20000010
 8005d0c:	ffff0208 	.word	0xffff0208

08005d10 <__ssputs_r>:
 8005d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d12:	688e      	ldr	r6, [r1, #8]
 8005d14:	b085      	sub	sp, #20
 8005d16:	0007      	movs	r7, r0
 8005d18:	000c      	movs	r4, r1
 8005d1a:	9203      	str	r2, [sp, #12]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	429e      	cmp	r6, r3
 8005d20:	d83c      	bhi.n	8005d9c <__ssputs_r+0x8c>
 8005d22:	2390      	movs	r3, #144	; 0x90
 8005d24:	898a      	ldrh	r2, [r1, #12]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	421a      	tst	r2, r3
 8005d2a:	d034      	beq.n	8005d96 <__ssputs_r+0x86>
 8005d2c:	2503      	movs	r5, #3
 8005d2e:	6909      	ldr	r1, [r1, #16]
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	1a5b      	subs	r3, r3, r1
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	6963      	ldr	r3, [r4, #20]
 8005d38:	9802      	ldr	r0, [sp, #8]
 8005d3a:	435d      	muls	r5, r3
 8005d3c:	0feb      	lsrs	r3, r5, #31
 8005d3e:	195d      	adds	r5, r3, r5
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	106d      	asrs	r5, r5, #1
 8005d44:	3301      	adds	r3, #1
 8005d46:	181b      	adds	r3, r3, r0
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	d900      	bls.n	8005d4e <__ssputs_r+0x3e>
 8005d4c:	001d      	movs	r5, r3
 8005d4e:	0553      	lsls	r3, r2, #21
 8005d50:	d532      	bpl.n	8005db8 <__ssputs_r+0xa8>
 8005d52:	0029      	movs	r1, r5
 8005d54:	0038      	movs	r0, r7
 8005d56:	f000 fb19 	bl	800638c <_malloc_r>
 8005d5a:	1e06      	subs	r6, r0, #0
 8005d5c:	d109      	bne.n	8005d72 <__ssputs_r+0x62>
 8005d5e:	230c      	movs	r3, #12
 8005d60:	603b      	str	r3, [r7, #0]
 8005d62:	2340      	movs	r3, #64	; 0x40
 8005d64:	2001      	movs	r0, #1
 8005d66:	89a2      	ldrh	r2, [r4, #12]
 8005d68:	4240      	negs	r0, r0
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	b005      	add	sp, #20
 8005d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d72:	9a02      	ldr	r2, [sp, #8]
 8005d74:	6921      	ldr	r1, [r4, #16]
 8005d76:	f7ff ff99 	bl	8005cac <memcpy>
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	4a14      	ldr	r2, [pc, #80]	; (8005dd0 <__ssputs_r+0xc0>)
 8005d7e:	401a      	ands	r2, r3
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	4313      	orrs	r3, r2
 8005d84:	81a3      	strh	r3, [r4, #12]
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	6126      	str	r6, [r4, #16]
 8005d8a:	18f6      	adds	r6, r6, r3
 8005d8c:	6026      	str	r6, [r4, #0]
 8005d8e:	6165      	str	r5, [r4, #20]
 8005d90:	9e01      	ldr	r6, [sp, #4]
 8005d92:	1aed      	subs	r5, r5, r3
 8005d94:	60a5      	str	r5, [r4, #8]
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	429e      	cmp	r6, r3
 8005d9a:	d900      	bls.n	8005d9e <__ssputs_r+0x8e>
 8005d9c:	9e01      	ldr	r6, [sp, #4]
 8005d9e:	0032      	movs	r2, r6
 8005da0:	9903      	ldr	r1, [sp, #12]
 8005da2:	6820      	ldr	r0, [r4, #0]
 8005da4:	f000 fa95 	bl	80062d2 <memmove>
 8005da8:	68a3      	ldr	r3, [r4, #8]
 8005daa:	2000      	movs	r0, #0
 8005dac:	1b9b      	subs	r3, r3, r6
 8005dae:	60a3      	str	r3, [r4, #8]
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	199e      	adds	r6, r3, r6
 8005db4:	6026      	str	r6, [r4, #0]
 8005db6:	e7da      	b.n	8005d6e <__ssputs_r+0x5e>
 8005db8:	002a      	movs	r2, r5
 8005dba:	0038      	movs	r0, r7
 8005dbc:	f000 fb44 	bl	8006448 <_realloc_r>
 8005dc0:	1e06      	subs	r6, r0, #0
 8005dc2:	d1e0      	bne.n	8005d86 <__ssputs_r+0x76>
 8005dc4:	6921      	ldr	r1, [r4, #16]
 8005dc6:	0038      	movs	r0, r7
 8005dc8:	f000 fa96 	bl	80062f8 <_free_r>
 8005dcc:	e7c7      	b.n	8005d5e <__ssputs_r+0x4e>
 8005dce:	46c0      	nop			; (mov r8, r8)
 8005dd0:	fffffb7f 	.word	0xfffffb7f

08005dd4 <_svfiprintf_r>:
 8005dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd6:	b0a1      	sub	sp, #132	; 0x84
 8005dd8:	9003      	str	r0, [sp, #12]
 8005dda:	001d      	movs	r5, r3
 8005ddc:	898b      	ldrh	r3, [r1, #12]
 8005dde:	000f      	movs	r7, r1
 8005de0:	0016      	movs	r6, r2
 8005de2:	061b      	lsls	r3, r3, #24
 8005de4:	d511      	bpl.n	8005e0a <_svfiprintf_r+0x36>
 8005de6:	690b      	ldr	r3, [r1, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10e      	bne.n	8005e0a <_svfiprintf_r+0x36>
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	f000 facd 	bl	800638c <_malloc_r>
 8005df2:	6038      	str	r0, [r7, #0]
 8005df4:	6138      	str	r0, [r7, #16]
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d105      	bne.n	8005e06 <_svfiprintf_r+0x32>
 8005dfa:	230c      	movs	r3, #12
 8005dfc:	9a03      	ldr	r2, [sp, #12]
 8005dfe:	3801      	subs	r0, #1
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	b021      	add	sp, #132	; 0x84
 8005e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	ac08      	add	r4, sp, #32
 8005e0e:	6163      	str	r3, [r4, #20]
 8005e10:	3320      	adds	r3, #32
 8005e12:	7663      	strb	r3, [r4, #25]
 8005e14:	3310      	adds	r3, #16
 8005e16:	76a3      	strb	r3, [r4, #26]
 8005e18:	9507      	str	r5, [sp, #28]
 8005e1a:	0035      	movs	r5, r6
 8005e1c:	782b      	ldrb	r3, [r5, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <_svfiprintf_r+0x52>
 8005e22:	2b25      	cmp	r3, #37	; 0x25
 8005e24:	d146      	bne.n	8005eb4 <_svfiprintf_r+0xe0>
 8005e26:	1bab      	subs	r3, r5, r6
 8005e28:	9305      	str	r3, [sp, #20]
 8005e2a:	d00c      	beq.n	8005e46 <_svfiprintf_r+0x72>
 8005e2c:	0032      	movs	r2, r6
 8005e2e:	0039      	movs	r1, r7
 8005e30:	9803      	ldr	r0, [sp, #12]
 8005e32:	f7ff ff6d 	bl	8005d10 <__ssputs_r>
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	d100      	bne.n	8005e3c <_svfiprintf_r+0x68>
 8005e3a:	e0ae      	b.n	8005f9a <_svfiprintf_r+0x1c6>
 8005e3c:	6962      	ldr	r2, [r4, #20]
 8005e3e:	9b05      	ldr	r3, [sp, #20]
 8005e40:	4694      	mov	ip, r2
 8005e42:	4463      	add	r3, ip
 8005e44:	6163      	str	r3, [r4, #20]
 8005e46:	782b      	ldrb	r3, [r5, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d100      	bne.n	8005e4e <_svfiprintf_r+0x7a>
 8005e4c:	e0a5      	b.n	8005f9a <_svfiprintf_r+0x1c6>
 8005e4e:	2201      	movs	r2, #1
 8005e50:	2300      	movs	r3, #0
 8005e52:	4252      	negs	r2, r2
 8005e54:	6062      	str	r2, [r4, #4]
 8005e56:	a904      	add	r1, sp, #16
 8005e58:	3254      	adds	r2, #84	; 0x54
 8005e5a:	1852      	adds	r2, r2, r1
 8005e5c:	1c6e      	adds	r6, r5, #1
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	60e3      	str	r3, [r4, #12]
 8005e62:	60a3      	str	r3, [r4, #8]
 8005e64:	7013      	strb	r3, [r2, #0]
 8005e66:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e68:	7831      	ldrb	r1, [r6, #0]
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	4853      	ldr	r0, [pc, #332]	; (8005fbc <_svfiprintf_r+0x1e8>)
 8005e6e:	f000 fa25 	bl	80062bc <memchr>
 8005e72:	1c75      	adds	r5, r6, #1
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d11f      	bne.n	8005eb8 <_svfiprintf_r+0xe4>
 8005e78:	6822      	ldr	r2, [r4, #0]
 8005e7a:	06d3      	lsls	r3, r2, #27
 8005e7c:	d504      	bpl.n	8005e88 <_svfiprintf_r+0xb4>
 8005e7e:	2353      	movs	r3, #83	; 0x53
 8005e80:	a904      	add	r1, sp, #16
 8005e82:	185b      	adds	r3, r3, r1
 8005e84:	2120      	movs	r1, #32
 8005e86:	7019      	strb	r1, [r3, #0]
 8005e88:	0713      	lsls	r3, r2, #28
 8005e8a:	d504      	bpl.n	8005e96 <_svfiprintf_r+0xc2>
 8005e8c:	2353      	movs	r3, #83	; 0x53
 8005e8e:	a904      	add	r1, sp, #16
 8005e90:	185b      	adds	r3, r3, r1
 8005e92:	212b      	movs	r1, #43	; 0x2b
 8005e94:	7019      	strb	r1, [r3, #0]
 8005e96:	7833      	ldrb	r3, [r6, #0]
 8005e98:	2b2a      	cmp	r3, #42	; 0x2a
 8005e9a:	d016      	beq.n	8005eca <_svfiprintf_r+0xf6>
 8005e9c:	0035      	movs	r5, r6
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	200a      	movs	r0, #10
 8005ea2:	68e3      	ldr	r3, [r4, #12]
 8005ea4:	782a      	ldrb	r2, [r5, #0]
 8005ea6:	1c6e      	adds	r6, r5, #1
 8005ea8:	3a30      	subs	r2, #48	; 0x30
 8005eaa:	2a09      	cmp	r2, #9
 8005eac:	d94e      	bls.n	8005f4c <_svfiprintf_r+0x178>
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	d018      	beq.n	8005ee4 <_svfiprintf_r+0x110>
 8005eb2:	e010      	b.n	8005ed6 <_svfiprintf_r+0x102>
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	e7b1      	b.n	8005e1c <_svfiprintf_r+0x48>
 8005eb8:	4b40      	ldr	r3, [pc, #256]	; (8005fbc <_svfiprintf_r+0x1e8>)
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	1ac0      	subs	r0, r0, r3
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4083      	lsls	r3, r0
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	002e      	movs	r6, r5
 8005ec8:	e7ce      	b.n	8005e68 <_svfiprintf_r+0x94>
 8005eca:	9b07      	ldr	r3, [sp, #28]
 8005ecc:	1d19      	adds	r1, r3, #4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	9107      	str	r1, [sp, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	db01      	blt.n	8005eda <_svfiprintf_r+0x106>
 8005ed6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ed8:	e004      	b.n	8005ee4 <_svfiprintf_r+0x110>
 8005eda:	425b      	negs	r3, r3
 8005edc:	60e3      	str	r3, [r4, #12]
 8005ede:	2302      	movs	r3, #2
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	782b      	ldrb	r3, [r5, #0]
 8005ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ee8:	d10a      	bne.n	8005f00 <_svfiprintf_r+0x12c>
 8005eea:	786b      	ldrb	r3, [r5, #1]
 8005eec:	2b2a      	cmp	r3, #42	; 0x2a
 8005eee:	d135      	bne.n	8005f5c <_svfiprintf_r+0x188>
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	3502      	adds	r5, #2
 8005ef4:	1d1a      	adds	r2, r3, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	9207      	str	r2, [sp, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	db2b      	blt.n	8005f56 <_svfiprintf_r+0x182>
 8005efe:	9309      	str	r3, [sp, #36]	; 0x24
 8005f00:	4e2f      	ldr	r6, [pc, #188]	; (8005fc0 <_svfiprintf_r+0x1ec>)
 8005f02:	7829      	ldrb	r1, [r5, #0]
 8005f04:	2203      	movs	r2, #3
 8005f06:	0030      	movs	r0, r6
 8005f08:	f000 f9d8 	bl	80062bc <memchr>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d006      	beq.n	8005f1e <_svfiprintf_r+0x14a>
 8005f10:	2340      	movs	r3, #64	; 0x40
 8005f12:	1b80      	subs	r0, r0, r6
 8005f14:	4083      	lsls	r3, r0
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	3501      	adds	r5, #1
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	7829      	ldrb	r1, [r5, #0]
 8005f20:	2206      	movs	r2, #6
 8005f22:	4828      	ldr	r0, [pc, #160]	; (8005fc4 <_svfiprintf_r+0x1f0>)
 8005f24:	1c6e      	adds	r6, r5, #1
 8005f26:	7621      	strb	r1, [r4, #24]
 8005f28:	f000 f9c8 	bl	80062bc <memchr>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d03c      	beq.n	8005faa <_svfiprintf_r+0x1d6>
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <_svfiprintf_r+0x1f4>)
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d125      	bne.n	8005f82 <_svfiprintf_r+0x1ae>
 8005f36:	2207      	movs	r2, #7
 8005f38:	9b07      	ldr	r3, [sp, #28]
 8005f3a:	3307      	adds	r3, #7
 8005f3c:	4393      	bics	r3, r2
 8005f3e:	3308      	adds	r3, #8
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	6963      	ldr	r3, [r4, #20]
 8005f44:	9a04      	ldr	r2, [sp, #16]
 8005f46:	189b      	adds	r3, r3, r2
 8005f48:	6163      	str	r3, [r4, #20]
 8005f4a:	e766      	b.n	8005e1a <_svfiprintf_r+0x46>
 8005f4c:	4343      	muls	r3, r0
 8005f4e:	2101      	movs	r1, #1
 8005f50:	189b      	adds	r3, r3, r2
 8005f52:	0035      	movs	r5, r6
 8005f54:	e7a6      	b.n	8005ea4 <_svfiprintf_r+0xd0>
 8005f56:	2301      	movs	r3, #1
 8005f58:	425b      	negs	r3, r3
 8005f5a:	e7d0      	b.n	8005efe <_svfiprintf_r+0x12a>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	200a      	movs	r0, #10
 8005f60:	001a      	movs	r2, r3
 8005f62:	3501      	adds	r5, #1
 8005f64:	6063      	str	r3, [r4, #4]
 8005f66:	7829      	ldrb	r1, [r5, #0]
 8005f68:	1c6e      	adds	r6, r5, #1
 8005f6a:	3930      	subs	r1, #48	; 0x30
 8005f6c:	2909      	cmp	r1, #9
 8005f6e:	d903      	bls.n	8005f78 <_svfiprintf_r+0x1a4>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0c5      	beq.n	8005f00 <_svfiprintf_r+0x12c>
 8005f74:	9209      	str	r2, [sp, #36]	; 0x24
 8005f76:	e7c3      	b.n	8005f00 <_svfiprintf_r+0x12c>
 8005f78:	4342      	muls	r2, r0
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	1852      	adds	r2, r2, r1
 8005f7e:	0035      	movs	r5, r6
 8005f80:	e7f1      	b.n	8005f66 <_svfiprintf_r+0x192>
 8005f82:	ab07      	add	r3, sp, #28
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	003a      	movs	r2, r7
 8005f88:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <_svfiprintf_r+0x1f8>)
 8005f8a:	0021      	movs	r1, r4
 8005f8c:	9803      	ldr	r0, [sp, #12]
 8005f8e:	e000      	b.n	8005f92 <_svfiprintf_r+0x1be>
 8005f90:	bf00      	nop
 8005f92:	9004      	str	r0, [sp, #16]
 8005f94:	9b04      	ldr	r3, [sp, #16]
 8005f96:	3301      	adds	r3, #1
 8005f98:	d1d3      	bne.n	8005f42 <_svfiprintf_r+0x16e>
 8005f9a:	89bb      	ldrh	r3, [r7, #12]
 8005f9c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005f9e:	065b      	lsls	r3, r3, #25
 8005fa0:	d400      	bmi.n	8005fa4 <_svfiprintf_r+0x1d0>
 8005fa2:	e72e      	b.n	8005e02 <_svfiprintf_r+0x2e>
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	4240      	negs	r0, r0
 8005fa8:	e72b      	b.n	8005e02 <_svfiprintf_r+0x2e>
 8005faa:	ab07      	add	r3, sp, #28
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	003a      	movs	r2, r7
 8005fb0:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <_svfiprintf_r+0x1f8>)
 8005fb2:	0021      	movs	r1, r4
 8005fb4:	9803      	ldr	r0, [sp, #12]
 8005fb6:	f000 f879 	bl	80060ac <_printf_i>
 8005fba:	e7ea      	b.n	8005f92 <_svfiprintf_r+0x1be>
 8005fbc:	08008c9c 	.word	0x08008c9c
 8005fc0:	08008ca2 	.word	0x08008ca2
 8005fc4:	08008ca6 	.word	0x08008ca6
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	08005d11 	.word	0x08005d11

08005fd0 <_printf_common>:
 8005fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fd2:	0015      	movs	r5, r2
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	688a      	ldr	r2, [r1, #8]
 8005fd8:	690b      	ldr	r3, [r1, #16]
 8005fda:	9000      	str	r0, [sp, #0]
 8005fdc:	000c      	movs	r4, r1
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	da00      	bge.n	8005fe4 <_printf_common+0x14>
 8005fe2:	0013      	movs	r3, r2
 8005fe4:	0022      	movs	r2, r4
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	3243      	adds	r2, #67	; 0x43
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	2a00      	cmp	r2, #0
 8005fee:	d001      	beq.n	8005ff4 <_printf_common+0x24>
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	6823      	ldr	r3, [r4, #0]
 8005ff6:	069b      	lsls	r3, r3, #26
 8005ff8:	d502      	bpl.n	8006000 <_printf_common+0x30>
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	602b      	str	r3, [r5, #0]
 8006000:	2706      	movs	r7, #6
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	401f      	ands	r7, r3
 8006006:	d027      	beq.n	8006058 <_printf_common+0x88>
 8006008:	0023      	movs	r3, r4
 800600a:	3343      	adds	r3, #67	; 0x43
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	1e5a      	subs	r2, r3, #1
 8006010:	4193      	sbcs	r3, r2
 8006012:	6822      	ldr	r2, [r4, #0]
 8006014:	0692      	lsls	r2, r2, #26
 8006016:	d430      	bmi.n	800607a <_printf_common+0xaa>
 8006018:	0022      	movs	r2, r4
 800601a:	9901      	ldr	r1, [sp, #4]
 800601c:	3243      	adds	r2, #67	; 0x43
 800601e:	9800      	ldr	r0, [sp, #0]
 8006020:	9e08      	ldr	r6, [sp, #32]
 8006022:	47b0      	blx	r6
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d025      	beq.n	8006074 <_printf_common+0xa4>
 8006028:	2306      	movs	r3, #6
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	682a      	ldr	r2, [r5, #0]
 800602e:	68e1      	ldr	r1, [r4, #12]
 8006030:	4003      	ands	r3, r0
 8006032:	2500      	movs	r5, #0
 8006034:	2b04      	cmp	r3, #4
 8006036:	d103      	bne.n	8006040 <_printf_common+0x70>
 8006038:	1a8d      	subs	r5, r1, r2
 800603a:	43eb      	mvns	r3, r5
 800603c:	17db      	asrs	r3, r3, #31
 800603e:	401d      	ands	r5, r3
 8006040:	68a3      	ldr	r3, [r4, #8]
 8006042:	6922      	ldr	r2, [r4, #16]
 8006044:	4293      	cmp	r3, r2
 8006046:	dd01      	ble.n	800604c <_printf_common+0x7c>
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	18ed      	adds	r5, r5, r3
 800604c:	2700      	movs	r7, #0
 800604e:	42bd      	cmp	r5, r7
 8006050:	d120      	bne.n	8006094 <_printf_common+0xc4>
 8006052:	2000      	movs	r0, #0
 8006054:	e010      	b.n	8006078 <_printf_common+0xa8>
 8006056:	3701      	adds	r7, #1
 8006058:	68e3      	ldr	r3, [r4, #12]
 800605a:	682a      	ldr	r2, [r5, #0]
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	42bb      	cmp	r3, r7
 8006060:	ddd2      	ble.n	8006008 <_printf_common+0x38>
 8006062:	0022      	movs	r2, r4
 8006064:	2301      	movs	r3, #1
 8006066:	3219      	adds	r2, #25
 8006068:	9901      	ldr	r1, [sp, #4]
 800606a:	9800      	ldr	r0, [sp, #0]
 800606c:	9e08      	ldr	r6, [sp, #32]
 800606e:	47b0      	blx	r6
 8006070:	1c43      	adds	r3, r0, #1
 8006072:	d1f0      	bne.n	8006056 <_printf_common+0x86>
 8006074:	2001      	movs	r0, #1
 8006076:	4240      	negs	r0, r0
 8006078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800607a:	2030      	movs	r0, #48	; 0x30
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	3143      	adds	r1, #67	; 0x43
 8006080:	7008      	strb	r0, [r1, #0]
 8006082:	0021      	movs	r1, r4
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	3145      	adds	r1, #69	; 0x45
 8006088:	7809      	ldrb	r1, [r1, #0]
 800608a:	18a2      	adds	r2, r4, r2
 800608c:	3243      	adds	r2, #67	; 0x43
 800608e:	3302      	adds	r3, #2
 8006090:	7011      	strb	r1, [r2, #0]
 8006092:	e7c1      	b.n	8006018 <_printf_common+0x48>
 8006094:	0022      	movs	r2, r4
 8006096:	2301      	movs	r3, #1
 8006098:	321a      	adds	r2, #26
 800609a:	9901      	ldr	r1, [sp, #4]
 800609c:	9800      	ldr	r0, [sp, #0]
 800609e:	9e08      	ldr	r6, [sp, #32]
 80060a0:	47b0      	blx	r6
 80060a2:	1c43      	adds	r3, r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa4>
 80060a6:	3701      	adds	r7, #1
 80060a8:	e7d1      	b.n	800604e <_printf_common+0x7e>
	...

080060ac <_printf_i>:
 80060ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ae:	b089      	sub	sp, #36	; 0x24
 80060b0:	9204      	str	r2, [sp, #16]
 80060b2:	000a      	movs	r2, r1
 80060b4:	3243      	adds	r2, #67	; 0x43
 80060b6:	9305      	str	r3, [sp, #20]
 80060b8:	9003      	str	r0, [sp, #12]
 80060ba:	9202      	str	r2, [sp, #8]
 80060bc:	7e0a      	ldrb	r2, [r1, #24]
 80060be:	000c      	movs	r4, r1
 80060c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c2:	2a6e      	cmp	r2, #110	; 0x6e
 80060c4:	d100      	bne.n	80060c8 <_printf_i+0x1c>
 80060c6:	e086      	b.n	80061d6 <_printf_i+0x12a>
 80060c8:	d81f      	bhi.n	800610a <_printf_i+0x5e>
 80060ca:	2a63      	cmp	r2, #99	; 0x63
 80060cc:	d033      	beq.n	8006136 <_printf_i+0x8a>
 80060ce:	d808      	bhi.n	80060e2 <_printf_i+0x36>
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	d100      	bne.n	80060d6 <_printf_i+0x2a>
 80060d4:	e08c      	b.n	80061f0 <_printf_i+0x144>
 80060d6:	2a58      	cmp	r2, #88	; 0x58
 80060d8:	d04d      	beq.n	8006176 <_printf_i+0xca>
 80060da:	0025      	movs	r5, r4
 80060dc:	3542      	adds	r5, #66	; 0x42
 80060de:	702a      	strb	r2, [r5, #0]
 80060e0:	e030      	b.n	8006144 <_printf_i+0x98>
 80060e2:	2a64      	cmp	r2, #100	; 0x64
 80060e4:	d001      	beq.n	80060ea <_printf_i+0x3e>
 80060e6:	2a69      	cmp	r2, #105	; 0x69
 80060e8:	d1f7      	bne.n	80060da <_printf_i+0x2e>
 80060ea:	6819      	ldr	r1, [r3, #0]
 80060ec:	6825      	ldr	r5, [r4, #0]
 80060ee:	1d0a      	adds	r2, r1, #4
 80060f0:	0628      	lsls	r0, r5, #24
 80060f2:	d529      	bpl.n	8006148 <_printf_i+0x9c>
 80060f4:	6808      	ldr	r0, [r1, #0]
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	2800      	cmp	r0, #0
 80060fa:	da03      	bge.n	8006104 <_printf_i+0x58>
 80060fc:	232d      	movs	r3, #45	; 0x2d
 80060fe:	9a02      	ldr	r2, [sp, #8]
 8006100:	4240      	negs	r0, r0
 8006102:	7013      	strb	r3, [r2, #0]
 8006104:	4e6b      	ldr	r6, [pc, #428]	; (80062b4 <_printf_i+0x208>)
 8006106:	270a      	movs	r7, #10
 8006108:	e04f      	b.n	80061aa <_printf_i+0xfe>
 800610a:	2a73      	cmp	r2, #115	; 0x73
 800610c:	d074      	beq.n	80061f8 <_printf_i+0x14c>
 800610e:	d808      	bhi.n	8006122 <_printf_i+0x76>
 8006110:	2a6f      	cmp	r2, #111	; 0x6f
 8006112:	d01f      	beq.n	8006154 <_printf_i+0xa8>
 8006114:	2a70      	cmp	r2, #112	; 0x70
 8006116:	d1e0      	bne.n	80060da <_printf_i+0x2e>
 8006118:	2220      	movs	r2, #32
 800611a:	6809      	ldr	r1, [r1, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	6022      	str	r2, [r4, #0]
 8006120:	e003      	b.n	800612a <_printf_i+0x7e>
 8006122:	2a75      	cmp	r2, #117	; 0x75
 8006124:	d016      	beq.n	8006154 <_printf_i+0xa8>
 8006126:	2a78      	cmp	r2, #120	; 0x78
 8006128:	d1d7      	bne.n	80060da <_printf_i+0x2e>
 800612a:	0022      	movs	r2, r4
 800612c:	2178      	movs	r1, #120	; 0x78
 800612e:	3245      	adds	r2, #69	; 0x45
 8006130:	7011      	strb	r1, [r2, #0]
 8006132:	4e61      	ldr	r6, [pc, #388]	; (80062b8 <_printf_i+0x20c>)
 8006134:	e022      	b.n	800617c <_printf_i+0xd0>
 8006136:	0025      	movs	r5, r4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	3542      	adds	r5, #66	; 0x42
 800613c:	1d11      	adds	r1, r2, #4
 800613e:	6019      	str	r1, [r3, #0]
 8006140:	6813      	ldr	r3, [r2, #0]
 8006142:	702b      	strb	r3, [r5, #0]
 8006144:	2301      	movs	r3, #1
 8006146:	e065      	b.n	8006214 <_printf_i+0x168>
 8006148:	6808      	ldr	r0, [r1, #0]
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	0669      	lsls	r1, r5, #25
 800614e:	d5d3      	bpl.n	80060f8 <_printf_i+0x4c>
 8006150:	b200      	sxth	r0, r0
 8006152:	e7d1      	b.n	80060f8 <_printf_i+0x4c>
 8006154:	6819      	ldr	r1, [r3, #0]
 8006156:	6825      	ldr	r5, [r4, #0]
 8006158:	1d08      	adds	r0, r1, #4
 800615a:	6018      	str	r0, [r3, #0]
 800615c:	6808      	ldr	r0, [r1, #0]
 800615e:	062e      	lsls	r6, r5, #24
 8006160:	d505      	bpl.n	800616e <_printf_i+0xc2>
 8006162:	4e54      	ldr	r6, [pc, #336]	; (80062b4 <_printf_i+0x208>)
 8006164:	2708      	movs	r7, #8
 8006166:	2a6f      	cmp	r2, #111	; 0x6f
 8006168:	d01b      	beq.n	80061a2 <_printf_i+0xf6>
 800616a:	270a      	movs	r7, #10
 800616c:	e019      	b.n	80061a2 <_printf_i+0xf6>
 800616e:	066d      	lsls	r5, r5, #25
 8006170:	d5f7      	bpl.n	8006162 <_printf_i+0xb6>
 8006172:	b280      	uxth	r0, r0
 8006174:	e7f5      	b.n	8006162 <_printf_i+0xb6>
 8006176:	3145      	adds	r1, #69	; 0x45
 8006178:	4e4e      	ldr	r6, [pc, #312]	; (80062b4 <_printf_i+0x208>)
 800617a:	700a      	strb	r2, [r1, #0]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	6822      	ldr	r2, [r4, #0]
 8006180:	1d01      	adds	r1, r0, #4
 8006182:	6800      	ldr	r0, [r0, #0]
 8006184:	6019      	str	r1, [r3, #0]
 8006186:	0615      	lsls	r5, r2, #24
 8006188:	d521      	bpl.n	80061ce <_printf_i+0x122>
 800618a:	07d3      	lsls	r3, r2, #31
 800618c:	d502      	bpl.n	8006194 <_printf_i+0xe8>
 800618e:	2320      	movs	r3, #32
 8006190:	431a      	orrs	r2, r3
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	2710      	movs	r7, #16
 8006196:	2800      	cmp	r0, #0
 8006198:	d103      	bne.n	80061a2 <_printf_i+0xf6>
 800619a:	2320      	movs	r3, #32
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	439a      	bics	r2, r3
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	0023      	movs	r3, r4
 80061a4:	2200      	movs	r2, #0
 80061a6:	3343      	adds	r3, #67	; 0x43
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	6863      	ldr	r3, [r4, #4]
 80061ac:	60a3      	str	r3, [r4, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	db58      	blt.n	8006264 <_printf_i+0x1b8>
 80061b2:	2204      	movs	r2, #4
 80061b4:	6821      	ldr	r1, [r4, #0]
 80061b6:	4391      	bics	r1, r2
 80061b8:	6021      	str	r1, [r4, #0]
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d154      	bne.n	8006268 <_printf_i+0x1bc>
 80061be:	9d02      	ldr	r5, [sp, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d05a      	beq.n	800627a <_printf_i+0x1ce>
 80061c4:	0025      	movs	r5, r4
 80061c6:	7833      	ldrb	r3, [r6, #0]
 80061c8:	3542      	adds	r5, #66	; 0x42
 80061ca:	702b      	strb	r3, [r5, #0]
 80061cc:	e055      	b.n	800627a <_printf_i+0x1ce>
 80061ce:	0655      	lsls	r5, r2, #25
 80061d0:	d5db      	bpl.n	800618a <_printf_i+0xde>
 80061d2:	b280      	uxth	r0, r0
 80061d4:	e7d9      	b.n	800618a <_printf_i+0xde>
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	680d      	ldr	r5, [r1, #0]
 80061da:	1d10      	adds	r0, r2, #4
 80061dc:	6949      	ldr	r1, [r1, #20]
 80061de:	6018      	str	r0, [r3, #0]
 80061e0:	6813      	ldr	r3, [r2, #0]
 80061e2:	062e      	lsls	r6, r5, #24
 80061e4:	d501      	bpl.n	80061ea <_printf_i+0x13e>
 80061e6:	6019      	str	r1, [r3, #0]
 80061e8:	e002      	b.n	80061f0 <_printf_i+0x144>
 80061ea:	066d      	lsls	r5, r5, #25
 80061ec:	d5fb      	bpl.n	80061e6 <_printf_i+0x13a>
 80061ee:	8019      	strh	r1, [r3, #0]
 80061f0:	2300      	movs	r3, #0
 80061f2:	9d02      	ldr	r5, [sp, #8]
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	e04f      	b.n	8006298 <_printf_i+0x1ec>
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	1d11      	adds	r1, r2, #4
 80061fc:	6019      	str	r1, [r3, #0]
 80061fe:	6815      	ldr	r5, [r2, #0]
 8006200:	2100      	movs	r1, #0
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	0028      	movs	r0, r5
 8006206:	f000 f859 	bl	80062bc <memchr>
 800620a:	2800      	cmp	r0, #0
 800620c:	d001      	beq.n	8006212 <_printf_i+0x166>
 800620e:	1b40      	subs	r0, r0, r5
 8006210:	6060      	str	r0, [r4, #4]
 8006212:	6863      	ldr	r3, [r4, #4]
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	2300      	movs	r3, #0
 8006218:	9a02      	ldr	r2, [sp, #8]
 800621a:	7013      	strb	r3, [r2, #0]
 800621c:	e03c      	b.n	8006298 <_printf_i+0x1ec>
 800621e:	6923      	ldr	r3, [r4, #16]
 8006220:	002a      	movs	r2, r5
 8006222:	9904      	ldr	r1, [sp, #16]
 8006224:	9803      	ldr	r0, [sp, #12]
 8006226:	9d05      	ldr	r5, [sp, #20]
 8006228:	47a8      	blx	r5
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	d03e      	beq.n	80062ac <_printf_i+0x200>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	079b      	lsls	r3, r3, #30
 8006232:	d415      	bmi.n	8006260 <_printf_i+0x1b4>
 8006234:	9b07      	ldr	r3, [sp, #28]
 8006236:	68e0      	ldr	r0, [r4, #12]
 8006238:	4298      	cmp	r0, r3
 800623a:	da39      	bge.n	80062b0 <_printf_i+0x204>
 800623c:	0018      	movs	r0, r3
 800623e:	e037      	b.n	80062b0 <_printf_i+0x204>
 8006240:	0022      	movs	r2, r4
 8006242:	2301      	movs	r3, #1
 8006244:	3219      	adds	r2, #25
 8006246:	9904      	ldr	r1, [sp, #16]
 8006248:	9803      	ldr	r0, [sp, #12]
 800624a:	9e05      	ldr	r6, [sp, #20]
 800624c:	47b0      	blx	r6
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	d02c      	beq.n	80062ac <_printf_i+0x200>
 8006252:	3501      	adds	r5, #1
 8006254:	68e3      	ldr	r3, [r4, #12]
 8006256:	9a07      	ldr	r2, [sp, #28]
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	42ab      	cmp	r3, r5
 800625c:	dcf0      	bgt.n	8006240 <_printf_i+0x194>
 800625e:	e7e9      	b.n	8006234 <_printf_i+0x188>
 8006260:	2500      	movs	r5, #0
 8006262:	e7f7      	b.n	8006254 <_printf_i+0x1a8>
 8006264:	2800      	cmp	r0, #0
 8006266:	d0ad      	beq.n	80061c4 <_printf_i+0x118>
 8006268:	9d02      	ldr	r5, [sp, #8]
 800626a:	0039      	movs	r1, r7
 800626c:	f7f9 ffd0 	bl	8000210 <__aeabi_uidivmod>
 8006270:	5c73      	ldrb	r3, [r6, r1]
 8006272:	3d01      	subs	r5, #1
 8006274:	702b      	strb	r3, [r5, #0]
 8006276:	2800      	cmp	r0, #0
 8006278:	d1f7      	bne.n	800626a <_printf_i+0x1be>
 800627a:	2f08      	cmp	r7, #8
 800627c:	d109      	bne.n	8006292 <_printf_i+0x1e6>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	07db      	lsls	r3, r3, #31
 8006282:	d506      	bpl.n	8006292 <_printf_i+0x1e6>
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	6922      	ldr	r2, [r4, #16]
 8006288:	4293      	cmp	r3, r2
 800628a:	dc02      	bgt.n	8006292 <_printf_i+0x1e6>
 800628c:	2330      	movs	r3, #48	; 0x30
 800628e:	3d01      	subs	r5, #1
 8006290:	702b      	strb	r3, [r5, #0]
 8006292:	9b02      	ldr	r3, [sp, #8]
 8006294:	1b5b      	subs	r3, r3, r5
 8006296:	6123      	str	r3, [r4, #16]
 8006298:	9b05      	ldr	r3, [sp, #20]
 800629a:	aa07      	add	r2, sp, #28
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	0021      	movs	r1, r4
 80062a0:	9b04      	ldr	r3, [sp, #16]
 80062a2:	9803      	ldr	r0, [sp, #12]
 80062a4:	f7ff fe94 	bl	8005fd0 <_printf_common>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d1b8      	bne.n	800621e <_printf_i+0x172>
 80062ac:	2001      	movs	r0, #1
 80062ae:	4240      	negs	r0, r0
 80062b0:	b009      	add	sp, #36	; 0x24
 80062b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b4:	08008cad 	.word	0x08008cad
 80062b8:	08008cbe 	.word	0x08008cbe

080062bc <memchr>:
 80062bc:	b2c9      	uxtb	r1, r1
 80062be:	1882      	adds	r2, r0, r2
 80062c0:	4290      	cmp	r0, r2
 80062c2:	d101      	bne.n	80062c8 <memchr+0xc>
 80062c4:	2000      	movs	r0, #0
 80062c6:	4770      	bx	lr
 80062c8:	7803      	ldrb	r3, [r0, #0]
 80062ca:	428b      	cmp	r3, r1
 80062cc:	d0fb      	beq.n	80062c6 <memchr+0xa>
 80062ce:	3001      	adds	r0, #1
 80062d0:	e7f6      	b.n	80062c0 <memchr+0x4>

080062d2 <memmove>:
 80062d2:	b510      	push	{r4, lr}
 80062d4:	4288      	cmp	r0, r1
 80062d6:	d902      	bls.n	80062de <memmove+0xc>
 80062d8:	188b      	adds	r3, r1, r2
 80062da:	4298      	cmp	r0, r3
 80062dc:	d303      	bcc.n	80062e6 <memmove+0x14>
 80062de:	2300      	movs	r3, #0
 80062e0:	e007      	b.n	80062f2 <memmove+0x20>
 80062e2:	5c8b      	ldrb	r3, [r1, r2]
 80062e4:	5483      	strb	r3, [r0, r2]
 80062e6:	3a01      	subs	r2, #1
 80062e8:	d2fb      	bcs.n	80062e2 <memmove+0x10>
 80062ea:	bd10      	pop	{r4, pc}
 80062ec:	5ccc      	ldrb	r4, [r1, r3]
 80062ee:	54c4      	strb	r4, [r0, r3]
 80062f0:	3301      	adds	r3, #1
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d1fa      	bne.n	80062ec <memmove+0x1a>
 80062f6:	e7f8      	b.n	80062ea <memmove+0x18>

080062f8 <_free_r>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	0005      	movs	r5, r0
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d010      	beq.n	8006322 <_free_r+0x2a>
 8006300:	1f0c      	subs	r4, r1, #4
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	da00      	bge.n	800630a <_free_r+0x12>
 8006308:	18e4      	adds	r4, r4, r3
 800630a:	0028      	movs	r0, r5
 800630c:	f000 f8d4 	bl	80064b8 <__malloc_lock>
 8006310:	4a1d      	ldr	r2, [pc, #116]	; (8006388 <_free_r+0x90>)
 8006312:	6813      	ldr	r3, [r2, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d105      	bne.n	8006324 <_free_r+0x2c>
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	6014      	str	r4, [r2, #0]
 800631c:	0028      	movs	r0, r5
 800631e:	f000 f8cc 	bl	80064ba <__malloc_unlock>
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	42a3      	cmp	r3, r4
 8006326:	d909      	bls.n	800633c <_free_r+0x44>
 8006328:	6821      	ldr	r1, [r4, #0]
 800632a:	1860      	adds	r0, r4, r1
 800632c:	4283      	cmp	r3, r0
 800632e:	d1f3      	bne.n	8006318 <_free_r+0x20>
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	1841      	adds	r1, r0, r1
 8006336:	6021      	str	r1, [r4, #0]
 8006338:	e7ee      	b.n	8006318 <_free_r+0x20>
 800633a:	0013      	movs	r3, r2
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	2a00      	cmp	r2, #0
 8006340:	d001      	beq.n	8006346 <_free_r+0x4e>
 8006342:	42a2      	cmp	r2, r4
 8006344:	d9f9      	bls.n	800633a <_free_r+0x42>
 8006346:	6819      	ldr	r1, [r3, #0]
 8006348:	1858      	adds	r0, r3, r1
 800634a:	42a0      	cmp	r0, r4
 800634c:	d10b      	bne.n	8006366 <_free_r+0x6e>
 800634e:	6820      	ldr	r0, [r4, #0]
 8006350:	1809      	adds	r1, r1, r0
 8006352:	1858      	adds	r0, r3, r1
 8006354:	6019      	str	r1, [r3, #0]
 8006356:	4282      	cmp	r2, r0
 8006358:	d1e0      	bne.n	800631c <_free_r+0x24>
 800635a:	6810      	ldr	r0, [r2, #0]
 800635c:	6852      	ldr	r2, [r2, #4]
 800635e:	1841      	adds	r1, r0, r1
 8006360:	6019      	str	r1, [r3, #0]
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	e7da      	b.n	800631c <_free_r+0x24>
 8006366:	42a0      	cmp	r0, r4
 8006368:	d902      	bls.n	8006370 <_free_r+0x78>
 800636a:	230c      	movs	r3, #12
 800636c:	602b      	str	r3, [r5, #0]
 800636e:	e7d5      	b.n	800631c <_free_r+0x24>
 8006370:	6821      	ldr	r1, [r4, #0]
 8006372:	1860      	adds	r0, r4, r1
 8006374:	4282      	cmp	r2, r0
 8006376:	d103      	bne.n	8006380 <_free_r+0x88>
 8006378:	6810      	ldr	r0, [r2, #0]
 800637a:	6852      	ldr	r2, [r2, #4]
 800637c:	1841      	adds	r1, r0, r1
 800637e:	6021      	str	r1, [r4, #0]
 8006380:	6062      	str	r2, [r4, #4]
 8006382:	605c      	str	r4, [r3, #4]
 8006384:	e7ca      	b.n	800631c <_free_r+0x24>
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	200002a8 	.word	0x200002a8

0800638c <_malloc_r>:
 800638c:	2303      	movs	r3, #3
 800638e:	b570      	push	{r4, r5, r6, lr}
 8006390:	1ccd      	adds	r5, r1, #3
 8006392:	439d      	bics	r5, r3
 8006394:	3508      	adds	r5, #8
 8006396:	0006      	movs	r6, r0
 8006398:	2d0c      	cmp	r5, #12
 800639a:	d21e      	bcs.n	80063da <_malloc_r+0x4e>
 800639c:	250c      	movs	r5, #12
 800639e:	42a9      	cmp	r1, r5
 80063a0:	d81d      	bhi.n	80063de <_malloc_r+0x52>
 80063a2:	0030      	movs	r0, r6
 80063a4:	f000 f888 	bl	80064b8 <__malloc_lock>
 80063a8:	4a25      	ldr	r2, [pc, #148]	; (8006440 <_malloc_r+0xb4>)
 80063aa:	6814      	ldr	r4, [r2, #0]
 80063ac:	0021      	movs	r1, r4
 80063ae:	2900      	cmp	r1, #0
 80063b0:	d119      	bne.n	80063e6 <_malloc_r+0x5a>
 80063b2:	4c24      	ldr	r4, [pc, #144]	; (8006444 <_malloc_r+0xb8>)
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <_malloc_r+0x36>
 80063ba:	0030      	movs	r0, r6
 80063bc:	f000 f86a 	bl	8006494 <_sbrk_r>
 80063c0:	6020      	str	r0, [r4, #0]
 80063c2:	0029      	movs	r1, r5
 80063c4:	0030      	movs	r0, r6
 80063c6:	f000 f865 	bl	8006494 <_sbrk_r>
 80063ca:	1c43      	adds	r3, r0, #1
 80063cc:	d12b      	bne.n	8006426 <_malloc_r+0x9a>
 80063ce:	230c      	movs	r3, #12
 80063d0:	0030      	movs	r0, r6
 80063d2:	6033      	str	r3, [r6, #0]
 80063d4:	f000 f871 	bl	80064ba <__malloc_unlock>
 80063d8:	e003      	b.n	80063e2 <_malloc_r+0x56>
 80063da:	2d00      	cmp	r5, #0
 80063dc:	dadf      	bge.n	800639e <_malloc_r+0x12>
 80063de:	230c      	movs	r3, #12
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	2000      	movs	r0, #0
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	680b      	ldr	r3, [r1, #0]
 80063e8:	1b5b      	subs	r3, r3, r5
 80063ea:	d419      	bmi.n	8006420 <_malloc_r+0x94>
 80063ec:	2b0b      	cmp	r3, #11
 80063ee:	d903      	bls.n	80063f8 <_malloc_r+0x6c>
 80063f0:	600b      	str	r3, [r1, #0]
 80063f2:	18cc      	adds	r4, r1, r3
 80063f4:	6025      	str	r5, [r4, #0]
 80063f6:	e003      	b.n	8006400 <_malloc_r+0x74>
 80063f8:	684b      	ldr	r3, [r1, #4]
 80063fa:	428c      	cmp	r4, r1
 80063fc:	d10d      	bne.n	800641a <_malloc_r+0x8e>
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	0030      	movs	r0, r6
 8006402:	f000 f85a 	bl	80064ba <__malloc_unlock>
 8006406:	0020      	movs	r0, r4
 8006408:	2207      	movs	r2, #7
 800640a:	300b      	adds	r0, #11
 800640c:	1d23      	adds	r3, r4, #4
 800640e:	4390      	bics	r0, r2
 8006410:	1ac3      	subs	r3, r0, r3
 8006412:	d0e7      	beq.n	80063e4 <_malloc_r+0x58>
 8006414:	425a      	negs	r2, r3
 8006416:	50e2      	str	r2, [r4, r3]
 8006418:	e7e4      	b.n	80063e4 <_malloc_r+0x58>
 800641a:	6063      	str	r3, [r4, #4]
 800641c:	000c      	movs	r4, r1
 800641e:	e7ef      	b.n	8006400 <_malloc_r+0x74>
 8006420:	000c      	movs	r4, r1
 8006422:	6849      	ldr	r1, [r1, #4]
 8006424:	e7c3      	b.n	80063ae <_malloc_r+0x22>
 8006426:	2303      	movs	r3, #3
 8006428:	1cc4      	adds	r4, r0, #3
 800642a:	439c      	bics	r4, r3
 800642c:	42a0      	cmp	r0, r4
 800642e:	d0e1      	beq.n	80063f4 <_malloc_r+0x68>
 8006430:	1a21      	subs	r1, r4, r0
 8006432:	0030      	movs	r0, r6
 8006434:	f000 f82e 	bl	8006494 <_sbrk_r>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d1db      	bne.n	80063f4 <_malloc_r+0x68>
 800643c:	e7c7      	b.n	80063ce <_malloc_r+0x42>
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	200002a8 	.word	0x200002a8
 8006444:	200002ac 	.word	0x200002ac

08006448 <_realloc_r>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	0007      	movs	r7, r0
 800644c:	000d      	movs	r5, r1
 800644e:	0016      	movs	r6, r2
 8006450:	2900      	cmp	r1, #0
 8006452:	d105      	bne.n	8006460 <_realloc_r+0x18>
 8006454:	0011      	movs	r1, r2
 8006456:	f7ff ff99 	bl	800638c <_malloc_r>
 800645a:	0004      	movs	r4, r0
 800645c:	0020      	movs	r0, r4
 800645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006460:	2a00      	cmp	r2, #0
 8006462:	d103      	bne.n	800646c <_realloc_r+0x24>
 8006464:	f7ff ff48 	bl	80062f8 <_free_r>
 8006468:	0034      	movs	r4, r6
 800646a:	e7f7      	b.n	800645c <_realloc_r+0x14>
 800646c:	f000 f826 	bl	80064bc <_malloc_usable_size_r>
 8006470:	002c      	movs	r4, r5
 8006472:	42b0      	cmp	r0, r6
 8006474:	d2f2      	bcs.n	800645c <_realloc_r+0x14>
 8006476:	0031      	movs	r1, r6
 8006478:	0038      	movs	r0, r7
 800647a:	f7ff ff87 	bl	800638c <_malloc_r>
 800647e:	1e04      	subs	r4, r0, #0
 8006480:	d0ec      	beq.n	800645c <_realloc_r+0x14>
 8006482:	0029      	movs	r1, r5
 8006484:	0032      	movs	r2, r6
 8006486:	f7ff fc11 	bl	8005cac <memcpy>
 800648a:	0029      	movs	r1, r5
 800648c:	0038      	movs	r0, r7
 800648e:	f7ff ff33 	bl	80062f8 <_free_r>
 8006492:	e7e3      	b.n	800645c <_realloc_r+0x14>

08006494 <_sbrk_r>:
 8006494:	2300      	movs	r3, #0
 8006496:	b570      	push	{r4, r5, r6, lr}
 8006498:	4c06      	ldr	r4, [pc, #24]	; (80064b4 <_sbrk_r+0x20>)
 800649a:	0005      	movs	r5, r0
 800649c:	0008      	movs	r0, r1
 800649e:	6023      	str	r3, [r4, #0]
 80064a0:	f7fb f97e 	bl	80017a0 <_sbrk>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d103      	bne.n	80064b0 <_sbrk_r+0x1c>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d000      	beq.n	80064b0 <_sbrk_r+0x1c>
 80064ae:	602b      	str	r3, [r5, #0]
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	200006c8 	.word	0x200006c8

080064b8 <__malloc_lock>:
 80064b8:	4770      	bx	lr

080064ba <__malloc_unlock>:
 80064ba:	4770      	bx	lr

080064bc <_malloc_usable_size_r>:
 80064bc:	1f0b      	subs	r3, r1, #4
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1f18      	subs	r0, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da01      	bge.n	80064ca <_malloc_usable_size_r+0xe>
 80064c6:	580b      	ldr	r3, [r1, r0]
 80064c8:	18c0      	adds	r0, r0, r3
 80064ca:	4770      	bx	lr

080064cc <_init>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr

080064d8 <_fini>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr
