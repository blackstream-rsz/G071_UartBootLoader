
G071_NakedG071Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006530  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002800  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dec  08008dec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008dec  08008dec  00018dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008df4  08008df4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  20000074  08008e70  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  08008e70  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec0e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002254  00000000  00000000  0002ecaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea0  00000000  00000000  00030f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00018370  00000000  00000000  00031da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bbcd  00000000  00000000  0004a110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0009aacb  00000000  00000000  00055cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000f07a8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d70  00000000  00000000  000f0828  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000036fc  00000000  00000000  000f1598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080065d4 	.word	0x080065d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	080065d4 	.word	0x080065d4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <Wait_msec>:

STM32_BTL_COM	stm32_btl_com = {0};


static inline void Wait_msec(uint32_t millisecond)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <Wait_msec+0x38>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim3);
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <Wait_msec+0x38>)
 800061a:	0018      	movs	r0, r3
 800061c:	f002 fe72 	bl	8003304 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim3) < millisecond) {
 8000620:	e000      	b.n	8000624 <Wait_msec+0x1c>
		asm("nop");
 8000622:	46c0      	nop			; (mov r8, r8)
	while(__HAL_TIM_GET_COUNTER(&htim3) < millisecond) {
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <Wait_msec+0x38>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f8      	bhi.n	8000622 <Wait_msec+0x1a>
	}
	 HAL_TIM_Base_Stop(&htim3);
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <Wait_msec+0x38>)
 8000632:	0018      	movs	r0, r3
 8000634:	f002 fe90 	bl	8003358 <HAL_TIM_Base_Stop>
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000474 	.word	0x20000474

08000644 <PC_CommandParser>:
static void Stm32BTL_CMD_GlobalErase(void);
static void Stm32BTL_CMD_CallBack1_GlobalErase(void);
static void Stm32BTL_CMD_CallBack2_GlobalErase(void);

static  void PC_CommandParser(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	int len;
	if(pc_rx_buff[0] == 'a') {
 800064a:	4b36      	ldr	r3, [pc, #216]	; (8000724 <PC_CommandParser+0xe0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b61      	cmp	r3, #97	; 0x61
 8000650:	d111      	bne.n	8000676 <PC_CommandParser+0x32>

		len = sprintf((char*)pc_tx_buff,"Hello\r\n");
 8000652:	4a35      	ldr	r2, [pc, #212]	; (8000728 <PC_CommandParser+0xe4>)
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <PC_CommandParser+0xe8>)
 8000656:	0010      	movs	r0, r2
 8000658:	0019      	movs	r1, r3
 800065a:	2308      	movs	r3, #8
 800065c:	001a      	movs	r2, r3
 800065e:	f005 fba9 	bl	8005db4 <memcpy>
 8000662:	2307      	movs	r3, #7
 8000664:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	b29a      	uxth	r2, r3
 800066a:	492f      	ldr	r1, [pc, #188]	; (8000728 <PC_CommandParser+0xe4>)
 800066c:	4b30      	ldr	r3, [pc, #192]	; (8000730 <PC_CommandParser+0xec>)
 800066e:	0018      	movs	r0, r3
 8000670:	f003 fa18 	bl	8003aa4 <HAL_UART_Transmit_DMA>
 8000674:	e04b      	b.n	800070e <PC_CommandParser+0xca>
	}
	else if(pc_rx_buff[0] == 'b') {	/* 通常リセット */
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <PC_CommandParser+0xe0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b62      	cmp	r3, #98	; 0x62
 800067c:	d11d      	bne.n	80006ba <PC_CommandParser+0x76>
		ResetTarget(true);
 800067e:	2001      	movs	r0, #1
 8000680:	f000 f8c6 	bl	8000810 <ResetTarget>
		SetBootMode(false);
 8000684:	2000      	movs	r0, #0
 8000686:	f000 f87d 	bl	8000784 <SetBootMode>
		Wait_msec(100);
 800068a:	2064      	movs	r0, #100	; 0x64
 800068c:	f7ff ffbc 	bl	8000608 <Wait_msec>
		ResetTarget(false);
 8000690:	2000      	movs	r0, #0
 8000692:	f000 f8bd 	bl	8000810 <ResetTarget>
		len = sprintf((char*)pc_tx_buff,"Normal Reset\r\n");
 8000696:	4a24      	ldr	r2, [pc, #144]	; (8000728 <PC_CommandParser+0xe4>)
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <PC_CommandParser+0xf0>)
 800069a:	0010      	movs	r0, r2
 800069c:	0019      	movs	r1, r3
 800069e:	230f      	movs	r3, #15
 80006a0:	001a      	movs	r2, r3
 80006a2:	f005 fb87 	bl	8005db4 <memcpy>
 80006a6:	230e      	movs	r3, #14
 80006a8:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	491e      	ldr	r1, [pc, #120]	; (8000728 <PC_CommandParser+0xe4>)
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <PC_CommandParser+0xec>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 f9f6 	bl	8003aa4 <HAL_UART_Transmit_DMA>
 80006b8:	e029      	b.n	800070e <PC_CommandParser+0xca>
	}
	else if(pc_rx_buff[0] == 'c') {	/* boot mode */
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <PC_CommandParser+0xe0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b63      	cmp	r3, #99	; 0x63
 80006c0:	d111      	bne.n	80006e6 <PC_CommandParser+0xa2>
		ResetTarget(true);
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 f8a4 	bl	8000810 <ResetTarget>
		SetBootMode(true);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 f85b 	bl	8000784 <SetBootMode>
		Wait_msec(10);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f7ff ff9a 	bl	8000608 <Wait_msec>
		ResetTarget(false);
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 f89b 	bl	8000810 <ResetTarget>
		Wait_msec(5);
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff94 	bl	8000608 <Wait_msec>
		Stm32BTL_Connent();
 80006e0:	f000 f932 	bl	8000948 <Stm32BTL_Connent>
 80006e4:	e013      	b.n	800070e <PC_CommandParser+0xca>
	}
	else if(pc_rx_buff[0] == 'd') {	/* Get CMD */
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <PC_CommandParser+0xe0>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b64      	cmp	r3, #100	; 0x64
 80006ec:	d102      	bne.n	80006f4 <PC_CommandParser+0xb0>
		Stm32BTL_CMD_GET();
 80006ee:	f000 f993 	bl	8000a18 <Stm32BTL_CMD_GET>
 80006f2:	e00c      	b.n	800070e <PC_CommandParser+0xca>
	}
	else if(pc_rx_buff[0] == 'e') {	/* Firm Write */
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <PC_CommandParser+0xe0>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b65      	cmp	r3, #101	; 0x65
 80006fa:	d102      	bne.n	8000702 <PC_CommandParser+0xbe>
		Stm32BTL_CMD_FIRM_WRITE();
 80006fc:	f000 fa8e 	bl	8000c1c <Stm32BTL_CMD_FIRM_WRITE>
 8000700:	e005      	b.n	800070e <PC_CommandParser+0xca>
	}
		else if(pc_rx_buff[0] == 'f') {	/* Flash Global Erase */
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <PC_CommandParser+0xe0>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b66      	cmp	r3, #102	; 0x66
 8000708:	d101      	bne.n	800070e <PC_CommandParser+0xca>
		Stm32BTL_CMD_GlobalErase();
 800070a:	f000 fc0f 	bl	8000f2c <Stm32BTL_CMD_GlobalErase>
	}
	HAL_UART_Receive_DMA(&huart2, pc_rx_buff, 1);
 800070e:	4905      	ldr	r1, [pc, #20]	; (8000724 <PC_CommandParser+0xe0>)
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <PC_CommandParser+0xec>)
 8000712:	2201      	movs	r2, #1
 8000714:	0018      	movs	r0, r3
 8000716:	f003 fa59 	bl	8003bcc <HAL_UART_Receive_DMA>
}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000468 	.word	0x20000468
 8000728:	20000368 	.word	0x20000368
 800072c:	080065ec 	.word	0x080065ec
 8000730:	200005f8 	.word	0x200005f8
 8000734:	080065f4 	.word	0x080065f4

08000738 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *hUart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	if(hUart->Instance == USART2) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <HAL_UART_RxCpltCallback+0x40>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d102      	bne.n	8000750 <HAL_UART_RxCpltCallback+0x18>
		PC_CommandParser();
 800074a:	f7ff ff7b 	bl	8000644 <PC_CommandParser>
	else if(hUart->Instance == TARGET_USART) {
		if(stm32_btl_com.funcCallBack != NULL) {
			stm32_btl_com.funcCallBack();	
		}
	}
}
 800074e:	e00f      	b.n	8000770 <HAL_UART_RxCpltCallback+0x38>
	else if(hUart->Instance == TARGET_USART) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a09      	ldr	r2, [pc, #36]	; (800077c <HAL_UART_RxCpltCallback+0x44>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d10a      	bne.n	8000770 <HAL_UART_RxCpltCallback+0x38>
		if(stm32_btl_com.funcCallBack != NULL) {
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <HAL_UART_RxCpltCallback+0x48>)
 800075c:	2381      	movs	r3, #129	; 0x81
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	58d3      	ldr	r3, [r2, r3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d004      	beq.n	8000770 <HAL_UART_RxCpltCallback+0x38>
			stm32_btl_com.funcCallBack();	
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_UART_RxCpltCallback+0x48>)
 8000768:	2381      	movs	r3, #129	; 0x81
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	58d3      	ldr	r3, [r2, r3]
 800076e:	4798      	blx	r3
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40004400 	.word	0x40004400
 800077c:	40004c00 	.word	0x40004c00
 8000780:	20000090 	.word	0x20000090

08000784 <SetBootMode>:

static  void SetBootMode(bool enable)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	0002      	movs	r2, r0
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	701a      	strb	r2, [r3, #0]
	static bool bFirst = true;
	if(enable) {
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d007      	beq.n	80007a8 <SetBootMode+0x24>
		HAL_GPIO_WritePin(GPIO_BOOT0_GPIO_Port,GPIO_BOOT0_Pin,1);
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <SetBootMode+0x84>)
 800079e:	2201      	movs	r2, #1
 80007a0:	0019      	movs	r1, r3
 80007a2:	f001 fe97 	bl	80024d4 <HAL_GPIO_WritePin>
 80007a6:	e006      	b.n	80007b6 <SetBootMode+0x32>
	}
	else {
		HAL_GPIO_WritePin(GPIO_BOOT0_GPIO_Port,GPIO_BOOT0_Pin,0);
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	011b      	lsls	r3, r3, #4
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <SetBootMode+0x84>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	0019      	movs	r1, r3
 80007b2:	f001 fe8f 	bl	80024d4 <HAL_GPIO_WritePin>
	}

	if(bFirst) {
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <SetBootMode+0x88>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d01f      	beq.n	80007fe <SetBootMode+0x7a>
		bFirst = false;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <SetBootMode+0x88>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	210c      	movs	r1, #12
 80007c6:	000c      	movs	r4, r1
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	0018      	movs	r0, r3
 80007cc:	2314      	movs	r3, #20
 80007ce:	001a      	movs	r2, r3
 80007d0:	2100      	movs	r1, #0
 80007d2:	f005 faf8 	bl	8005dc6 <memset>

	  /*Configure GPIO pin : GPIO_BOOT0_Pin */
	  GPIO_InitStruct.Pin = GPIO_BOOT0_Pin;
 80007d6:	0021      	movs	r1, r4
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2201      	movs	r2, #1
 80007e4:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIO_BOOT0_GPIO_Port, &GPIO_InitStruct);
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <SetBootMode+0x84>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	0010      	movs	r0, r2
 80007fa:	f001 fd07 	bl	800220c <HAL_GPIO_Init>
	}
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b009      	add	sp, #36	; 0x24
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	50000400 	.word	0x50000400
 800080c:	20000000 	.word	0x20000000

08000810 <ResetTarget>:

static  void ResetTarget(bool enable)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	0002      	movs	r2, r0
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	701a      	strb	r2, [r3, #0]
	static bool bFirst = true;
	if(enable) {
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d007      	beq.n	8000834 <ResetTarget+0x24>
		HAL_GPIO_WritePin(GPIO_NRST_GPIO_Port,GPIO_NRST_Pin,0);
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	015b      	lsls	r3, r3, #5
 8000828:	481a      	ldr	r0, [pc, #104]	; (8000894 <ResetTarget+0x84>)
 800082a:	2200      	movs	r2, #0
 800082c:	0019      	movs	r1, r3
 800082e:	f001 fe51 	bl	80024d4 <HAL_GPIO_WritePin>
 8000832:	e006      	b.n	8000842 <ResetTarget+0x32>
	}
	else {
		HAL_GPIO_WritePin(GPIO_NRST_GPIO_Port,GPIO_NRST_Pin,1);
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	015b      	lsls	r3, r3, #5
 8000838:	4816      	ldr	r0, [pc, #88]	; (8000894 <ResetTarget+0x84>)
 800083a:	2201      	movs	r2, #1
 800083c:	0019      	movs	r1, r3
 800083e:	f001 fe49 	bl	80024d4 <HAL_GPIO_WritePin>
	}

	if(bFirst) {
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <ResetTarget+0x88>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d01f      	beq.n	800088a <ResetTarget+0x7a>
		bFirst = false;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <ResetTarget+0x88>)
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	210c      	movs	r1, #12
 8000852:	000c      	movs	r4, r1
 8000854:	187b      	adds	r3, r7, r1
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f005 fab2 	bl	8005dc6 <memset>

	  /*Configure GPIO pin : GPIO_NRST_Pin */
	  GPIO_InitStruct.Pin = GPIO_NRST_Pin;
 8000862:	0021      	movs	r1, r4
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0152      	lsls	r2, r2, #5
 800086a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIO_NRST_GPIO_Port, &GPIO_InitStruct);
 800087e:	187b      	adds	r3, r7, r1
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <ResetTarget+0x84>)
 8000882:	0019      	movs	r1, r3
 8000884:	0010      	movs	r0, r2
 8000886:	f001 fcc1 	bl	800220c <HAL_GPIO_Init>
	}
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b009      	add	sp, #36	; 0x24
 8000890:	bd90      	pop	{r4, r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	50000400 	.word	0x50000400
 8000898:	20000001 	.word	0x20000001

0800089c <Stm32BTL_SendRecvCommand>:

static void Stm32BTL_SendRecvCommand(uint8_t *tx_buff,uint16_t tx_byte,uint8_t *rx_buff,uint16_t rx_byte,void (*call_back_func)(void))
{
 800089c:	b5b0      	push	{r4, r5, r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	0008      	movs	r0, r1
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	0019      	movs	r1, r3
 80008aa:	250a      	movs	r5, #10
 80008ac:	197b      	adds	r3, r7, r5
 80008ae:	1c02      	adds	r2, r0, #0
 80008b0:	801a      	strh	r2, [r3, #0]
 80008b2:	2408      	movs	r4, #8
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	1c0a      	adds	r2, r1, #0
 80008b8:	801a      	strh	r2, [r3, #0]
	stm32_btl_com.funcCallBack = call_back_func;
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <Stm32BTL_SendRecvCommand+0x58>)
 80008bc:	2381      	movs	r3, #129	; 0x81
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	6a39      	ldr	r1, [r7, #32]
 80008c2:	50d1      	str	r1, [r2, r3]
	HAL_UART_Transmit_DMA(&hTargetUart, tx_buff, tx_byte);
 80008c4:	197b      	adds	r3, r7, r5
 80008c6:	881a      	ldrh	r2, [r3, #0]
 80008c8:	68f9      	ldr	r1, [r7, #12]
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <Stm32BTL_SendRecvCommand+0x5c>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f003 f8e9 	bl	8003aa4 <HAL_UART_Transmit_DMA>
	stm32_btl_com.rx_size = rx_byte;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <Stm32BTL_SendRecvCommand+0x58>)
 80008d4:	193a      	adds	r2, r7, r4
 80008d6:	4909      	ldr	r1, [pc, #36]	; (80008fc <Stm32BTL_SendRecvCommand+0x60>)
 80008d8:	8812      	ldrh	r2, [r2, #0]
 80008da:	525a      	strh	r2, [r3, r1]
	HAL_UART_Receive_IT(&hTargetUart, rx_buff, rx_byte);	/* DMAに変更予定 */
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	881a      	ldrh	r2, [r3, #0]
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <Stm32BTL_SendRecvCommand+0x5c>)
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 ffe9 	bl	80038bc <HAL_UART_Receive_IT>
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bdb0      	pop	{r4, r5, r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	20000090 	.word	0x20000090
 80008f8:	2000056c 	.word	0x2000056c
 80008fc:	0000020a 	.word	0x0000020a

08000900 <Stm32BTL_RecvCommand>:

static void Stm32BTL_RecvCommand(uint8_t *rx_buff,uint16_t rx_byte,void (*call_back_func)(void))
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	200a      	movs	r0, #10
 800090c:	183b      	adds	r3, r7, r0
 800090e:	1c0a      	adds	r2, r1, #0
 8000910:	801a      	strh	r2, [r3, #0]
	stm32_btl_com.funcCallBack = call_back_func;
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <Stm32BTL_RecvCommand+0x3c>)
 8000914:	2381      	movs	r3, #129	; 0x81
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	50d1      	str	r1, [r2, r3]
	stm32_btl_com.rx_size = rx_byte;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <Stm32BTL_RecvCommand+0x3c>)
 800091e:	183a      	adds	r2, r7, r0
 8000920:	4907      	ldr	r1, [pc, #28]	; (8000940 <Stm32BTL_RecvCommand+0x40>)
 8000922:	8812      	ldrh	r2, [r2, #0]
 8000924:	525a      	strh	r2, [r3, r1]
	HAL_UART_Receive_IT(&hTargetUart, rx_buff, rx_byte);	/* DMAに変更予定 */
 8000926:	183b      	adds	r3, r7, r0
 8000928:	881a      	ldrh	r2, [r3, #0]
 800092a:	68f9      	ldr	r1, [r7, #12]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <Stm32BTL_RecvCommand+0x44>)
 800092e:	0018      	movs	r0, r3
 8000930:	f002 ffc4 	bl	80038bc <HAL_UART_Receive_IT>
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000090 	.word	0x20000090
 8000940:	0000020a 	.word	0x0000020a
 8000944:	2000056c 	.word	0x2000056c

08000948 <Stm32BTL_Connent>:

static void Stm32BTL_Connent(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af02      	add	r7, sp, #8
	/* タイムアウトエラーの処理が必要 */
	Stm32BTL_SendRecvCommand((uint8_t*)CMD_BOOT_LOADER_MODE,1,stm32_btl_com.rx_buff,1,Stm32BTL_CallBack_Connent);
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <Stm32BTL_Connent+0x1c>)
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <Stm32BTL_Connent+0x20>)
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <Stm32BTL_Connent+0x24>)
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	2101      	movs	r1, #1
 800095a:	f7ff ff9f 	bl	800089c <Stm32BTL_SendRecvCommand>
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000192 	.word	0x20000192
 8000968:	08008d48 	.word	0x08008d48
 800096c:	08000971 	.word	0x08000971

08000970 <Stm32BTL_CallBack_Connent>:
static void Stm32BTL_CallBack_Connent(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) {
 8000976:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <Stm32BTL_CallBack_Connent+0x90>)
 8000978:	2381      	movs	r3, #129	; 0x81
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	5cd3      	ldrb	r3, [r2, r3]
 800097e:	2b79      	cmp	r3, #121	; 0x79
 8000980:	d111      	bne.n	80009a6 <Stm32BTL_CallBack_Connent+0x36>
		len = sprintf((char*)pc_tx_buff,"ACK\r\n");
 8000982:	4a20      	ldr	r2, [pc, #128]	; (8000a04 <Stm32BTL_CallBack_Connent+0x94>)
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <Stm32BTL_CallBack_Connent+0x98>)
 8000986:	0010      	movs	r0, r2
 8000988:	0019      	movs	r1, r3
 800098a:	2306      	movs	r3, #6
 800098c:	001a      	movs	r2, r3
 800098e:	f005 fa11 	bl	8005db4 <memcpy>
 8000992:	2305      	movs	r3, #5
 8000994:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	b29a      	uxth	r2, r3
 800099a:	491a      	ldr	r1, [pc, #104]	; (8000a04 <Stm32BTL_CallBack_Connent+0x94>)
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <Stm32BTL_CallBack_Connent+0x9c>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 f880 	bl	8003aa4 <HAL_UART_Transmit_DMA>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"unknown\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 80009a4:	e028      	b.n	80009f8 <Stm32BTL_CallBack_Connent+0x88>
	else if(stm32_btl_com.rx_buff[0] == NACK) {
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <Stm32BTL_CallBack_Connent+0x90>)
 80009a8:	2381      	movs	r3, #129	; 0x81
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	5cd3      	ldrb	r3, [r2, r3]
 80009ae:	2b1f      	cmp	r3, #31
 80009b0:	d111      	bne.n	80009d6 <Stm32BTL_CallBack_Connent+0x66>
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <Stm32BTL_CallBack_Connent+0x94>)
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <Stm32BTL_CallBack_Connent+0xa0>)
 80009b6:	0010      	movs	r0, r2
 80009b8:	0019      	movs	r1, r3
 80009ba:	2307      	movs	r3, #7
 80009bc:	001a      	movs	r2, r3
 80009be:	f005 f9f9 	bl	8005db4 <memcpy>
 80009c2:	2306      	movs	r3, #6
 80009c4:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <Stm32BTL_CallBack_Connent+0x94>)
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <Stm32BTL_CallBack_Connent+0x9c>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f003 f868 	bl	8003aa4 <HAL_UART_Transmit_DMA>
}
 80009d4:	e010      	b.n	80009f8 <Stm32BTL_CallBack_Connent+0x88>
		len = sprintf((char*)pc_tx_buff,"unknown\r\n");
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <Stm32BTL_CallBack_Connent+0x94>)
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <Stm32BTL_CallBack_Connent+0xa4>)
 80009da:	0010      	movs	r0, r2
 80009dc:	0019      	movs	r1, r3
 80009de:	230a      	movs	r3, #10
 80009e0:	001a      	movs	r2, r3
 80009e2:	f005 f9e7 	bl	8005db4 <memcpy>
 80009e6:	2309      	movs	r3, #9
 80009e8:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4905      	ldr	r1, [pc, #20]	; (8000a04 <Stm32BTL_CallBack_Connent+0x94>)
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <Stm32BTL_CallBack_Connent+0x9c>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 f856 	bl	8003aa4 <HAL_UART_Transmit_DMA>
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b002      	add	sp, #8
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000090 	.word	0x20000090
 8000a04:	20000368 	.word	0x20000368
 8000a08:	08006604 	.word	0x08006604
 8000a0c:	200005f8 	.word	0x200005f8
 8000a10:	0800660c 	.word	0x0800660c
 8000a14:	08006614 	.word	0x08006614

08000a18 <Stm32BTL_CMD_GET>:

static void Stm32BTL_CMD_GET(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af02      	add	r7, sp, #8
	Stm32BTL_SendRecvCommand((uint8_t*)BTL_CMD_GET,2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack1_GET);
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <Stm32BTL_CMD_GET+0x1c>)
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <Stm32BTL_CMD_GET+0x20>)
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <Stm32BTL_CMD_GET+0x24>)
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	2301      	movs	r3, #1
 8000a28:	2102      	movs	r1, #2
 8000a2a:	f7ff ff37 	bl	800089c <Stm32BTL_SendRecvCommand>
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000192 	.word	0x20000192
 8000a38:	08008d4c 	.word	0x08008d4c
 8000a3c:	08000a41 	.word	0x08000a41

08000a40 <Stm32BTL_CMD_CallBack1_GET>:

static void Stm32BTL_CMD_CallBack1_GET(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) {
 8000a46:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <Stm32BTL_CMD_CallBack1_GET+0x4c>)
 8000a48:	2381      	movs	r3, #129	; 0x81
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	5cd3      	ldrb	r3, [r2, r3]
 8000a4e:	2b79      	cmp	r3, #121	; 0x79
 8000a50:	d106      	bne.n	8000a60 <Stm32BTL_CMD_CallBack1_GET+0x20>
		Stm32BTL_RecvCommand(stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack2_GET);
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <Stm32BTL_CMD_CallBack1_GET+0x50>)
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <Stm32BTL_CMD_CallBack1_GET+0x54>)
 8000a56:	2101      	movs	r1, #1
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff51 	bl	8000900 <Stm32BTL_RecvCommand>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8000a5e:	e010      	b.n	8000a82 <Stm32BTL_CMD_CallBack1_GET+0x42>
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <Stm32BTL_CMD_CallBack1_GET+0x58>)
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <Stm32BTL_CMD_CallBack1_GET+0x5c>)
 8000a64:	0010      	movs	r0, r2
 8000a66:	0019      	movs	r1, r3
 8000a68:	2307      	movs	r3, #7
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	f005 f9a2 	bl	8005db4 <memcpy>
 8000a70:	2306      	movs	r3, #6
 8000a72:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <Stm32BTL_CMD_CallBack1_GET+0x58>)
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <Stm32BTL_CMD_CallBack1_GET+0x60>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f003 f811 	bl	8003aa4 <HAL_UART_Transmit_DMA>
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	08000aa5 	.word	0x08000aa5
 8000a94:	20000192 	.word	0x20000192
 8000a98:	20000368 	.word	0x20000368
 8000a9c:	0800660c 	.word	0x0800660c
 8000aa0:	200005f8 	.word	0x200005f8

08000aa4 <Stm32BTL_CMD_CallBack2_GET>:

static void Stm32BTL_CMD_CallBack2_GET(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
	int32_t len;
	uint16_t size = (uint16_t)stm32_btl_com.rx_buff[0] + 2;	/* ACK or NACK分加算 */
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <Stm32BTL_CMD_CallBack2_GET+0x4c>)
 8000aac:	2381      	movs	r3, #129	; 0x81
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	1dbb      	adds	r3, r7, #6
 8000ab6:	3202      	adds	r2, #2
 8000ab8:	801a      	strh	r2, [r3, #0]

	len = sprintf((char*)pc_tx_buff, "GET Size:%u\r\n",size);
 8000aba:	1dbb      	adds	r3, r7, #6
 8000abc:	881a      	ldrh	r2, [r3, #0]
 8000abe:	490d      	ldr	r1, [pc, #52]	; (8000af4 <Stm32BTL_CMD_CallBack2_GET+0x50>)
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <Stm32BTL_CMD_CallBack2_GET+0x54>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f005 f988 	bl	8005dd8 <siprintf>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4909      	ldr	r1, [pc, #36]	; (8000af8 <Stm32BTL_CMD_CallBack2_GET+0x54>)
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <Stm32BTL_CMD_CallBack2_GET+0x58>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f002 ffe5 	bl	8003aa4 <HAL_UART_Transmit_DMA>

	Stm32BTL_RecvCommand(stm32_btl_com.rx_buff,size,Stm32BTL_CMD_CallBack3_GET);
 8000ada:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <Stm32BTL_CMD_CallBack2_GET+0x5c>)
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	8819      	ldrh	r1, [r3, #0]
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <Stm32BTL_CMD_CallBack2_GET+0x60>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff ff0c 	bl	8000900 <Stm32BTL_RecvCommand>
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000090 	.word	0x20000090
 8000af4:	08006620 	.word	0x08006620
 8000af8:	20000368 	.word	0x20000368
 8000afc:	200005f8 	.word	0x200005f8
 8000b00:	08000b09 	.word	0x08000b09
 8000b04:	20000192 	.word	0x20000192

08000b08 <Stm32BTL_CMD_CallBack3_GET>:

static void Stm32BTL_CMD_CallBack3_GET(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint32_t len = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]

	for(i = 0; i < stm32_btl_com.rx_size -1;i++) {
 8000b12:	1dbb      	adds	r3, r7, #6
 8000b14:	2200      	movs	r2, #0
 8000b16:	801a      	strh	r2, [r3, #0]
 8000b18:	e019      	b.n	8000b4e <Stm32BTL_CMD_CallBack3_GET+0x46>
		len += sprintf((char*)pc_tx_buff + len,"%02x ",stm32_btl_com.rx_buff[i]);
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000b1e:	18d0      	adds	r0, r2, r3
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	881a      	ldrh	r2, [r3, #0]
 8000b24:	4936      	ldr	r1, [pc, #216]	; (8000c00 <Stm32BTL_CMD_CallBack3_GET+0xf8>)
 8000b26:	2381      	movs	r3, #129	; 0x81
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	188a      	adds	r2, r1, r2
 8000b2c:	18d3      	adds	r3, r2, r3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	4b34      	ldr	r3, [pc, #208]	; (8000c04 <Stm32BTL_CMD_CallBack3_GET+0xfc>)
 8000b34:	0019      	movs	r1, r3
 8000b36:	f005 f94f 	bl	8005dd8 <siprintf>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	189b      	adds	r3, r3, r2
 8000b42:	603b      	str	r3, [r7, #0]
	for(i = 0; i < stm32_btl_com.rx_size -1;i++) {
 8000b44:	1dbb      	adds	r3, r7, #6
 8000b46:	881a      	ldrh	r2, [r3, #0]
 8000b48:	1dbb      	adds	r3, r7, #6
 8000b4a:	3201      	adds	r2, #1
 8000b4c:	801a      	strh	r2, [r3, #0]
 8000b4e:	1dbb      	adds	r3, r7, #6
 8000b50:	881a      	ldrh	r2, [r3, #0]
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <Stm32BTL_CMD_CallBack3_GET+0xf8>)
 8000b54:	492c      	ldr	r1, [pc, #176]	; (8000c08 <Stm32BTL_CMD_CallBack3_GET+0x100>)
 8000b56:	5a5b      	ldrh	r3, [r3, r1]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dbdd      	blt.n	8000b1a <Stm32BTL_CMD_CallBack3_GET+0x12>
	}

	if(stm32_btl_com.rx_buff[i] == ACK) {
 8000b5e:	1dbb      	adds	r3, r7, #6
 8000b60:	881a      	ldrh	r2, [r3, #0]
 8000b62:	4927      	ldr	r1, [pc, #156]	; (8000c00 <Stm32BTL_CMD_CallBack3_GET+0xf8>)
 8000b64:	2381      	movs	r3, #129	; 0x81
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	188a      	adds	r2, r1, r2
 8000b6a:	18d3      	adds	r3, r2, r3
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b79      	cmp	r3, #121	; 0x79
 8000b70:	d10f      	bne.n	8000b92 <Stm32BTL_CMD_CallBack3_GET+0x8a>
		len += sprintf((char*)pc_tx_buff + len,"\r\nGET ACK\r\n");
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000b76:	18d2      	adds	r2, r2, r3
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <Stm32BTL_CMD_CallBack3_GET+0x104>)
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	230c      	movs	r3, #12
 8000b80:	001a      	movs	r2, r3
 8000b82:	f005 f917 	bl	8005db4 <memcpy>
 8000b86:	230b      	movs	r3, #11
 8000b88:	001a      	movs	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	189b      	adds	r3, r3, r2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	e028      	b.n	8000be4 <Stm32BTL_CMD_CallBack3_GET+0xdc>
	}
	else if(stm32_btl_com.rx_buff[i] == NACK) {
 8000b92:	1dbb      	adds	r3, r7, #6
 8000b94:	881a      	ldrh	r2, [r3, #0]
 8000b96:	491a      	ldr	r1, [pc, #104]	; (8000c00 <Stm32BTL_CMD_CallBack3_GET+0xf8>)
 8000b98:	2381      	movs	r3, #129	; 0x81
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	188a      	adds	r2, r1, r2
 8000b9e:	18d3      	adds	r3, r2, r3
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b1f      	cmp	r3, #31
 8000ba4:	d10f      	bne.n	8000bc6 <Stm32BTL_CMD_CallBack3_GET+0xbe>
		len += sprintf((char*)pc_tx_buff + len,"\r\nGET NACK\r\n");
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000baa:	18d2      	adds	r2, r2, r3
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <Stm32BTL_CMD_CallBack3_GET+0x108>)
 8000bae:	0010      	movs	r0, r2
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	230d      	movs	r3, #13
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	f005 f8fd 	bl	8005db4 <memcpy>
 8000bba:	230c      	movs	r3, #12
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	189b      	adds	r3, r3, r2
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	e00e      	b.n	8000be4 <Stm32BTL_CMD_CallBack3_GET+0xdc>
	}
	else {
		len += sprintf((char*)pc_tx_buff + len,"\r\nGET unknown\r\n");
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000bca:	18d2      	adds	r2, r2, r3
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <Stm32BTL_CMD_CallBack3_GET+0x10c>)
 8000bce:	0010      	movs	r0, r2
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	f005 f8ed 	bl	8005db4 <memcpy>
 8000bda:	230f      	movs	r3, #15
 8000bdc:	001a      	movs	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	189b      	adds	r3, r3, r2
 8000be2:	603b      	str	r3, [r7, #0]
	}
	HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4904      	ldr	r1, [pc, #16]	; (8000bfc <Stm32BTL_CMD_CallBack3_GET+0xf4>)
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <Stm32BTL_CMD_CallBack3_GET+0x110>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f002 ff59 	bl	8003aa4 <HAL_UART_Transmit_DMA>
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000368 	.word	0x20000368
 8000c00:	20000090 	.word	0x20000090
 8000c04:	08006630 	.word	0x08006630
 8000c08:	0000020a 	.word	0x0000020a
 8000c0c:	08006638 	.word	0x08006638
 8000c10:	08006644 	.word	0x08006644
 8000c14:	08006654 	.word	0x08006654
 8000c18:	200005f8 	.word	0x200005f8

08000c1c <Stm32BTL_CMD_FIRM_WRITE>:

static void Stm32BTL_CMD_FIRM_WRITE(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af02      	add	r7, sp, #8
	stm32_btl_com.firm_write_size = 0;
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <Stm32BTL_CMD_FIRM_WRITE+0x28>)
 8000c24:	2383      	movs	r3, #131	; 0x83
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	2100      	movs	r1, #0
 8000c2a:	50d1      	str	r1, [r2, r3]
		len = sprintf((char*)pc_tx_buff,"WriteMemory FirmSizeErr\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
	else {
		/* MemWriteコマンド送信 */
		Stm32BTL_SendRecvCommand((uint8_t*)BTL_CMD_WriteMemory,2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack1_FW_WriteMemory);
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <Stm32BTL_CMD_FIRM_WRITE+0x2c>)
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <Stm32BTL_CMD_FIRM_WRITE+0x30>)
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <Stm32BTL_CMD_FIRM_WRITE+0x34>)
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	f7ff fe30 	bl	800089c <Stm32BTL_SendRecvCommand>
	}
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000090 	.word	0x20000090
 8000c48:	20000192 	.word	0x20000192
 8000c4c:	08008d50 	.word	0x08008d50
 8000c50:	08000c55 	.word	0x08000c55

08000c54 <Stm32BTL_CMD_CallBack1_FW_WriteMemory>:

static void Stm32BTL_CMD_CallBack1_FW_WriteMemory(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af02      	add	r7, sp, #8
	if(stm32_btl_com.rx_buff[0] == ACK) {
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c5c:	2381      	movs	r3, #129	; 0x81
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	5cd3      	ldrb	r3, [r2, r3]
 8000c62:	2b79      	cmp	r3, #121	; 0x79
 8000c64:	d139      	bne.n	8000cda <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0x86>
		uint32_t start = G071_FIRM_START_ADDRESS + stm32_btl_com.firm_write_size;
 8000c66:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c68:	2383      	movs	r3, #131	; 0x83
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	58d3      	ldr	r3, [r2, r3]
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0512      	lsls	r2, r2, #20
 8000c72:	4694      	mov	ip, r2
 8000c74:	4463      	add	r3, ip
 8000c76:	603b      	str	r3, [r7, #0]
		stm32_btl_com.tx_buff[0] = ((start >> 24) & 0x000000ff);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	0e1b      	lsrs	r3, r3, #24
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c80:	701a      	strb	r2, [r3, #0]
		stm32_btl_com.tx_buff[1] = ((start >> 16) & 0x000000ff);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	0c1b      	lsrs	r3, r3, #16
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c8a:	705a      	strb	r2, [r3, #1]
		stm32_btl_com.tx_buff[2] = ((start >>  8) & 0x000000ff);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	0a1b      	lsrs	r3, r3, #8
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c94:	709a      	strb	r2, [r3, #2]
		stm32_btl_com.tx_buff[3] = ((start      ) & 0x000000ff);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000c9c:	70da      	strb	r2, [r3, #3]
		stm32_btl_com.tx_buff[4] = stm32_btl_com.tx_buff[0] ^ stm32_btl_com.tx_buff[1] ^ stm32_btl_com.tx_buff[2] ^ stm32_btl_com.tx_buff[3];
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000ca4:	785b      	ldrb	r3, [r3, #1]
 8000ca6:	4053      	eors	r3, r2
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000cac:	789b      	ldrb	r3, [r3, #2]
 8000cae:	4053      	eors	r3, r2
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000cb4:	78db      	ldrb	r3, [r3, #3]
 8000cb6:	4053      	eors	r3, r2
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000cbc:	711a      	strb	r2, [r3, #4]
	
		stm32_btl_com.latest_write_size = 0;
 8000cbe:	4a11      	ldr	r2, [pc, #68]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000cc0:	2384      	movs	r3, #132	; 0x84
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	50d1      	str	r1, [r2, r3]
		Stm32BTL_SendRecvCommand(stm32_btl_com.tx_buff,5,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack2_FW_WriteMemory);
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb4>)
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb0>)
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xb8>)
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	f7ff fde2 	bl	800089c <Stm32BTL_SendRecvCommand>
	else {
		int32_t len;
		len = sprintf((char*)pc_tx_buff,"WriteMemory NACK\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8000cd8:	e010      	b.n	8000cfc <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xa8>
		len = sprintf((char*)pc_tx_buff,"WriteMemory NACK\r\n");
 8000cda:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xbc>)
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xc0>)
 8000cde:	0010      	movs	r0, r2
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	2313      	movs	r3, #19
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	f005 f865 	bl	8005db4 <memcpy>
 8000cea:	2312      	movs	r3, #18
 8000cec:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4907      	ldr	r1, [pc, #28]	; (8000d10 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xbc>)
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <Stm32BTL_CMD_CallBack1_FW_WriteMemory+0xc4>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f002 fed4 	bl	8003aa4 <HAL_UART_Transmit_DMA>
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000090 	.word	0x20000090
 8000d08:	20000192 	.word	0x20000192
 8000d0c:	08000d1d 	.word	0x08000d1d
 8000d10:	20000368 	.word	0x20000368
 8000d14:	08006664 	.word	0x08006664
 8000d18:	200005f8 	.word	0x200005f8

08000d1c <Stm32BTL_CMD_CallBack2_FW_WriteMemory>:

static void Stm32BTL_CMD_CallBack2_FW_WriteMemory(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af02      	add	r7, sp, #8
		int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) { /* StartAddress CheckSum OK*/
 8000d22:	4a49      	ldr	r2, [pc, #292]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000d24:	2381      	movs	r3, #129	; 0x81
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	5cd3      	ldrb	r3, [r2, r3]
 8000d2a:	2b79      	cmp	r3, #121	; 0x79
 8000d2c:	d000      	beq.n	8000d30 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x14>
 8000d2e:	e077      	b.n	8000e20 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x104>
		uint8_t xor = 0;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
		uint8_t data;
		uint16_t i;
		uint32_t size = G071_FIRM_SIZE - stm32_btl_com.firm_write_size;
 8000d38:	4a43      	ldr	r2, [pc, #268]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000d3a:	2383      	movs	r3, #131	; 0x83
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	58d3      	ldr	r3, [r2, r3]
 8000d40:	4a42      	ldr	r2, [pc, #264]	; (8000e4c <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x130>)
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	60bb      	str	r3, [r7, #8]
		if(size == 0) {
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d111      	bne.n	8000d70 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x54>
			/* こないはず */
			len = sprintf((char*)pc_tx_buff,"WriteMemory Send Size Zero\r\n");
 8000d4c:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x134>)
 8000d4e:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x138>)
 8000d50:	0010      	movs	r0, r2
 8000d52:	0019      	movs	r1, r3
 8000d54:	231d      	movs	r3, #29
 8000d56:	001a      	movs	r2, r3
 8000d58:	f005 f82c 	bl	8005db4 <memcpy>
 8000d5c:	231c      	movs	r3, #28
 8000d5e:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	493a      	ldr	r1, [pc, #232]	; (8000e50 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x134>)
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x13c>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f002 fe9b 	bl	8003aa4 <HAL_UART_Transmit_DMA>
			return;
 8000d6e:	e068      	b.n	8000e42 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x126>
		}
		else if(size > 256) {
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d902      	bls.n	8000d80 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x64>
			size = 256;
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
		}
		stm32_btl_com.tx_buff[0] = (uint8_t)(size - 1);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000d8a:	701a      	strb	r2, [r3, #0]
		xor = stm32_btl_com.tx_buff[0];
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	4a2d      	ldr	r2, [pc, #180]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000d92:	7812      	ldrb	r2, [r2, #0]
 8000d94:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < size; i++) {
 8000d96:	230c      	movs	r3, #12
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	801a      	strh	r2, [r3, #0]
 8000d9e:	e01f      	b.n	8000de0 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0xc4>
			data = G071_FirmBinaly[stm32_btl_com.firm_write_size + i];
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000da2:	2383      	movs	r3, #131	; 0x83
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	58d2      	ldr	r2, [r2, r3]
 8000da8:	200c      	movs	r0, #12
 8000daa:	183b      	adds	r3, r7, r0
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	18d2      	adds	r2, r2, r3
 8000db0:	1cfb      	adds	r3, r7, #3
 8000db2:	492a      	ldr	r1, [pc, #168]	; (8000e5c <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x140>)
 8000db4:	5c8a      	ldrb	r2, [r1, r2]
 8000db6:	701a      	strb	r2, [r3, #0]
			stm32_btl_com.tx_buff[i + 1] = data;
 8000db8:	183b      	adds	r3, r7, r0
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000dc0:	1cf9      	adds	r1, r7, #3
 8000dc2:	7809      	ldrb	r1, [r1, #0]
 8000dc4:	54d1      	strb	r1, [r2, r3]
			xor ^= data;
 8000dc6:	220f      	movs	r2, #15
 8000dc8:	18bb      	adds	r3, r7, r2
 8000dca:	18b9      	adds	r1, r7, r2
 8000dcc:	1cfa      	adds	r2, r7, #3
 8000dce:	7809      	ldrb	r1, [r1, #0]
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	404a      	eors	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < size; i++) {
 8000dd6:	183b      	adds	r3, r7, r0
 8000dd8:	881a      	ldrh	r2, [r3, #0]
 8000dda:	183b      	adds	r3, r7, r0
 8000ddc:	3201      	adds	r2, #1
 8000dde:	801a      	strh	r2, [r3, #0]
 8000de0:	230c      	movs	r3, #12
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8d9      	bhi.n	8000da0 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x84>
		}
		stm32_btl_com.tx_buff[i + 1] = xor;
 8000dec:	230c      	movs	r3, #12
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000df6:	210f      	movs	r1, #15
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	7809      	ldrb	r1, [r1, #0]
 8000dfc:	54d1      	strb	r1, [r2, r3]

		stm32_btl_com.latest_write_size = size;
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000e00:	2384      	movs	r3, #132	; 0x84
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	50d1      	str	r1, [r2, r3]

		Stm32BTL_SendRecvCommand(stm32_btl_com.tx_buff,size+2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack3_FW_WriteMemory);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	b299      	uxth	r1, r3
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x144>)
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x12c>)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x148>)
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f7ff fd3f 	bl	800089c <Stm32BTL_SendRecvCommand>
 8000e1e:	e010      	b.n	8000e42 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x126>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"WriteMemory Address Checksum NACK\r\n");
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x134>)
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x14c>)
 8000e24:	0010      	movs	r0, r2
 8000e26:	0019      	movs	r1, r3
 8000e28:	2324      	movs	r3, #36	; 0x24
 8000e2a:	001a      	movs	r2, r3
 8000e2c:	f004 ffc2 	bl	8005db4 <memcpy>
 8000e30:	2323      	movs	r3, #35	; 0x23
 8000e32:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4905      	ldr	r1, [pc, #20]	; (8000e50 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x134>)
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <Stm32BTL_CMD_CallBack2_FW_WriteMemory+0x13c>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f002 fe31 	bl	8003aa4 <HAL_UART_Transmit_DMA>
	}
}
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b004      	add	sp, #16
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000090 	.word	0x20000090
 8000e4c:	00002648 	.word	0x00002648
 8000e50:	20000368 	.word	0x20000368
 8000e54:	08006678 	.word	0x08006678
 8000e58:	200005f8 	.word	0x200005f8
 8000e5c:	08006700 	.word	0x08006700
 8000e60:	20000192 	.word	0x20000192
 8000e64:	08000e6d 	.word	0x08000e6d
 8000e68:	08006698 	.word	0x08006698

08000e6c <Stm32BTL_CMD_CallBack3_FW_WriteMemory>:

static void Stm32BTL_CMD_CallBack3_FW_WriteMemory(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af02      	add	r7, sp, #8
	int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) { /* StartAddress CheckSum OK*/
 8000e72:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e74:	2381      	movs	r3, #129	; 0x81
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	2b79      	cmp	r3, #121	; 0x79
 8000e7c:	d12e      	bne.n	8000edc <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x70>
		stm32_btl_com.firm_write_size += stm32_btl_com.latest_write_size;
 8000e7e:	4a22      	ldr	r2, [pc, #136]	; (8000f08 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e80:	2383      	movs	r3, #131	; 0x83
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	58d2      	ldr	r2, [r2, r3]
 8000e86:	4920      	ldr	r1, [pc, #128]	; (8000f08 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e88:	2384      	movs	r3, #132	; 0x84
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	58cb      	ldr	r3, [r1, r3]
 8000e8e:	18d1      	adds	r1, r2, r3
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e92:	2383      	movs	r3, #131	; 0x83
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	50d1      	str	r1, [r2, r3]
		if(G071_FIRM_SIZE <= stm32_btl_com.firm_write_size) {
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x9c>)
 8000e9a:	2383      	movs	r3, #131	; 0x83
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	58d3      	ldr	r3, [r2, r3]
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d911      	bls.n	8000eca <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x5e>
			len = sprintf((char*)pc_tx_buff,"WriteMemory WriteComplete NoCheck\r\n");
 8000ea6:	4a1a      	ldr	r2, [pc, #104]	; (8000f10 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa4>)
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa8>)
 8000eaa:	0010      	movs	r0, r2
 8000eac:	0019      	movs	r1, r3
 8000eae:	2324      	movs	r3, #36	; 0x24
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	f004 ff7f 	bl	8005db4 <memcpy>
 8000eb6:	2323      	movs	r3, #35	; 0x23
 8000eb8:	607b      	str	r3, [r7, #4]
			HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4914      	ldr	r1, [pc, #80]	; (8000f10 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa4>)
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xac>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f002 fdee 	bl	8003aa4 <HAL_UART_Transmit_DMA>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"WriteMemory Address Checksum NACK\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8000ec8:	e019      	b.n	8000efe <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x92>
			Stm32BTL_SendRecvCommand((uint8_t*)BTL_CMD_WriteMemory,2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack1_FW_WriteMemory);
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xb0>)
 8000ecc:	4814      	ldr	r0, [pc, #80]	; (8000f20 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xb4>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xb8>)
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	f7ff fce1 	bl	800089c <Stm32BTL_SendRecvCommand>
}
 8000eda:	e010      	b.n	8000efe <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0x92>
		len = sprintf((char*)pc_tx_buff,"WriteMemory Address Checksum NACK\r\n");
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa4>)
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xbc>)
 8000ee0:	0010      	movs	r0, r2
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	2324      	movs	r3, #36	; 0x24
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	f004 ff64 	bl	8005db4 <memcpy>
 8000eec:	2323      	movs	r3, #35	; 0x23
 8000eee:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4906      	ldr	r1, [pc, #24]	; (8000f10 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xa4>)
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <Stm32BTL_CMD_CallBack3_FW_WriteMemory+0xac>)
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f002 fdd3 	bl	8003aa4 <HAL_UART_Transmit_DMA>
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	20000090 	.word	0x20000090
 8000f0c:	00002647 	.word	0x00002647
 8000f10:	20000368 	.word	0x20000368
 8000f14:	080066bc 	.word	0x080066bc
 8000f18:	200005f8 	.word	0x200005f8
 8000f1c:	20000192 	.word	0x20000192
 8000f20:	08008d50 	.word	0x08008d50
 8000f24:	08000c55 	.word	0x08000c55
 8000f28:	08006698 	.word	0x08006698

08000f2c <Stm32BTL_CMD_GlobalErase>:

static void Stm32BTL_CMD_GlobalErase(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af02      	add	r7, sp, #8
	Stm32BTL_SendRecvCommand((uint8_t*)BTL_CMD_ERASE,2,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack1_GlobalErase);
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <Stm32BTL_CMD_GlobalErase+0x1c>)
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <Stm32BTL_CMD_GlobalErase+0x20>)
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <Stm32BTL_CMD_GlobalErase+0x24>)
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	f7ff fcad 	bl	800089c <Stm32BTL_SendRecvCommand>
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000192 	.word	0x20000192
 8000f4c:	08008d54 	.word	0x08008d54
 8000f50:	08000f55 	.word	0x08000f55

08000f54 <Stm32BTL_CMD_CallBack1_GlobalErase>:

static void Stm32BTL_CMD_CallBack1_GlobalErase(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af02      	add	r7, sp, #8
	int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) {
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <Stm32BTL_CMD_CallBack1_GlobalErase+0x60>)
 8000f5c:	2381      	movs	r3, #129	; 0x81
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	5cd3      	ldrb	r3, [r2, r3]
 8000f62:	2b79      	cmp	r3, #121	; 0x79
 8000f64:	d111      	bne.n	8000f8a <Stm32BTL_CMD_CallBack1_GlobalErase+0x36>
		stm32_btl_com.tx_buff[0] = 0xff;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <Stm32BTL_CMD_CallBack1_GlobalErase+0x60>)
 8000f68:	22ff      	movs	r2, #255	; 0xff
 8000f6a:	701a      	strb	r2, [r3, #0]
		stm32_btl_com.tx_buff[1] = 0xff;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <Stm32BTL_CMD_CallBack1_GlobalErase+0x60>)
 8000f6e:	22ff      	movs	r2, #255	; 0xff
 8000f70:	705a      	strb	r2, [r3, #1]
		stm32_btl_com.tx_buff[2] = 0xff ^ 0xff;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <Stm32BTL_CMD_CallBack1_GlobalErase+0x60>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	709a      	strb	r2, [r3, #2]
		Stm32BTL_SendRecvCommand(stm32_btl_com.tx_buff,3,stm32_btl_com.rx_buff,1,Stm32BTL_CMD_CallBack2_GlobalErase);
 8000f78:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <Stm32BTL_CMD_CallBack1_GlobalErase+0x64>)
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <Stm32BTL_CMD_CallBack1_GlobalErase+0x60>)
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <Stm32BTL_CMD_CallBack1_GlobalErase+0x68>)
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2103      	movs	r1, #3
 8000f84:	f7ff fc8a 	bl	800089c <Stm32BTL_SendRecvCommand>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8000f88:	e010      	b.n	8000fac <Stm32BTL_CMD_CallBack1_GlobalErase+0x58>
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
 8000f8a:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <Stm32BTL_CMD_CallBack1_GlobalErase+0x6c>)
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <Stm32BTL_CMD_CallBack1_GlobalErase+0x70>)
 8000f8e:	0010      	movs	r0, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	2307      	movs	r3, #7
 8000f94:	001a      	movs	r2, r3
 8000f96:	f004 ff0d 	bl	8005db4 <memcpy>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <Stm32BTL_CMD_CallBack1_GlobalErase+0x6c>)
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <Stm32BTL_CMD_CallBack1_GlobalErase+0x74>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f002 fd7c 	bl	8003aa4 <HAL_UART_Transmit_DMA>
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000090 	.word	0x20000090
 8000fb8:	20000192 	.word	0x20000192
 8000fbc:	08000fcd 	.word	0x08000fcd
 8000fc0:	20000368 	.word	0x20000368
 8000fc4:	0800660c 	.word	0x0800660c
 8000fc8:	200005f8 	.word	0x200005f8

08000fcc <Stm32BTL_CMD_CallBack2_GlobalErase>:

static void Stm32BTL_CMD_CallBack2_GlobalErase(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	int32_t len;
	if(stm32_btl_com.rx_buff[0] == ACK) {
 8000fd2:	4a16      	ldr	r2, [pc, #88]	; (800102c <Stm32BTL_CMD_CallBack2_GlobalErase+0x60>)
 8000fd4:	2381      	movs	r3, #129	; 0x81
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	5cd3      	ldrb	r3, [r2, r3]
 8000fda:	2b79      	cmp	r3, #121	; 0x79
 8000fdc:	d111      	bne.n	8001002 <Stm32BTL_CMD_CallBack2_GlobalErase+0x36>
		len = sprintf((char*)pc_tx_buff,"GLOBAL ERASE\r\n");
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <Stm32BTL_CMD_CallBack2_GlobalErase+0x64>)
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <Stm32BTL_CMD_CallBack2_GlobalErase+0x68>)
 8000fe2:	0010      	movs	r0, r2
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	001a      	movs	r2, r3
 8000fea:	f004 fee3 	bl	8005db4 <memcpy>
 8000fee:	230e      	movs	r3, #14
 8000ff0:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	490e      	ldr	r1, [pc, #56]	; (8001030 <Stm32BTL_CMD_CallBack2_GlobalErase+0x64>)
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <Stm32BTL_CMD_CallBack2_GlobalErase+0x6c>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 fd52 	bl	8003aa4 <HAL_UART_Transmit_DMA>
	}
	else {
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
	}
}
 8001000:	e010      	b.n	8001024 <Stm32BTL_CMD_CallBack2_GlobalErase+0x58>
		len = sprintf((char*)pc_tx_buff,"NACK\r\n");
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <Stm32BTL_CMD_CallBack2_GlobalErase+0x64>)
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <Stm32BTL_CMD_CallBack2_GlobalErase+0x70>)
 8001006:	0010      	movs	r0, r2
 8001008:	0019      	movs	r1, r3
 800100a:	2307      	movs	r3, #7
 800100c:	001a      	movs	r2, r3
 800100e:	f004 fed1 	bl	8005db4 <memcpy>
 8001012:	2306      	movs	r3, #6
 8001014:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart2, pc_tx_buff, len);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	b29a      	uxth	r2, r3
 800101a:	4905      	ldr	r1, [pc, #20]	; (8001030 <Stm32BTL_CMD_CallBack2_GlobalErase+0x64>)
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <Stm32BTL_CMD_CallBack2_GlobalErase+0x6c>)
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fd40 	bl	8003aa4 <HAL_UART_Transmit_DMA>
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000090 	.word	0x20000090
 8001030:	20000368 	.word	0x20000368
 8001034:	080066e0 	.word	0x080066e0
 8001038:	200005f8 	.word	0x200005f8
 800103c:	0800660c 	.word	0x0800660c

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f000 fc9c 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f818 	bl	800107c <SystemClock_Config>

#if 1
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f9b4 	bl	80013b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001050:	f000 f984 	bl	800135c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001054:	f000 f8fe 	bl	8001254 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8001058:	f000 f8d8 	bl	800120c <MX_TIM14_Init>
  MX_USART4_UART_Init();
 800105c:	f000 f948 	bl	80012f0 <MX_USART4_UART_Init>
  MX_TIM3_Init();
 8001060:	f000 f87c 	bl	800115c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
#endif

	HAL_UART_Receive_DMA(&huart2, pc_rx_buff, 1);
 8001064:	4903      	ldr	r1, [pc, #12]	; (8001074 <main+0x34>)
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <main+0x38>)
 8001068:	2201      	movs	r2, #1
 800106a:	0018      	movs	r0, r3
 800106c:	f002 fdae 	bl	8003bcc <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0x30>
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	20000468 	.word	0x20000468
 8001078:	200005f8 	.word	0x200005f8

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b0a1      	sub	sp, #132	; 0x84
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	2448      	movs	r4, #72	; 0x48
 8001084:	193b      	adds	r3, r7, r4
 8001086:	0018      	movs	r0, r3
 8001088:	2338      	movs	r3, #56	; 0x38
 800108a:	001a      	movs	r2, r3
 800108c:	2100      	movs	r1, #0
 800108e:	f004 fe9a 	bl	8005dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001092:	2338      	movs	r3, #56	; 0x38
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	0018      	movs	r0, r3
 8001098:	2310      	movs	r3, #16
 800109a:	001a      	movs	r2, r3
 800109c:	2100      	movs	r1, #0
 800109e:	f004 fe92 	bl	8005dc6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	0018      	movs	r0, r3
 80010a6:	2334      	movs	r3, #52	; 0x34
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	f004 fe8b 	bl	8005dc6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f001 fa2b 	bl	8002510 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	22a0      	movs	r2, #160	; 0xa0
 80010c4:	02d2      	lsls	r2, r2, #11
 80010c6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	0021      	movs	r1, r4
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2202      	movs	r2, #2
 80010ce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2203      	movs	r2, #3
 80010d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 32;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2220      	movs	r2, #32
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2280      	movs	r2, #128	; 0x80
 80010e6:	0292      	lsls	r2, r2, #10
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	0492      	lsls	r2, r2, #18
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	22c0      	movs	r2, #192	; 0xc0
 80010f6:	05d2      	lsls	r2, r2, #23
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	0018      	movs	r0, r3
 80010fe:	f001 fa53 	bl	80025a8 <HAL_RCC_OscConfig>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001106:	f000 f9c7 	bl	8001498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	2138      	movs	r1, #56	; 0x38
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2207      	movs	r2, #7
 8001110:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2202      	movs	r2, #2
 8001116:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2102      	movs	r1, #2
 8001128:	0018      	movs	r0, r3
 800112a:	f001 fd5d 	bl	8002be8 <HAL_RCC_ClockConfig>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001132:	f000 f9b1 	bl	8001498 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2202      	movs	r2, #2
 800113a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	0018      	movs	r0, r3
 8001146:	f001 fef9 	bl	8002f3c <HAL_RCCEx_PeriphCLKConfig>
 800114a:	1e03      	subs	r3, r0, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800114e:	f000 f9a3 	bl	8001498 <Error_Handler>
  }
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b021      	add	sp, #132	; 0x84
 8001158:	bd90      	pop	{r4, r7, pc}
	...

0800115c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001162:	2310      	movs	r3, #16
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	0018      	movs	r0, r3
 8001168:	2310      	movs	r3, #16
 800116a:	001a      	movs	r2, r3
 800116c:	2100      	movs	r1, #0
 800116e:	f004 fe2a 	bl	8005dc6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	0018      	movs	r0, r3
 8001176:	230c      	movs	r3, #12
 8001178:	001a      	movs	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	f004 fe23 	bl	8005dc6 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_TIM3_Init+0xa0>)
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <MX_TIM3_Init+0xa4>)
 8001184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM3_Init+0xa0>)
 8001188:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_TIM3_Init+0xa8>)
 800118a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM3_Init+0xa0>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_TIM3_Init+0xa0>)
 8001194:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <MX_TIM3_Init+0xac>)
 8001196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_TIM3_Init+0xa0>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_TIM3_Init+0xa0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_TIM3_Init+0xa0>)
 80011a6:	0018      	movs	r0, r3
 80011a8:	f002 f880 	bl	80032ac <HAL_TIM_Base_Init>
 80011ac:	1e03      	subs	r3, r0, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011b0:	f000 f972 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b4:	2110      	movs	r1, #16
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	0152      	lsls	r2, r2, #5
 80011bc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011be:	187a      	adds	r2, r7, r1
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_TIM3_Init+0xa0>)
 80011c2:	0011      	movs	r1, r2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f002 f8f1 	bl	80033ac <HAL_TIM_ConfigClockSource>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011ce:	f000 f963 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011de:	1d3a      	adds	r2, r7, #4
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_TIM3_Init+0xa0>)
 80011e2:	0011      	movs	r1, r2
 80011e4:	0018      	movs	r0, r3
 80011e6:	f002 fabd 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80011ee:	f000 f953 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b008      	add	sp, #32
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	20000474 	.word	0x20000474
 8001200:	40000400 	.word	0x40000400
 8001204:	0000f9ff 	.word	0x0000f9ff
 8001208:	0000ffff 	.word	0x0000ffff

0800120c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001210:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_TIM14_Init+0x40>)
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <MX_TIM14_Init+0x44>)
 8001214:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_TIM14_Init+0x40>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_TIM14_Init+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 7;
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_TIM14_Init+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_TIM14_Init+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_TIM14_Init+0x40>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <MX_TIM14_Init+0x40>)
 8001236:	0018      	movs	r0, r3
 8001238:	f002 f838 	bl	80032ac <HAL_TIM_Base_Init>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001240:	f000 f92a 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	20000684 	.word	0x20000684
 8001250:	40002000 	.word	0x40002000

08001254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 800125a:	4a24      	ldr	r2, [pc, #144]	; (80012ec <MX_USART2_UART_Init+0x98>)
 800125c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 8001260:	22e1      	movs	r2, #225	; 0xe1
 8001262:	0252      	lsls	r2, r2, #9
 8001264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 800129e:	0018      	movs	r0, r3
 80012a0:	f002 fab6 	bl	8003810 <HAL_UART_Init>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d001      	beq.n	80012ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012a8:	f000 f8f6 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 80012ae:	2100      	movs	r1, #0
 80012b0:	0018      	movs	r0, r3
 80012b2:	f004 fc69 	bl	8005b88 <HAL_UARTEx_SetTxFifoThreshold>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012ba:	f000 f8ed 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	0018      	movs	r0, r3
 80012c4:	f004 fca0 	bl	8005c08 <HAL_UARTEx_SetRxFifoThreshold>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012cc:	f000 f8e4 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <MX_USART2_UART_Init+0x94>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f004 fc1e 	bl	8005b14 <HAL_UARTEx_DisableFifoMode>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f8dc 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	200005f8 	.word	0x200005f8
 80012ec:	40004400 	.word	0x40004400

080012f0 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_USART4_UART_Init+0x64>)
 80012f6:	4a18      	ldr	r2, [pc, #96]	; (8001358 <MX_USART4_UART_Init+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_USART4_UART_Init+0x64>)
 80012fc:	2296      	movs	r2, #150	; 0x96
 80012fe:	0192      	lsls	r2, r2, #6
 8001300:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_USART4_UART_Init+0x64>)
 8001304:	2280      	movs	r2, #128	; 0x80
 8001306:	0152      	lsls	r2, r2, #5
 8001308:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_USART4_UART_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_USART4_UART_Init+0x64>)
 8001312:	2280      	movs	r2, #128	; 0x80
 8001314:	00d2      	lsls	r2, r2, #3
 8001316:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_USART4_UART_Init+0x64>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_USART4_UART_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_USART4_UART_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_USART4_UART_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_USART4_UART_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <MX_USART4_UART_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <MX_USART4_UART_Init+0x64>)
 800133e:	0018      	movs	r0, r3
 8001340:	f002 fa66 	bl	8003810 <HAL_UART_Init>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <MX_USART4_UART_Init+0x5c>
  {
    Error_Handler();
 8001348:	f000 f8a6 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	2000056c 	.word	0x2000056c
 8001358:	40004c00 	.word	0x40004c00

0800135c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_DMA_Init+0x58>)
 8001364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <MX_DMA_Init+0x58>)
 8001368:	2101      	movs	r1, #1
 800136a:	430a      	orrs	r2, r1
 800136c:	639a      	str	r2, [r3, #56]	; 0x38
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_DMA_Init+0x58>)
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	2201      	movs	r2, #1
 8001374:	4013      	ands	r3, r2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2009      	movs	r0, #9
 8001380:	f000 fc44 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001384:	2009      	movs	r0, #9
 8001386:	f000 fc56 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	200a      	movs	r0, #10
 8001390:	f000 fc3c 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001394:	200a      	movs	r0, #10
 8001396:	f000 fc4e 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	200b      	movs	r0, #11
 80013a0:	f000 fc34 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 80013a4:	200b      	movs	r0, #11
 80013a6:	f000 fc46 	bl	8001c36 <HAL_NVIC_EnableIRQ>

}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b002      	add	sp, #8
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	40021000 	.word	0x40021000

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b08b      	sub	sp, #44	; 0x2c
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	2414      	movs	r4, #20
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	0018      	movs	r0, r3
 80013c4:	2314      	movs	r3, #20
 80013c6:	001a      	movs	r2, r3
 80013c8:	2100      	movs	r1, #0
 80013ca:	f004 fcfc 	bl	8005dc6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <MX_GPIO_Init+0xd8>)
 80013d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d2:	4b2f      	ldr	r3, [pc, #188]	; (8001490 <MX_GPIO_Init+0xd8>)
 80013d4:	2104      	movs	r1, #4
 80013d6:	430a      	orrs	r2, r1
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <MX_GPIO_Init+0xd8>)
 80013dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013de:	2204      	movs	r2, #4
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <MX_GPIO_Init+0xd8>)
 80013e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ea:	4b29      	ldr	r3, [pc, #164]	; (8001490 <MX_GPIO_Init+0xd8>)
 80013ec:	2120      	movs	r1, #32
 80013ee:	430a      	orrs	r2, r1
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <MX_GPIO_Init+0xd8>)
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	2220      	movs	r2, #32
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <MX_GPIO_Init+0xd8>)
 8001400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <MX_GPIO_Init+0xd8>)
 8001404:	2101      	movs	r1, #1
 8001406:	430a      	orrs	r2, r1
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <MX_GPIO_Init+0xd8>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	2201      	movs	r2, #1
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_GPIO_Init+0xd8>)
 8001418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_GPIO_Init+0xd8>)
 800141c:	2102      	movs	r1, #2
 800141e:	430a      	orrs	r2, r1
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <MX_GPIO_Init+0xd8>)
 8001424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001426:	2202      	movs	r2, #2
 8001428:	4013      	ands	r3, r2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800142e:	23a0      	movs	r3, #160	; 0xa0
 8001430:	05db      	lsls	r3, r3, #23
 8001432:	2200      	movs	r2, #0
 8001434:	2120      	movs	r1, #32
 8001436:	0018      	movs	r0, r3
 8001438:	f001 f84c 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800143c:	0021      	movs	r1, r4
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2220      	movs	r2, #32
 8001442:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2201      	movs	r2, #1
 8001448:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2202      	movs	r2, #2
 8001454:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001456:	000c      	movs	r4, r1
 8001458:	187a      	adds	r2, r7, r1
 800145a:	23a0      	movs	r3, #160	; 0xa0
 800145c:	05db      	lsls	r3, r3, #23
 800145e:	0011      	movs	r1, r2
 8001460:	0018      	movs	r0, r3
 8001462:	f000 fed3 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_BOOT0_Pin GPIO_NRST_Pin */
  GPIO_InitStruct.Pin = GPIO_BOOT0_Pin|GPIO_NRST_Pin;
 8001466:	0021      	movs	r1, r4
 8001468:	187b      	adds	r3, r7, r1
 800146a:	22c0      	movs	r2, #192	; 0xc0
 800146c:	0152      	lsls	r2, r2, #5
 800146e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	187b      	adds	r3, r7, r1
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <MX_GPIO_Init+0xdc>)
 8001480:	0019      	movs	r1, r3
 8001482:	0010      	movs	r0, r2
 8001484:	f000 fec2 	bl	800220c <HAL_GPIO_Init>

}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b00b      	add	sp, #44	; 0x2c
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	50000400 	.word	0x50000400

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_MspInit+0x4c>)
 80014ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	2201      	movs	r2, #1
 80014bc:	4013      	ands	r3, r2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_MspInit+0x4c>)
 80014c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_MspInit+0x4c>)
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	0549      	lsls	r1, r1, #21
 80014cc:	430a      	orrs	r2, r1
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_MspInit+0x4c>)
 80014d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	055b      	lsls	r3, r3, #21
 80014d8:	4013      	ands	r3, r2
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80014de:	23c0      	movs	r3, #192	; 0xc0
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 fad0 	bl	8001a88 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b002      	add	sp, #8
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000

080014f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_TIM_Base_MspInit+0x5c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10c      	bne.n	8001520 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_TIM_Base_MspInit+0x60>)
 8001508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_TIM_Base_MspInit+0x60>)
 800150c:	2102      	movs	r1, #2
 800150e:	430a      	orrs	r2, r1
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_TIM_Base_MspInit+0x60>)
 8001514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001516:	2202      	movs	r2, #2
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800151e:	e012      	b.n	8001546 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM14)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <HAL_TIM_Base_MspInit+0x64>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_TIM_Base_MspInit+0x60>)
 800152c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_TIM_Base_MspInit+0x60>)
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	0209      	lsls	r1, r1, #8
 8001534:	430a      	orrs	r2, r1
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_TIM_Base_MspInit+0x60>)
 800153a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40000400 	.word	0x40000400
 8001554:	40021000 	.word	0x40021000
 8001558:	40002000 	.word	0x40002000

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	; 0x30
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	231c      	movs	r3, #28
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	0018      	movs	r0, r3
 800156a:	2314      	movs	r3, #20
 800156c:	001a      	movs	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	f004 fc29 	bl	8005dc6 <memset>
  if(huart->Instance==USART2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a92      	ldr	r2, [pc, #584]	; (80017c4 <HAL_UART_MspInit+0x268>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d000      	beq.n	8001580 <HAL_UART_MspInit+0x24>
 800157e:	e08b      	b.n	8001698 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001580:	4b91      	ldr	r3, [pc, #580]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 8001582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001584:	4b90      	ldr	r3, [pc, #576]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0289      	lsls	r1, r1, #10
 800158a:	430a      	orrs	r2, r1
 800158c:	63da      	str	r2, [r3, #60]	; 0x3c
 800158e:	4b8e      	ldr	r3, [pc, #568]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 8001590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	029b      	lsls	r3, r3, #10
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b8a      	ldr	r3, [pc, #552]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a0:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	430a      	orrs	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
 80015a8:	4b87      	ldr	r3, [pc, #540]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	2201      	movs	r2, #1
 80015ae:	4013      	ands	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80015b4:	211c      	movs	r1, #28
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	220c      	movs	r2, #12
 80015ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	187b      	adds	r3, r7, r1
 80015be:	2202      	movs	r2, #2
 80015c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c2:	187b      	adds	r3, r7, r1
 80015c4:	2201      	movs	r2, #1
 80015c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2201      	movs	r2, #1
 80015d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	187a      	adds	r2, r7, r1
 80015d6:	23a0      	movs	r3, #160	; 0xa0
 80015d8:	05db      	lsls	r3, r3, #23
 80015da:	0011      	movs	r1, r2
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 fe15 	bl	800220c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel3;
 80015e2:	4b7a      	ldr	r3, [pc, #488]	; (80017cc <HAL_UART_MspInit+0x270>)
 80015e4:	4a7a      	ldr	r2, [pc, #488]	; (80017d0 <HAL_UART_MspInit+0x274>)
 80015e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80015e8:	4b78      	ldr	r3, [pc, #480]	; (80017cc <HAL_UART_MspInit+0x270>)
 80015ea:	2234      	movs	r2, #52	; 0x34
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ee:	4b77      	ldr	r3, [pc, #476]	; (80017cc <HAL_UART_MspInit+0x270>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b75      	ldr	r3, [pc, #468]	; (80017cc <HAL_UART_MspInit+0x270>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <HAL_UART_MspInit+0x270>)
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001600:	4b72      	ldr	r3, [pc, #456]	; (80017cc <HAL_UART_MspInit+0x270>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001606:	4b71      	ldr	r3, [pc, #452]	; (80017cc <HAL_UART_MspInit+0x270>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800160c:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_UART_MspInit+0x270>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001612:	4b6e      	ldr	r3, [pc, #440]	; (80017cc <HAL_UART_MspInit+0x270>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001618:	4b6c      	ldr	r3, [pc, #432]	; (80017cc <HAL_UART_MspInit+0x270>)
 800161a:	0018      	movs	r0, r3
 800161c:	f000 fb28 	bl	8001c70 <HAL_DMA_Init>
 8001620:	1e03      	subs	r3, r0, #0
 8001622:	d001      	beq.n	8001628 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001624:	f7ff ff38 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a68      	ldr	r2, [pc, #416]	; (80017cc <HAL_UART_MspInit+0x270>)
 800162c:	679a      	str	r2, [r3, #120]	; 0x78
 800162e:	4b67      	ldr	r3, [pc, #412]	; (80017cc <HAL_UART_MspInit+0x270>)
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001634:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_UART_MspInit+0x278>)
 8001636:	4a68      	ldr	r2, [pc, #416]	; (80017d8 <HAL_UART_MspInit+0x27c>)
 8001638:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800163a:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <HAL_UART_MspInit+0x278>)
 800163c:	2235      	movs	r2, #53	; 0x35
 800163e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001640:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_UART_MspInit+0x278>)
 8001642:	2210      	movs	r2, #16
 8001644:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001646:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <HAL_UART_MspInit+0x278>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800164c:	4b61      	ldr	r3, [pc, #388]	; (80017d4 <HAL_UART_MspInit+0x278>)
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001652:	4b60      	ldr	r3, [pc, #384]	; (80017d4 <HAL_UART_MspInit+0x278>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001658:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <HAL_UART_MspInit+0x278>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800165e:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_UART_MspInit+0x278>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001664:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_UART_MspInit+0x278>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800166a:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <HAL_UART_MspInit+0x278>)
 800166c:	0018      	movs	r0, r3
 800166e:	f000 faff 	bl	8001c70 <HAL_DMA_Init>
 8001672:	1e03      	subs	r3, r0, #0
 8001674:	d001      	beq.n	800167a <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 8001676:	f7ff ff0f 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a55      	ldr	r2, [pc, #340]	; (80017d4 <HAL_UART_MspInit+0x278>)
 800167e:	675a      	str	r2, [r3, #116]	; 0x74
 8001680:	4b54      	ldr	r3, [pc, #336]	; (80017d4 <HAL_UART_MspInit+0x278>)
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	201c      	movs	r0, #28
 800168c:	f000 fabe 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001690:	201c      	movs	r0, #28
 8001692:	f000 fad0 	bl	8001c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8001696:	e090      	b.n	80017ba <HAL_UART_MspInit+0x25e>
  else if(huart->Instance==USART4)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_UART_MspInit+0x280>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d000      	beq.n	80016a4 <HAL_UART_MspInit+0x148>
 80016a2:	e08a      	b.n	80017ba <HAL_UART_MspInit+0x25e>
    __HAL_RCC_USART4_CLK_ENABLE();
 80016a4:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 80016a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016a8:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0309      	lsls	r1, r1, #12
 80016ae:	430a      	orrs	r2, r1
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 80016b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	031b      	lsls	r3, r3, #12
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 80016c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c4:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34
 80016cc:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_UART_MspInit+0x26c>)
 80016ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016d8:	211c      	movs	r1, #28
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2203      	movs	r2, #3
 80016de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2202      	movs	r2, #2
 80016e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2202      	movs	r2, #2
 80016f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2204      	movs	r2, #4
 80016f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	187a      	adds	r2, r7, r1
 80016fa:	23a0      	movs	r3, #160	; 0xa0
 80016fc:	05db      	lsls	r3, r3, #23
 80016fe:	0011      	movs	r1, r2
 8001700:	0018      	movs	r0, r3
 8001702:	f000 fd83 	bl	800220c <HAL_GPIO_Init>
    hdma_usart4_tx.Instance = DMA1_Channel1;
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <HAL_UART_MspInit+0x284>)
 8001708:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <HAL_UART_MspInit+0x288>)
 800170a:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_USART4_TX;
 800170c:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_UART_MspInit+0x284>)
 800170e:	2239      	movs	r2, #57	; 0x39
 8001710:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_UART_MspInit+0x284>)
 8001714:	2210      	movs	r2, #16
 8001716:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_UART_MspInit+0x284>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <HAL_UART_MspInit+0x284>)
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_UART_MspInit+0x284>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_UART_MspInit+0x284>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_UART_MspInit+0x284>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_UART_MspInit+0x284>)
 8001738:	2200      	movs	r2, #0
 800173a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800173c:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_UART_MspInit+0x284>)
 800173e:	0018      	movs	r0, r3
 8001740:	f000 fa96 	bl	8001c70 <HAL_DMA_Init>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8001748:	f7ff fea6 	bl	8001498 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <HAL_UART_MspInit+0x284>)
 8001750:	675a      	str	r2, [r3, #116]	; 0x74
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <HAL_UART_MspInit+0x284>)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 800175a:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_UART_MspInit+0x290>)
 800175c:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 8001760:	2238      	movs	r2, #56	; 0x38
 8001762:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176a:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 8001790:	0018      	movs	r0, r3
 8001792:	f000 fa6d 	bl	8001c70 <HAL_DMA_Init>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d001      	beq.n	800179e <HAL_UART_MspInit+0x242>
      Error_Handler();
 800179a:	f7ff fe7d 	bl	8001498 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 80017a2:	679a      	str	r2, [r3, #120]	; 0x78
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_UART_MspInit+0x28c>)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201d      	movs	r0, #29
 80017b0:	f000 fa2c 	bl	8001c0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80017b4:	201d      	movs	r0, #29
 80017b6:	f000 fa3e 	bl	8001c36 <HAL_NVIC_EnableIRQ>
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b00c      	add	sp, #48	; 0x30
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40004400 	.word	0x40004400
 80017c8:	40021000 	.word	0x40021000
 80017cc:	200002b0 	.word	0x200002b0
 80017d0:	40020030 	.word	0x40020030
 80017d4:	20000510 	.word	0x20000510
 80017d8:	40020044 	.word	0x40020044
 80017dc:	40004c00 	.word	0x40004c00
 80017e0:	2000030c 	.word	0x2000030c
 80017e4:	40020008 	.word	0x40020008
 80017e8:	200004b4 	.word	0x200004b4
 80017ec:	4002001c 	.word	0x4002001c

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001818:	f000 f91c 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <DMA1_Channel1_IRQHandler+0x14>)
 800182a:	0018      	movs	r0, r3
 800182c:	f000 fbac 	bl	8001f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	2000030c 	.word	0x2000030c

0800183c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001842:	0018      	movs	r0, r3
 8001844:	f000 fba0 	bl	8001f88 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <DMA1_Channel2_3_IRQHandler+0x20>)
 800184a:	0018      	movs	r0, r3
 800184c:	f000 fb9c 	bl	8001f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	200004b4 	.word	0x200004b4
 800185c:	200002b0 	.word	0x200002b0

08001860 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8001866:	0018      	movs	r0, r3
 8001868:	f000 fb8e 	bl	8001f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	20000510 	.word	0x20000510

08001878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <USART2_IRQHandler+0x14>)
 800187e:	0018      	movs	r0, r3
 8001880:	f002 fa40 	bl	8003d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	200005f8 	.word	0x200005f8

08001890 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <USART3_4_LPUART1_IRQHandler+0x14>)
 8001896:	0018      	movs	r0, r3
 8001898:	f002 fa34 	bl	8003d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	2000056c 	.word	0x2000056c

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f004 fa42 	bl	8005d60 <__errno>
 80018dc:	0003      	movs	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	425b      	negs	r3, r3
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	18d2      	adds	r2, r2, r3
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b006      	add	sp, #24
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20009000 	.word	0x20009000
 8001908:	00000400 	.word	0x00000400
 800190c:	200002a4 	.word	0x200002a4
 8001910:	200006d0 	.word	0x200006d0

08001914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <SystemInit+0x14>)
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	0512      	lsls	r2, r2, #20
 800191e:	609a      	str	r2, [r3, #8]
#endif
}
 8001920:	46c0      	nop			; (mov r8, r8)
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800192e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001930:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001932:	e003      	b.n	800193c <LoopCopyDataInit>

08001934 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001936:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001938:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800193a:	3104      	adds	r1, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800193c:	480b      	ldr	r0, [pc, #44]	; (800196c <LoopForever+0xa>)
  ldr r3, =_edata
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <LoopForever+0xe>)
  adds r2, r0, r1
 8001940:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001942:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001944:	d3f6      	bcc.n	8001934 <CopyDataInit>
  ldr r2, =_sbss
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LoopForever+0x12>)
  b LoopFillZerobss
 8001948:	e002      	b.n	8001950 <LoopFillZerobss>

0800194a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  str  r3, [r2]
 800194c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194e:	3204      	adds	r2, #4

08001950 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <LoopForever+0x16>)
  cmp r2, r3
 8001952:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001954:	d3f9      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001956:	f7ff ffdd 	bl	8001914 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800195a:	f004 fa07 	bl	8005d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195e:	f7ff fb6f 	bl	8001040 <main>

08001962 <LoopForever>:

LoopForever:
    b LoopForever
 8001962:	e7fe      	b.n	8001962 <LoopForever>
  ldr   r0, =_estack
 8001964:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001968:	08008dfc 	.word	0x08008dfc
  ldr r0, =_sdata
 800196c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001970:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001974:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001978:	200006cc 	.word	0x200006cc

0800197c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_COMP_IRQHandler>
	...

08001980 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001986:	1dfb      	adds	r3, r7, #7
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_Init+0x3c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Init+0x3c>)
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	0049      	lsls	r1, r1, #1
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f810 	bl	80019c0 <HAL_InitTick>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d003      	beq.n	80019ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e001      	b.n	80019b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fd7a 	bl	80014a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	781b      	ldrb	r3, [r3, #0]
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40022000 	.word	0x40022000

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019c8:	230f      	movs	r3, #15
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_InitTick+0x88>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d02b      	beq.n	8001a30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_InitTick+0x8c>)
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_InitTick+0x88>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0019      	movs	r1, r3
 80019e2:	23fa      	movs	r3, #250	; 0xfa
 80019e4:	0098      	lsls	r0, r3, #2
 80019e6:	f7fe fb8d 	bl	8000104 <__udivsi3>
 80019ea:	0003      	movs	r3, r0
 80019ec:	0019      	movs	r1, r3
 80019ee:	0020      	movs	r0, r4
 80019f0:	f7fe fb88 	bl	8000104 <__udivsi3>
 80019f4:	0003      	movs	r3, r0
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f92d 	bl	8001c56 <HAL_SYSTICK_Config>
 80019fc:	1e03      	subs	r3, r0, #0
 80019fe:	d112      	bne.n	8001a26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d80a      	bhi.n	8001a1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	425b      	negs	r3, r3
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f8fc 	bl	8001c0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_InitTick+0x90>)
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e00d      	b.n	8001a38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e008      	b.n	8001a38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a26:	230f      	movs	r3, #15
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e003      	b.n	8001a38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a30:	230f      	movs	r3, #15
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b005      	add	sp, #20
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	2000000c 	.word	0x2000000c
 8001a4c:	20000004 	.word	0x20000004
 8001a50:	20000008 	.word	0x20000008

08001a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <HAL_IncTick+0x18>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_IncTick+0x1c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	18d2      	adds	r2, r2, r3
 8001a62:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <HAL_IncTick+0x18>)
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200006c4 	.word	0x200006c4
 8001a70:	2000000c 	.word	0x2000000c

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_GetTick+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	200006c4 	.word	0x200006c4

08001a88 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	fffff9ff 	.word	0xfffff9ff

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	0002      	movs	r2, r0
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac6:	d809      	bhi.n	8001adc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	231f      	movs	r3, #31
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_EnableIRQ+0x30>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4091      	lsls	r1, r2
 8001ad8:	000a      	movs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]
  }
}
 8001adc:	46c0      	nop			; (mov r8, r8)
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	0002      	movs	r2, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b7f      	cmp	r3, #127	; 0x7f
 8001afc:	d828      	bhi.n	8001b50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	089b      	lsrs	r3, r3, #2
 8001b08:	33c0      	adds	r3, #192	; 0xc0
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	589b      	ldr	r3, [r3, r2]
 8001b0e:	1dfa      	adds	r2, r7, #7
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	0011      	movs	r1, r2
 8001b14:	2203      	movs	r2, #3
 8001b16:	400a      	ands	r2, r1
 8001b18:	00d2      	lsls	r2, r2, #3
 8001b1a:	21ff      	movs	r1, #255	; 0xff
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	000a      	movs	r2, r1
 8001b20:	43d2      	mvns	r2, r2
 8001b22:	401a      	ands	r2, r3
 8001b24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	019b      	lsls	r3, r3, #6
 8001b2a:	22ff      	movs	r2, #255	; 0xff
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	0018      	movs	r0, r3
 8001b34:	2303      	movs	r3, #3
 8001b36:	4003      	ands	r3, r0
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3c:	481f      	ldr	r0, [pc, #124]	; (8001bbc <__NVIC_SetPriority+0xd4>)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	430a      	orrs	r2, r1
 8001b48:	33c0      	adds	r3, #192	; 0xc0
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b4e:	e031      	b.n	8001bb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	0019      	movs	r1, r3
 8001b58:	230f      	movs	r3, #15
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	3b08      	subs	r3, #8
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3306      	adds	r3, #6
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	3304      	adds	r3, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1dfa      	adds	r2, r7, #7
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	0011      	movs	r1, r2
 8001b70:	2203      	movs	r2, #3
 8001b72:	400a      	ands	r2, r1
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	21ff      	movs	r1, #255	; 0xff
 8001b78:	4091      	lsls	r1, r2
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	43d2      	mvns	r2, r2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	401a      	ands	r2, r3
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2303      	movs	r3, #3
 8001b92:	4003      	ands	r3, r0
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <__NVIC_SetPriority+0xd8>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	001c      	movs	r4, r3
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	4023      	ands	r3, r4
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	3306      	adds	r3, #6
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	18c3      	adds	r3, r0, r3
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b003      	add	sp, #12
 8001bba:	bd90      	pop	{r4, r7, pc}
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <SysTick_Config+0x40>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e010      	b.n	8001bfc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <SysTick_Config+0x44>)
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	3a01      	subs	r2, #1
 8001be0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	2301      	movs	r3, #1
 8001be4:	425b      	negs	r3, r3
 8001be6:	2103      	movs	r1, #3
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff ff7d 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SysTick_Config+0x44>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x44>)
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b002      	add	sp, #8
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	00ffffff 	.word	0x00ffffff
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	210f      	movs	r1, #15
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b004      	add	sp, #16
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f7ff ff33 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b002      	add	sp, #8
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7ff ffaf 	bl	8001bc4 <SysTick_Config>
 8001c66:	0003      	movs	r3, r0
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e077      	b.n	8001d72 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a3d      	ldr	r2, [pc, #244]	; (8001d7c <HAL_DMA_Init+0x10c>)
 8001c88:	4694      	mov	ip, r2
 8001c8a:	4463      	add	r3, ip
 8001c8c:	2114      	movs	r1, #20
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7fe fa38 	bl	8000104 <__udivsi3>
 8001c94:	0003      	movs	r3, r0
 8001c96:	009a      	lsls	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2225      	movs	r2, #37	; 0x25
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4934      	ldr	r1, [pc, #208]	; (8001d80 <HAL_DMA_Init+0x110>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 fa3d 	bl	800216c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	01db      	lsls	r3, r3, #7
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d102      	bne.n	8001d04 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	21ff      	movs	r1, #255	; 0xff
 8001d0e:	400a      	ands	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d1a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d011      	beq.n	8001d48 <HAL_DMA_Init+0xd8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d80d      	bhi.n	8001d48 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f000 fa48 	bl	80021c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	e008      	b.n	8001d5a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2225      	movs	r2, #37	; 0x25
 8001d64:	2101      	movs	r1, #1
 8001d66:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b002      	add	sp, #8
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	bffdfff8 	.word	0xbffdfff8
 8001d80:	ffff800f 	.word	0xffff800f

08001d84 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d92:	2317      	movs	r3, #23
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2224      	movs	r2, #36	; 0x24
 8001d9e:	5c9b      	ldrb	r3, [r3, r2]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_DMA_Start_IT+0x24>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e070      	b.n	8001e8a <HAL_DMA_Start_IT+0x106>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2224      	movs	r2, #36	; 0x24
 8001dac:	2101      	movs	r1, #1
 8001dae:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2225      	movs	r2, #37	; 0x25
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d157      	bne.n	8001e6c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2225      	movs	r2, #37	; 0x25
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	438a      	bics	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f983 	bl	80020ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	210e      	movs	r1, #14
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e00f      	b.n	8001e20 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	210a      	movs	r1, #10
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	025b      	lsls	r3, r3, #9
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d008      	beq.n	8001e40 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	2180      	movs	r1, #128	; 0x80
 8001e3a:	0049      	lsls	r1, r1, #1
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e52:	2180      	movs	r1, #128	; 0x80
 8001e54:	0049      	lsls	r1, r1, #1
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	2100      	movs	r1, #0
 8001e72:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e74:	2317      	movs	r3, #23
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2202      	movs	r2, #2
 8001e7a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	2100      	movs	r1, #0
 8001e82:	5499      	strb	r1, [r3, r2]

  return status;
 8001e84:	2317      	movs	r3, #23
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	781b      	ldrb	r3, [r3, #0]
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b006      	add	sp, #24
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	5c9b      	ldrb	r3, [r3, r2]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_DMA_Abort_IT+0x26>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e05e      	b.n	8001f78 <HAL_DMA_Abort_IT+0xe4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2224      	movs	r2, #36	; 0x24
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2225      	movs	r2, #37	; 0x25
 8001ec6:	5c9b      	ldrb	r3, [r3, r2]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d007      	beq.n	8001ede <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e049      	b.n	8001f72 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	210e      	movs	r1, #14
 8001eea:	438a      	bics	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	438a      	bics	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	491d      	ldr	r1, [pc, #116]	; (8001f80 <HAL_DMA_Abort_IT+0xec>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_DMA_Abort_IT+0xf0>)
 8001f10:	6859      	ldr	r1, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	221c      	movs	r2, #28
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_DMA_Abort_IT+0xf0>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00c      	beq.n	8001f50 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f40:	490f      	ldr	r1, [pc, #60]	; (8001f80 <HAL_DMA_Abort_IT+0xec>)
 8001f42:	400a      	ands	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001f4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2225      	movs	r2, #37	; 0x25
 8001f54:	2101      	movs	r1, #1
 8001f56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2224      	movs	r2, #36	; 0x24
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	0010      	movs	r0, r2
 8001f70:	4798      	blx	r3
    }
  }
  return status;
 8001f72:	230f      	movs	r3, #15
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	781b      	ldrb	r3, [r3, #0]
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b004      	add	sp, #16
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	fffffeff 	.word	0xfffffeff
 8001f84:	40020000 	.word	0x40020000

08001f88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001f90:	4b55      	ldr	r3, [pc, #340]	; (80020e8 <HAL_DMA_IRQHandler+0x160>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	221c      	movs	r2, #28
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	0013      	movs	r3, r2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d027      	beq.n	8002002 <HAL_DMA_IRQHandler+0x7a>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d023      	beq.n	8002002 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d107      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	438a      	bics	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_DMA_IRQHandler+0x160>)
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	221c      	movs	r2, #28
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	4b40      	ldr	r3, [pc, #256]	; (80020e8 <HAL_DMA_IRQHandler+0x160>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d100      	bne.n	8001ff6 <HAL_DMA_IRQHandler+0x6e>
 8001ff4:	e073      	b.n	80020de <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002000:	e06d      	b.n	80020de <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	221c      	movs	r2, #28
 8002008:	4013      	ands	r3, r2
 800200a:	2202      	movs	r2, #2
 800200c:	409a      	lsls	r2, r3
 800200e:	0013      	movs	r3, r2
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	d02e      	beq.n	8002074 <HAL_DMA_IRQHandler+0xec>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
 800201c:	d02a      	beq.n	8002074 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2220      	movs	r2, #32
 8002026:	4013      	ands	r3, r2
 8002028:	d10b      	bne.n	8002042 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	210a      	movs	r1, #10
 8002036:	438a      	bics	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2225      	movs	r2, #37	; 0x25
 800203e:	2101      	movs	r1, #1
 8002040:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_DMA_IRQHandler+0x160>)
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	221c      	movs	r2, #28
 800204c:	4013      	ands	r3, r2
 800204e:	2202      	movs	r2, #2
 8002050:	409a      	lsls	r2, r3
 8002052:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_DMA_IRQHandler+0x160>)
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	; 0x24
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d03a      	beq.n	80020de <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	0010      	movs	r0, r2
 8002070:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002072:	e034      	b.n	80020de <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	221c      	movs	r2, #28
 800207a:	4013      	ands	r3, r2
 800207c:	2208      	movs	r2, #8
 800207e:	409a      	lsls	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	d02b      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x158>
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2208      	movs	r2, #8
 800208c:	4013      	ands	r3, r2
 800208e:	d027      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	210e      	movs	r1, #14
 800209c:	438a      	bics	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_DMA_IRQHandler+0x160>)
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	221c      	movs	r2, #28
 80020aa:	4013      	ands	r3, r2
 80020ac:	2201      	movs	r2, #1
 80020ae:	409a      	lsls	r2, r3
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_DMA_IRQHandler+0x160>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2225      	movs	r2, #37	; 0x25
 80020c0:	2101      	movs	r1, #1
 80020c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	; 0x24
 80020c8:	2100      	movs	r1, #0
 80020ca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	0010      	movs	r0, r2
 80020dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	46c0      	nop			; (mov r8, r8)
}
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b004      	add	sp, #16
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40020000 	.word	0x40020000

080020ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002102:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002114:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <DMA_SetConfig+0x7c>)
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	221c      	movs	r2, #28
 8002120:	4013      	ands	r3, r2
 8002122:	2201      	movs	r2, #1
 8002124:	409a      	lsls	r2, r3
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <DMA_SetConfig+0x7c>)
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b10      	cmp	r3, #16
 800213a:	d108      	bne.n	800214e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800214c:	e007      	b.n	800215e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	60da      	str	r2, [r3, #12]
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b004      	add	sp, #16
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	40020000 	.word	0x40020000

0800216c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	001a      	movs	r2, r3
 800217a:	23ff      	movs	r3, #255	; 0xff
 800217c:	4013      	ands	r3, r2
 800217e:	3b08      	subs	r3, #8
 8002180:	2114      	movs	r1, #20
 8002182:	0018      	movs	r0, r3
 8002184:	f7fd ffbe 	bl	8000104 <__udivsi3>
 8002188:	0003      	movs	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002194:	4694      	mov	ip, r2
 8002196:	4463      	add	r3, ip
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	001a      	movs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80021a4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	221c      	movs	r2, #28
 80021aa:	4013      	ands	r3, r2
 80021ac:	2201      	movs	r2, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b004      	add	sp, #16
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	10008200 	.word	0x10008200
 80021c0:	40020880 	.word	0x40020880

080021c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	22ff      	movs	r2, #255	; 0xff
 80021d2:	4013      	ands	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021da:	4694      	mov	ip, r2
 80021dc:	4463      	add	r3, ip
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	001a      	movs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	4013      	ands	r3, r2
 80021f4:	2201      	movs	r2, #1
 80021f6:	409a      	lsls	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b004      	add	sp, #16
 8002202:	bd80      	pop	{r7, pc}
 8002204:	1000823f 	.word	0x1000823f
 8002208:	40020940 	.word	0x40020940

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	e147      	b.n	80024ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4091      	lsls	r1, r2
 8002226:	000a      	movs	r2, r1
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d100      	bne.n	8002234 <HAL_GPIO_Init+0x28>
 8002232:	e138      	b.n	80024a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x38>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b12      	cmp	r3, #18
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	58d3      	ldr	r3, [r2, r3]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2207      	movs	r2, #7
 8002256:	4013      	ands	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	409a      	lsls	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	43da      	mvns	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2107      	movs	r1, #7
 8002270:	400b      	ands	r3, r1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	409a      	lsls	r2, r3
 8002276:	0013      	movs	r3, r2
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	0092      	lsls	r2, r2, #2
 8002288:	6939      	ldr	r1, [r7, #16]
 800228a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	409a      	lsls	r2, r3
 800229a:	0013      	movs	r3, r2
 800229c:	43da      	mvns	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2203      	movs	r2, #3
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	0013      	movs	r3, r2
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d00b      	beq.n	80022e0 <HAL_GPIO_Init+0xd4>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d007      	beq.n	80022e0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d4:	2b11      	cmp	r3, #17
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b12      	cmp	r3, #18
 80022de:	d130      	bne.n	8002342 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	409a      	lsls	r2, r3
 80022ee:	0013      	movs	r3, r2
 80022f0:	43da      	mvns	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	409a      	lsls	r2, r3
 8002302:	0013      	movs	r3, r2
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002316:	2201      	movs	r2, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	2201      	movs	r2, #1
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
 8002334:	0013      	movs	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	43da      	mvns	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	409a      	lsls	r2, r3
 8002364:	0013      	movs	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	055b      	lsls	r3, r3, #21
 800237a:	4013      	ands	r3, r2
 800237c:	d100      	bne.n	8002380 <HAL_GPIO_Init+0x174>
 800237e:	e092      	b.n	80024a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002380:	4a50      	ldr	r2, [pc, #320]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3318      	adds	r3, #24
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2203      	movs	r2, #3
 8002392:	4013      	ands	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	220f      	movs	r2, #15
 8002398:	409a      	lsls	r2, r3
 800239a:	0013      	movs	r3, r2
 800239c:	43da      	mvns	r2, r3
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	23a0      	movs	r3, #160	; 0xa0
 80023a8:	05db      	lsls	r3, r3, #23
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x1ca>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a45      	ldr	r2, [pc, #276]	; (80024c8 <HAL_GPIO_Init+0x2bc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x1c6>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a44      	ldr	r2, [pc, #272]	; (80024cc <HAL_GPIO_Init+0x2c0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x1c2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a43      	ldr	r2, [pc, #268]	; (80024d0 <HAL_GPIO_Init+0x2c4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x1be>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x1cc>
 80023ca:	2305      	movs	r3, #5
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x1cc>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x1cc>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x1cc>
 80023d6:	2300      	movs	r3, #0
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	2103      	movs	r1, #3
 80023dc:	400a      	ands	r2, r1
 80023de:	00d2      	lsls	r2, r2, #3
 80023e0:	4093      	lsls	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023e8:	4936      	ldr	r1, [pc, #216]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3318      	adds	r3, #24
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023f6:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	58d3      	ldr	r3, [r2, r3]
 80023fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43da      	mvns	r2, r3
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	025b      	lsls	r3, r3, #9
 8002410:	4013      	ands	r3, r2
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800241c:	4929      	ldr	r1, [pc, #164]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 8002426:	2384      	movs	r3, #132	; 0x84
 8002428:	58d3      	ldr	r3, [r2, r3]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43da      	mvns	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	029b      	lsls	r3, r3, #10
 800243e:	4013      	ands	r3, r2
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800244a:	491e      	ldr	r1, [pc, #120]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 800244c:	2284      	movs	r2, #132	; 0x84
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	035b      	lsls	r3, r3, #13
 800246a:	4013      	ands	r3, r2
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43da      	mvns	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	039b      	lsls	r3, r3, #14
 8002494:	4013      	ands	r3, r2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3301      	adds	r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	40da      	lsrs	r2, r3
 80024b4:	1e13      	subs	r3, r2, #0
 80024b6:	d000      	beq.n	80024ba <HAL_GPIO_Init+0x2ae>
 80024b8:	e6b0      	b.n	800221c <HAL_GPIO_Init+0x10>
  }
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b006      	add	sp, #24
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	40021800 	.word	0x40021800
 80024c8:	50000400 	.word	0x50000400
 80024cc:	50000800 	.word	0x50000800
 80024d0:	50000c00 	.word	0x50000c00

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	0008      	movs	r0, r1
 80024de:	0011      	movs	r1, r2
 80024e0:	1cbb      	adds	r3, r7, #2
 80024e2:	1c02      	adds	r2, r0, #0
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	1c7b      	adds	r3, r7, #1
 80024e8:	1c0a      	adds	r2, r1, #0
 80024ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ec:	1c7b      	adds	r3, r7, #1
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f4:	1cbb      	adds	r3, r7, #2
 80024f6:	881a      	ldrh	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024fc:	e003      	b.n	8002506 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fe:	1cbb      	adds	r3, r7, #2
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a19      	ldr	r2, [pc, #100]	; (8002584 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800251e:	4013      	ands	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	429a      	cmp	r2, r3
 8002532:	d11f      	bne.n	8002574 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	0013      	movs	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	189b      	adds	r3, r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4912      	ldr	r1, [pc, #72]	; (800258c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002542:	0018      	movs	r0, r3
 8002544:	f7fd fdde 	bl	8000104 <__udivsi3>
 8002548:	0003      	movs	r3, r0
 800254a:	3301      	adds	r3, #1
 800254c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800254e:	e008      	b.n	8002562 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3b01      	subs	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e001      	b.n	8002562 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e009      	b.n	8002576 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	401a      	ands	r2, r3
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	429a      	cmp	r2, r3
 8002572:	d0ed      	beq.n	8002550 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	40007000 	.word	0x40007000
 8002584:	fffff9ff 	.word	0xfffff9ff
 8002588:	20000004 	.word	0x20000004
 800258c:	000f4240 	.word	0x000f4240

08002590 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	23e0      	movs	r3, #224	; 0xe0
 800259a:	01db      	lsls	r3, r3, #7
 800259c:	4013      	ands	r3, r2
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e304      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	4013      	ands	r3, r2
 80025c2:	d100      	bne.n	80025c6 <HAL_RCC_OscConfig+0x1e>
 80025c4:	e07c      	b.n	80026c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c6:	4bc3      	ldr	r3, [pc, #780]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2238      	movs	r2, #56	; 0x38
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d0:	4bc0      	ldr	r3, [pc, #768]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2203      	movs	r2, #3
 80025d6:	4013      	ands	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3e>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d002      	beq.n	80025ec <HAL_RCC_OscConfig+0x44>
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d10b      	bne.n	8002604 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	4bb9      	ldr	r3, [pc, #740]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	d062      	beq.n	80026be <HAL_RCC_OscConfig+0x116>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d15e      	bne.n	80026be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e2df      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	025b      	lsls	r3, r3, #9
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x78>
 8002610:	4bb0      	ldr	r3, [pc, #704]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4baf      	ldr	r3, [pc, #700]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002616:	2180      	movs	r1, #128	; 0x80
 8002618:	0249      	lsls	r1, r1, #9
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e020      	b.n	8002662 <HAL_RCC_OscConfig+0xba>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	23a0      	movs	r3, #160	; 0xa0
 8002626:	02db      	lsls	r3, r3, #11
 8002628:	429a      	cmp	r2, r3
 800262a:	d10e      	bne.n	800264a <HAL_RCC_OscConfig+0xa2>
 800262c:	4ba9      	ldr	r3, [pc, #676]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4ba8      	ldr	r3, [pc, #672]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	02c9      	lsls	r1, r1, #11
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	4ba6      	ldr	r3, [pc, #664]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4ba5      	ldr	r3, [pc, #660]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0249      	lsls	r1, r1, #9
 8002644:	430a      	orrs	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0xba>
 800264a:	4ba2      	ldr	r3, [pc, #648]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4ba1      	ldr	r3, [pc, #644]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002650:	49a1      	ldr	r1, [pc, #644]	; (80028d8 <HAL_RCC_OscConfig+0x330>)
 8002652:	400a      	ands	r2, r1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	4b9f      	ldr	r3, [pc, #636]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b9e      	ldr	r3, [pc, #632]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800265c:	499f      	ldr	r1, [pc, #636]	; (80028dc <HAL_RCC_OscConfig+0x334>)
 800265e:	400a      	ands	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d014      	beq.n	8002694 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7ff fa03 	bl	8001a74 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7ff f9fe 	bl	8001a74 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e29e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002686:	4b93      	ldr	r3, [pc, #588]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	029b      	lsls	r3, r3, #10
 800268e:	4013      	ands	r3, r2
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xcc>
 8002692:	e015      	b.n	80026c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7ff f9ee 	bl	8001a74 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269e:	f7ff f9e9 	bl	8001a74 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e289      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026b0:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	029b      	lsls	r3, r3, #10
 80026b8:	4013      	ands	r3, r2
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0xf6>
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d100      	bne.n	80026cc <HAL_RCC_OscConfig+0x124>
 80026ca:	e099      	b.n	8002800 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026cc:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2238      	movs	r2, #56	; 0x38
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d6:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2203      	movs	r2, #3
 80026dc:	4013      	ands	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_OscConfig+0x144>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d002      	beq.n	80026f2 <HAL_RCC_OscConfig+0x14a>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d135      	bne.n	800275e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f2:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	; 0x80
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4013      	ands	r3, r2
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x162>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e25c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a74      	ldr	r2, [pc, #464]	; (80028e0 <HAL_RCC_OscConfig+0x338>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	021a      	lsls	r2, r3, #8
 800271a:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800271c:	430a      	orrs	r2, r1
 800271e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d112      	bne.n	800274c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002726:	4b6b      	ldr	r3, [pc, #428]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a6e      	ldr	r2, [pc, #440]	; (80028e4 <HAL_RCC_OscConfig+0x33c>)
 800272c:	4013      	ands	r3, r2
 800272e:	0019      	movs	r1, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002736:	430a      	orrs	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800273a:	4b66      	ldr	r3, [pc, #408]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0adb      	lsrs	r3, r3, #11
 8002740:	2207      	movs	r2, #7
 8002742:	4013      	ands	r3, r2
 8002744:	4a68      	ldr	r2, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x340>)
 8002746:	40da      	lsrs	r2, r3
 8002748:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_OscConfig+0x344>)
 800274a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800274c:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <HAL_RCC_OscConfig+0x348>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff f935 	bl	80019c0 <HAL_InitTick>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d051      	beq.n	80027fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e232      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d030      	beq.n	80027c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002766:	4b5b      	ldr	r3, [pc, #364]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5e      	ldr	r2, [pc, #376]	; (80028e4 <HAL_RCC_OscConfig+0x33c>)
 800276c:	4013      	ands	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800277a:	4b56      	ldr	r3, [pc, #344]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b55      	ldr	r3, [pc, #340]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0049      	lsls	r1, r1, #1
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff f974 	bl	8001a74 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002792:	f7ff f96f 	bl	8001a74 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e20f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a4:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4013      	ands	r3, r2
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_RCC_OscConfig+0x338>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	021a      	lsls	r2, r3, #8
 80027c0:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	e01b      	b.n	8002800 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80027c8:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80027ce:	4949      	ldr	r1, [pc, #292]	; (80028f4 <HAL_RCC_OscConfig+0x34c>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7ff f94e 	bl	8001a74 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027de:	f7ff f949 	bl	8001a74 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1e9      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f0:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4013      	ands	r3, r2
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x236>
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2208      	movs	r2, #8
 8002806:	4013      	ands	r3, r2
 8002808:	d047      	beq.n	800289a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800280a:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2238      	movs	r2, #56	; 0x38
 8002810:	4013      	ands	r3, r2
 8002812:	2b18      	cmp	r3, #24
 8002814:	d10a      	bne.n	800282c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281a:	2202      	movs	r2, #2
 800281c:	4013      	ands	r3, r2
 800281e:	d03c      	beq.n	800289a <HAL_RCC_OscConfig+0x2f2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d138      	bne.n	800289a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e1cb      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d019      	beq.n	8002868 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002834:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002838:	4b26      	ldr	r3, [pc, #152]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800283a:	2101      	movs	r1, #1
 800283c:	430a      	orrs	r2, r1
 800283e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff f918 	bl	8001a74 <HAL_GetTick>
 8002844:	0003      	movs	r3, r0
 8002846:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284a:	f7ff f913 	bl	8001a74 <HAL_GetTick>
 800284e:	0002      	movs	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1b3      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800285e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d0f1      	beq.n	800284a <HAL_RCC_OscConfig+0x2a2>
 8002866:	e018      	b.n	800289a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800286a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 800286e:	2101      	movs	r1, #1
 8002870:	438a      	bics	r2, r1
 8002872:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7ff f8fe 	bl	8001a74 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287e:	f7ff f8f9 	bl	8001a74 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e199      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	2202      	movs	r2, #2
 8002896:	4013      	ands	r3, r2
 8002898:	d1f1      	bne.n	800287e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2204      	movs	r2, #4
 80028a0:	4013      	ands	r3, r2
 80028a2:	d100      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2fe>
 80028a4:	e0c6      	b.n	8002a34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	231f      	movs	r3, #31
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2238      	movs	r2, #56	; 0x38
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d11e      	bne.n	80028f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	d100      	bne.n	80028c6 <HAL_RCC_OscConfig+0x31e>
 80028c4:	e0b6      	b.n	8002a34 <HAL_RCC_OscConfig+0x48c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d000      	beq.n	80028d0 <HAL_RCC_OscConfig+0x328>
 80028ce:	e0b1      	b.n	8002a34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e177      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	fffeffff 	.word	0xfffeffff
 80028dc:	fffbffff 	.word	0xfffbffff
 80028e0:	ffff80ff 	.word	0xffff80ff
 80028e4:	ffffc7ff 	.word	0xffffc7ff
 80028e8:	00f42400 	.word	0x00f42400
 80028ec:	20000004 	.word	0x20000004
 80028f0:	20000008 	.word	0x20000008
 80028f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028f8:	4bb4      	ldr	r3, [pc, #720]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 80028fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	055b      	lsls	r3, r3, #21
 8002900:	4013      	ands	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_RCC_OscConfig+0x360>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x362>
 8002908:	2300      	movs	r3, #0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d011      	beq.n	8002932 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4baf      	ldr	r3, [pc, #700]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002912:	4bae      	ldr	r3, [pc, #696]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	0549      	lsls	r1, r1, #21
 8002918:	430a      	orrs	r2, r1
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c
 800291c:	4bab      	ldr	r3, [pc, #684]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 800291e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	055b      	lsls	r3, r3, #21
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800292a:	231f      	movs	r3, #31
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002932:	4ba7      	ldr	r3, [pc, #668]	; (8002bd0 <HAL_RCC_OscConfig+0x628>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d11a      	bne.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800293e:	4ba4      	ldr	r3, [pc, #656]	; (8002bd0 <HAL_RCC_OscConfig+0x628>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4ba3      	ldr	r3, [pc, #652]	; (8002bd0 <HAL_RCC_OscConfig+0x628>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0049      	lsls	r1, r1, #1
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800294c:	f7ff f892 	bl	8001a74 <HAL_GetTick>
 8002950:	0003      	movs	r3, r0
 8002952:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7ff f88d 	bl	8001a74 <HAL_GetTick>
 800295a:	0002      	movs	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e12d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002968:	4b99      	ldr	r3, [pc, #612]	; (8002bd0 <HAL_RCC_OscConfig+0x628>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4013      	ands	r3, r2
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x3e2>
 800297c:	4b93      	ldr	r3, [pc, #588]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 800297e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002980:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002982:	2101      	movs	r1, #1
 8002984:	430a      	orrs	r2, r1
 8002986:	65da      	str	r2, [r3, #92]	; 0x5c
 8002988:	e01c      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x404>
 8002992:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002996:	4b8d      	ldr	r3, [pc, #564]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002998:	2104      	movs	r1, #4
 800299a:	430a      	orrs	r2, r1
 800299c:	65da      	str	r2, [r3, #92]	; 0x5c
 800299e:	4b8b      	ldr	r3, [pc, #556]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 80029a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029a2:	4b8a      	ldr	r3, [pc, #552]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 80029a4:	2101      	movs	r1, #1
 80029a6:	430a      	orrs	r2, r1
 80029a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
 80029ac:	4b87      	ldr	r3, [pc, #540]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 80029ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029b0:	4b86      	ldr	r3, [pc, #536]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	438a      	bics	r2, r1
 80029b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80029b8:	4b84      	ldr	r3, [pc, #528]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 80029ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029bc:	4b83      	ldr	r3, [pc, #524]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 80029be:	2104      	movs	r1, #4
 80029c0:	438a      	bics	r2, r1
 80029c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d014      	beq.n	80029f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7ff f852 	bl	8001a74 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	e009      	b.n	80029ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7ff f84d 	bl	8001a74 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x62c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0ec      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ea:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	2202      	movs	r2, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x42e>
 80029f4:	e013      	b.n	8002a1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7ff f83d 	bl	8001a74 <HAL_GetTick>
 80029fa:	0003      	movs	r3, r0
 80029fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029fe:	e009      	b.n	8002a14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7ff f838 	bl	8001a74 <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	4a72      	ldr	r2, [pc, #456]	; (8002bd4 <HAL_RCC_OscConfig+0x62c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e0d7      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a14:	4b6d      	ldr	r3, [pc, #436]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a1e:	231f      	movs	r3, #31
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b68      	ldr	r3, [pc, #416]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a2c:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002a2e:	496a      	ldr	r1, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x630>)
 8002a30:	400a      	ands	r2, r1
 8002a32:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d100      	bne.n	8002a3e <HAL_RCC_OscConfig+0x496>
 8002a3c:	e0c1      	b.n	8002bc2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a3e:	4b63      	ldr	r3, [pc, #396]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2238      	movs	r2, #56	; 0x38
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d100      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4a4>
 8002a4a:	e081      	b.n	8002b50 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d156      	bne.n	8002b02 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b5c      	ldr	r3, [pc, #368]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002a5a:	4960      	ldr	r1, [pc, #384]	; (8002bdc <HAL_RCC_OscConfig+0x634>)
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7ff f808 	bl	8001a74 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7ff f803 	bl	8001a74 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0a3      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a7c:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	049b      	lsls	r3, r3, #18
 8002a84:	4013      	ands	r3, r2
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a88:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a54      	ldr	r2, [pc, #336]	; (8002be0 <HAL_RCC_OscConfig+0x638>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	0019      	movs	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1a      	ldr	r2, [r3, #32]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b43      	ldr	r3, [pc, #268]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002ac2:	2180      	movs	r1, #128	; 0x80
 8002ac4:	0449      	lsls	r1, r1, #17
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002aca:	4b40      	ldr	r3, [pc, #256]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	0549      	lsls	r1, r1, #21
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe ffcc 	bl	8001a74 <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe ffc7 	bl	8001a74 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e067      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	049b      	lsls	r3, r3, #18
 8002afc:	4013      	ands	r3, r2
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x53a>
 8002b00:	e05f      	b.n	8002bc2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002b08:	4934      	ldr	r1, [pc, #208]	; (8002bdc <HAL_RCC_OscConfig+0x634>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002b14:	2103      	movs	r1, #3
 8002b16:	438a      	bics	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002b20:	4930      	ldr	r1, [pc, #192]	; (8002be4 <HAL_RCC_OscConfig+0x63c>)
 8002b22:	400a      	ands	r2, r1
 8002b24:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe ffa5 	bl	8001a74 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe ffa0 	bl	8001a74 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e040      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b42:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	049b      	lsls	r3, r3, #18
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x588>
 8002b4e:	e038      	b.n	8002bc2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e033      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x624>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2203      	movs	r2, #3
 8002b66:	401a      	ands	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d126      	bne.n	8002bbe <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2270      	movs	r2, #112	; 0x70
 8002b74:	401a      	ands	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d11f      	bne.n	8002bbe <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	23fe      	movs	r3, #254	; 0xfe
 8002b82:	01db      	lsls	r3, r3, #7
 8002b84:	401a      	ands	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d116      	bne.n	8002bbe <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	23f8      	movs	r3, #248	; 0xf8
 8002b94:	039b      	lsls	r3, r3, #14
 8002b96:	401a      	ands	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10e      	bne.n	8002bbe <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	23e0      	movs	r3, #224	; 0xe0
 8002ba4:	051b      	lsls	r3, r3, #20
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	0f5b      	lsrs	r3, r3, #29
 8002bb4:	075a      	lsls	r2, r3, #29
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b008      	add	sp, #32
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	00001388 	.word	0x00001388
 8002bd8:	efffffff 	.word	0xefffffff
 8002bdc:	feffffff 	.word	0xfeffffff
 8002be0:	11c1808c 	.word	0x11c1808c
 8002be4:	eefeffff 	.word	0xeefeffff

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0e9      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b76      	ldr	r3, [pc, #472]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2207      	movs	r2, #7
 8002c02:	4013      	ands	r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d91e      	bls.n	8002c48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b73      	ldr	r3, [pc, #460]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2207      	movs	r2, #7
 8002c10:	4393      	bics	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe ff2a 	bl	8001a74 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c24:	e009      	b.n	8002c3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c26:	f7fe ff25 	bl	8001a74 <HAL_GetTick>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	4a6a      	ldr	r2, [pc, #424]	; (8002ddc <HAL_RCC_ClockConfig+0x1f4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0ca      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2207      	movs	r2, #7
 8002c40:	4013      	ands	r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1ee      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d015      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2204      	movs	r2, #4
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d006      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c5c:	4b60      	ldr	r3, [pc, #384]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c62:	21e0      	movs	r1, #224	; 0xe0
 8002c64:	01c9      	lsls	r1, r1, #7
 8002c66:	430a      	orrs	r2, r1
 8002c68:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4a5d      	ldr	r2, [pc, #372]	; (8002de4 <HAL_RCC_ClockConfig+0x1fc>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	4013      	ands	r3, r2
 8002c86:	d057      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c90:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d12b      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e097      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca8:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	049b      	lsls	r3, r3, #18
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d11f      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e08b      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc0:	4b47      	ldr	r3, [pc, #284]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d113      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e07f      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd8:	4b41      	ldr	r3, [pc, #260]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	2202      	movs	r2, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e074      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	2202      	movs	r2, #2
 8002cec:	4013      	ands	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e06d      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4b37      	ldr	r3, [pc, #220]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d08:	f7fe feb4 	bl	8001a74 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d10:	e009      	b.n	8002d26 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d12:	f7fe feaf 	bl	8001a74 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	4a2f      	ldr	r2, [pc, #188]	; (8002ddc <HAL_RCC_ClockConfig+0x1f4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e054      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2238      	movs	r2, #56	; 0x38
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d1ec      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	4013      	ands	r3, r2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d21e      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d58:	f7fe fe8c 	bl	8001a74 <HAL_GetTick>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d60:	e009      	b.n	8002d76 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d62:	f7fe fe87 	bl	8001a74 <HAL_GetTick>
 8002d66:	0002      	movs	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_RCC_ClockConfig+0x1f4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e02c      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d76:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1ee      	bne.n	8002d62 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2204      	movs	r2, #4
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_RCC_ClockConfig+0x200>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002da2:	f000 f829 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002da6:	0001      	movs	r1, r0
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_ClockConfig+0x1f8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	220f      	movs	r2, #15
 8002db0:	401a      	ands	r2, r3
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_RCC_ClockConfig+0x204>)
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	58d3      	ldr	r3, [r2, r3]
 8002db8:	221f      	movs	r2, #31
 8002dba:	4013      	ands	r3, r2
 8002dbc:	000a      	movs	r2, r1
 8002dbe:	40da      	lsrs	r2, r3
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_ClockConfig+0x208>)
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_ClockConfig+0x20c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7fe fdf9 	bl	80019c0 <HAL_InitTick>
 8002dce:	0003      	movs	r3, r0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b004      	add	sp, #16
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	00001388 	.word	0x00001388
 8002de0:	40021000 	.word	0x40021000
 8002de4:	fffff0ff 	.word	0xfffff0ff
 8002de8:	ffff8fff 	.word	0xffff8fff
 8002dec:	08008d58 	.word	0x08008d58
 8002df0:	20000004 	.word	0x20000004
 8002df4:	20000008 	.word	0x20000008

08002df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2238      	movs	r2, #56	; 0x38
 8002e04:	4013      	ands	r3, r2
 8002e06:	d10f      	bne.n	8002e28 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e08:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0adb      	lsrs	r3, r3, #11
 8002e0e:	2207      	movs	r2, #7
 8002e10:	4013      	ands	r3, r2
 8002e12:	2201      	movs	r2, #1
 8002e14:	409a      	lsls	r2, r3
 8002e16:	0013      	movs	r3, r2
 8002e18:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	4835      	ldr	r0, [pc, #212]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e1e:	f7fd f971 	bl	8000104 <__udivsi3>
 8002e22:	0003      	movs	r3, r0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	e05d      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e28:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2238      	movs	r2, #56	; 0x38
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d102      	bne.n	8002e3a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e34:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	e054      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2238      	movs	r2, #56	; 0x38
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d138      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e50:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	2207      	movs	r2, #7
 8002e58:	4013      	ands	r3, r2
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d10d      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	4824      	ldr	r0, [pc, #144]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e68:	f7fd f94c 	bl	8000104 <__udivsi3>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	0019      	movs	r1, r3
 8002e70:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	227f      	movs	r2, #127	; 0x7f
 8002e78:	4013      	ands	r3, r2
 8002e7a:	434b      	muls	r3, r1
 8002e7c:	617b      	str	r3, [r7, #20]
        break;
 8002e7e:	e00d      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	481c      	ldr	r0, [pc, #112]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e84:	f7fd f93e 	bl	8000104 <__udivsi3>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	227f      	movs	r2, #127	; 0x7f
 8002e94:	4013      	ands	r3, r2
 8002e96:	434b      	muls	r3, r1
 8002e98:	617b      	str	r3, [r7, #20]
        break;
 8002e9a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0f5b      	lsrs	r3, r3, #29
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	6978      	ldr	r0, [r7, #20]
 8002eae:	f7fd f929 	bl	8000104 <__udivsi3>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	e015      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2238      	movs	r2, #56	; 0x38
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d103      	bne.n	8002ecc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2238      	movs	r2, #56	; 0x38
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b18      	cmp	r3, #24
 8002ed6:	d103      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ed8:	23fa      	movs	r3, #250	; 0xfa
 8002eda:	01db      	lsls	r3, r3, #7
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e001      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ee4:	693b      	ldr	r3, [r7, #16]
}
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	b006      	add	sp, #24
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	00f42400 	.word	0x00f42400
 8002ef8:	007a1200 	.word	0x007a1200

08002efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f00:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f14:	f7ff fff2 	bl	8002efc <HAL_RCC_GetHCLKFreq>
 8002f18:	0004      	movs	r4, r0
 8002f1a:	f7ff fb39 	bl	8002590 <LL_RCC_GetAPB1Prescaler>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	0b1a      	lsrs	r2, r3, #12
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f24:	0092      	lsls	r2, r2, #2
 8002f26:	58d3      	ldr	r3, [r2, r3]
 8002f28:	221f      	movs	r2, #31
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	40dc      	lsrs	r4, r3
 8002f2e:	0023      	movs	r3, r4
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bdb0      	pop	{r4, r5, r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	08008d98 	.word	0x08008d98

08002f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f44:	2313      	movs	r3, #19
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f4c:	2312      	movs	r3, #18
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d100      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f60:	e0a4      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2311      	movs	r3, #17
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4bc3      	ldr	r3, [pc, #780]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	055b      	lsls	r3, r3, #21
 8002f72:	4013      	ands	r3, r2
 8002f74:	d111      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	4bc0      	ldr	r3, [pc, #768]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f7a:	4bbf      	ldr	r3, [pc, #764]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f7c:	2180      	movs	r1, #128	; 0x80
 8002f7e:	0549      	lsls	r1, r1, #21
 8002f80:	430a      	orrs	r2, r1
 8002f82:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f84:	4bbc      	ldr	r3, [pc, #752]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	055b      	lsls	r3, r3, #21
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f92:	2311      	movs	r3, #17
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2201      	movs	r2, #1
 8002f98:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f9a:	4bb8      	ldr	r3, [pc, #736]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4bb7      	ldr	r3, [pc, #732]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	0049      	lsls	r1, r1, #1
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fd64 	bl	8001a74 <HAL_GetTick>
 8002fac:	0003      	movs	r3, r0
 8002fae:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fb0:	e00b      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fe fd5f 	bl	8001a74 <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d904      	bls.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002fc0:	2313      	movs	r3, #19
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	701a      	strb	r2, [r3, #0]
        break;
 8002fc8:	e005      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fca:	4bac      	ldr	r3, [pc, #688]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d0ed      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002fd6:	2313      	movs	r3, #19
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d154      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fe0:	4ba5      	ldr	r3, [pc, #660]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fe4:	23c0      	movs	r3, #192	; 0xc0
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d019      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d014      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ffc:	4b9e      	ldr	r3, [pc, #632]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003000:	4a9f      	ldr	r2, [pc, #636]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003002:	4013      	ands	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003006:	4b9c      	ldr	r3, [pc, #624]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003008:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800300a:	4b9b      	ldr	r3, [pc, #620]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	0249      	lsls	r1, r1, #9
 8003010:	430a      	orrs	r2, r1
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003014:	4b98      	ldr	r3, [pc, #608]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003016:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003018:	4b97      	ldr	r3, [pc, #604]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800301a:	499a      	ldr	r1, [pc, #616]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800301c:	400a      	ands	r2, r1
 800301e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003020:	4b95      	ldr	r3, [pc, #596]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2201      	movs	r2, #1
 800302a:	4013      	ands	r3, r2
 800302c:	d016      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7fe fd21 	bl	8001a74 <HAL_GetTick>
 8003032:	0003      	movs	r3, r0
 8003034:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003036:	e00c      	b.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fe fd1c 	bl	8001a74 <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	4a91      	ldr	r2, [pc, #580]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d904      	bls.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8003048:	2313      	movs	r3, #19
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	2203      	movs	r2, #3
 800304e:	701a      	strb	r2, [r3, #0]
            break;
 8003050:	e004      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003052:	4b89      	ldr	r3, [pc, #548]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	2202      	movs	r2, #2
 8003058:	4013      	ands	r3, r2
 800305a:	d0ed      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800305c:	2313      	movs	r3, #19
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10a      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003066:	4b84      	ldr	r3, [pc, #528]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306a:	4a85      	ldr	r2, [pc, #532]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800306c:	4013      	ands	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003074:	4b80      	ldr	r3, [pc, #512]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003076:	430a      	orrs	r2, r1
 8003078:	65da      	str	r2, [r3, #92]	; 0x5c
 800307a:	e00c      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800307c:	2312      	movs	r3, #18
 800307e:	18fb      	adds	r3, r7, r3
 8003080:	2213      	movs	r2, #19
 8003082:	18ba      	adds	r2, r7, r2
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e005      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308a:	2312      	movs	r3, #18
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2213      	movs	r2, #19
 8003090:	18ba      	adds	r2, r7, r2
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003096:	2311      	movs	r3, #17
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b75      	ldr	r3, [pc, #468]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a4:	4b74      	ldr	r3, [pc, #464]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030a6:	4979      	ldr	r1, [pc, #484]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80030a8:	400a      	ands	r2, r1
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2201      	movs	r2, #1
 80030b2:	4013      	ands	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030b6:	4b70      	ldr	r3, [pc, #448]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	2203      	movs	r2, #3
 80030bc:	4393      	bics	r3, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c6:	430a      	orrs	r2, r1
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2202      	movs	r2, #2
 80030d0:	4013      	ands	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030d4:	4b68      	ldr	r3, [pc, #416]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	220c      	movs	r2, #12
 80030da:	4393      	bics	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030e4:	430a      	orrs	r2, r1
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2220      	movs	r2, #32
 80030ee:	4013      	ands	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030f2:	4b61      	ldr	r3, [pc, #388]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	4a66      	ldr	r2, [pc, #408]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	4b5d      	ldr	r3, [pc, #372]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003102:	430a      	orrs	r2, r1
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4013      	ands	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003112:	4b59      	ldr	r3, [pc, #356]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	4a5f      	ldr	r2, [pc, #380]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	4b55      	ldr	r3, [pc, #340]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003122:	430a      	orrs	r2, r1
 8003124:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	2380      	movs	r3, #128	; 0x80
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4013      	ands	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003132:	4b51      	ldr	r3, [pc, #324]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003138:	4013      	ands	r3, r2
 800313a:	0019      	movs	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003142:	430a      	orrs	r2, r1
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2240      	movs	r2, #64	; 0x40
 800314c:	4013      	ands	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003150:	4b49      	ldr	r3, [pc, #292]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	4a51      	ldr	r2, [pc, #324]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003160:	430a      	orrs	r2, r1
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	01db      	lsls	r3, r3, #7
 800316c:	4013      	ands	r3, r2
 800316e:	d015      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003170:	4b41      	ldr	r3, [pc, #260]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	0899      	lsrs	r1, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800317e:	430a      	orrs	r2, r1
 8003180:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	05db      	lsls	r3, r3, #23
 800318a:	429a      	cmp	r2, r3
 800318c:	d106      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800318e:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	4b39      	ldr	r3, [pc, #228]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	0249      	lsls	r1, r1, #9
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	031b      	lsls	r3, r3, #12
 80031a4:	4013      	ands	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	2240      	movs	r2, #64	; 0x40
 80031ae:	4393      	bics	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031b6:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	039b      	lsls	r3, r3, #14
 80031c4:	4013      	ands	r3, r2
 80031c6:	d016      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	4a34      	ldr	r2, [pc, #208]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d6:	4b28      	ldr	r3, [pc, #160]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031d8:	430a      	orrs	r2, r1
 80031da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	03db      	lsls	r3, r3, #15
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d106      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	0449      	lsls	r1, r1, #17
 80031f2:	430a      	orrs	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	03db      	lsls	r3, r3, #15
 80031fe:	4013      	ands	r3, r2
 8003200:	d016      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003212:	430a      	orrs	r2, r1
 8003214:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	045b      	lsls	r3, r3, #17
 800321e:	429a      	cmp	r2, r3
 8003220:	d106      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0449      	lsls	r1, r1, #17
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	4013      	ands	r3, r2
 800323a:	d016      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003242:	4013      	ands	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800324c:	430a      	orrs	r2, r1
 800324e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	01db      	lsls	r3, r3, #7
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	0249      	lsls	r1, r1, #9
 8003266:	430a      	orrs	r2, r1
 8003268:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800326a:	2312      	movs	r3, #18
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	781b      	ldrb	r3, [r3, #0]
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b006      	add	sp, #24
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40007000 	.word	0x40007000
 8003280:	fffffcff 	.word	0xfffffcff
 8003284:	fffeffff 	.word	0xfffeffff
 8003288:	00001388 	.word	0x00001388
 800328c:	efffffff 	.word	0xefffffff
 8003290:	fffff3ff 	.word	0xfffff3ff
 8003294:	fff3ffff 	.word	0xfff3ffff
 8003298:	ffcfffff 	.word	0xffcfffff
 800329c:	ffffcfff 	.word	0xffffcfff
 80032a0:	ffbfffff 	.word	0xffbfffff
 80032a4:	feffffff 	.word	0xfeffffff
 80032a8:	ffff3fff 	.word	0xffff3fff

080032ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e01e      	b.n	80032fc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	223d      	movs	r2, #61	; 0x3d
 80032c2:	5c9b      	ldrb	r3, [r3, r2]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	223c      	movs	r2, #60	; 0x3c
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7fe f90d 	bl	80014f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	223d      	movs	r2, #61	; 0x3d
 80032de:	2102      	movs	r1, #2
 80032e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3304      	adds	r3, #4
 80032ea:	0019      	movs	r1, r3
 80032ec:	0010      	movs	r0, r2
 80032ee:	f000 f91d 	bl	800352c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	223d      	movs	r2, #61	; 0x3d
 80032f6:	2101      	movs	r1, #1
 80032f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	0018      	movs	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	b002      	add	sp, #8
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	223d      	movs	r2, #61	; 0x3d
 8003310:	2102      	movs	r1, #2
 8003312:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <HAL_TIM_Base_Start+0x50>)
 800331c:	4013      	ands	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b06      	cmp	r3, #6
 8003324:	d00c      	beq.n	8003340 <HAL_TIM_Base_Start+0x3c>
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	025b      	lsls	r3, r3, #9
 800332c:	429a      	cmp	r2, r3
 800332e:	d007      	beq.n	8003340 <HAL_TIM_Base_Start+0x3c>
  {
    __HAL_TIM_ENABLE(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2101      	movs	r1, #1
 800333c:	430a      	orrs	r2, r1
 800333e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	223d      	movs	r2, #61	; 0x3d
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b004      	add	sp, #16
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	00010007 	.word	0x00010007

08003358 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	223d      	movs	r2, #61	; 0x3d
 8003364:	2102      	movs	r1, #2
 8003366:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <HAL_TIM_Base_Stop+0x4c>)
 8003370:	4013      	ands	r3, r2
 8003372:	d10d      	bne.n	8003390 <HAL_TIM_Base_Stop+0x38>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <HAL_TIM_Base_Stop+0x50>)
 800337c:	4013      	ands	r3, r2
 800337e:	d107      	bne.n	8003390 <HAL_TIM_Base_Stop+0x38>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2101      	movs	r1, #1
 800338c:	438a      	bics	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	223d      	movs	r2, #61	; 0x3d
 8003394:	2101      	movs	r1, #1
 8003396:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b002      	add	sp, #8
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	00001111 	.word	0x00001111
 80033a8:	00000444 	.word	0x00000444

080033ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	223c      	movs	r2, #60	; 0x3c
 80033ba:	5c9b      	ldrb	r3, [r3, r2]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x18>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0ab      	b.n	800351c <HAL_TIM_ConfigClockSource+0x170>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	223c      	movs	r2, #60	; 0x3c
 80033c8:	2101      	movs	r1, #1
 80033ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	223d      	movs	r2, #61	; 0x3d
 80033d0:	2102      	movs	r1, #2
 80033d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4a51      	ldr	r2, [pc, #324]	; (8003524 <HAL_TIM_ConfigClockSource+0x178>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a50      	ldr	r2, [pc, #320]	; (8003528 <HAL_TIM_ConfigClockSource+0x17c>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d100      	bne.n	80033fe <HAL_TIM_ConfigClockSource+0x52>
 80033fc:	e06b      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x12a>
 80033fe:	d80e      	bhi.n	800341e <HAL_TIM_ConfigClockSource+0x72>
 8003400:	2b10      	cmp	r3, #16
 8003402:	d100      	bne.n	8003406 <HAL_TIM_ConfigClockSource+0x5a>
 8003404:	e077      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x14a>
 8003406:	d803      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x64>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d100      	bne.n	800340e <HAL_TIM_ConfigClockSource+0x62>
 800340c:	e073      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800340e:	e07c      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003410:	2b20      	cmp	r3, #32
 8003412:	d100      	bne.n	8003416 <HAL_TIM_ConfigClockSource+0x6a>
 8003414:	e06f      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x14a>
 8003416:	2b30      	cmp	r3, #48	; 0x30
 8003418:	d100      	bne.n	800341c <HAL_TIM_ConfigClockSource+0x70>
 800341a:	e06c      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800341c:	e075      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800341e:	2b70      	cmp	r3, #112	; 0x70
 8003420:	d00e      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0x94>
 8003422:	d804      	bhi.n	800342e <HAL_TIM_ConfigClockSource+0x82>
 8003424:	2b50      	cmp	r3, #80	; 0x50
 8003426:	d036      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0xea>
 8003428:	2b60      	cmp	r3, #96	; 0x60
 800342a:	d044      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800342c:	e06d      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	0152      	lsls	r2, r2, #5
 8003432:	4293      	cmp	r3, r2
 8003434:	d068      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x15c>
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	0192      	lsls	r2, r2, #6
 800343a:	4293      	cmp	r3, r2
 800343c:	d017      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800343e:	e064      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f000 f968 	bl	8003724 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2277      	movs	r2, #119	; 0x77
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e04d      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6899      	ldr	r1, [r3, #8]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f000 f951 	bl	8003724 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	01c9      	lsls	r1, r1, #7
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
      break;
 8003494:	e039      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	001a      	movs	r2, r3
 80034a4:	f000 f8c2 	bl	800362c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2150      	movs	r1, #80	; 0x50
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 f91c 	bl	80036ec <TIM_ITRx_SetConfig>
      break;
 80034b4:	e029      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	001a      	movs	r2, r3
 80034c4:	f000 f8e0 	bl	8003688 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2160      	movs	r1, #96	; 0x60
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f90c 	bl	80036ec <TIM_ITRx_SetConfig>
      break;
 80034d4:	e019      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	001a      	movs	r2, r3
 80034e4:	f000 f8a2 	bl	800362c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 f8fc 	bl	80036ec <TIM_ITRx_SetConfig>
      break;
 80034f4:	e009      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	0019      	movs	r1, r3
 8003500:	0010      	movs	r0, r2
 8003502:	f000 f8f3 	bl	80036ec <TIM_ITRx_SetConfig>
      break;
 8003506:	e000      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003508:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223d      	movs	r2, #61	; 0x3d
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223c      	movs	r2, #60	; 0x3c
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}
 8003524:	ffceff88 	.word	0xffceff88
 8003528:	ffff00ff 	.word	0xffff00ff

0800352c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a34      	ldr	r2, [pc, #208]	; (8003610 <TIM_Base_SetConfig+0xe4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d008      	beq.n	8003556 <TIM_Base_SetConfig+0x2a>
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	05db      	lsls	r3, r3, #23
 800354a:	429a      	cmp	r2, r3
 800354c:	d003      	beq.n	8003556 <TIM_Base_SetConfig+0x2a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a30      	ldr	r2, [pc, #192]	; (8003614 <TIM_Base_SetConfig+0xe8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2270      	movs	r2, #112	; 0x70
 800355a:	4393      	bics	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <TIM_Base_SetConfig+0xe4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <TIM_Base_SetConfig+0x76>
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	05db      	lsls	r3, r3, #23
 8003576:	429a      	cmp	r2, r3
 8003578:	d013      	beq.n	80035a2 <TIM_Base_SetConfig+0x76>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a25      	ldr	r2, [pc, #148]	; (8003614 <TIM_Base_SetConfig+0xe8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00f      	beq.n	80035a2 <TIM_Base_SetConfig+0x76>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a24      	ldr	r2, [pc, #144]	; (8003618 <TIM_Base_SetConfig+0xec>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_Base_SetConfig+0x76>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a23      	ldr	r2, [pc, #140]	; (800361c <TIM_Base_SetConfig+0xf0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_Base_SetConfig+0x76>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a22      	ldr	r2, [pc, #136]	; (8003620 <TIM_Base_SetConfig+0xf4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_Base_SetConfig+0x76>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a21      	ldr	r2, [pc, #132]	; (8003624 <TIM_Base_SetConfig+0xf8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d108      	bne.n	80035b4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a20      	ldr	r2, [pc, #128]	; (8003628 <TIM_Base_SetConfig+0xfc>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	4393      	bics	r3, r2
 80035ba:	001a      	movs	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <TIM_Base_SetConfig+0xe4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00b      	beq.n	80035fa <TIM_Base_SetConfig+0xce>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a0d      	ldr	r2, [pc, #52]	; (800361c <TIM_Base_SetConfig+0xf0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <TIM_Base_SetConfig+0xce>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a0c      	ldr	r2, [pc, #48]	; (8003620 <TIM_Base_SetConfig+0xf4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_Base_SetConfig+0xce>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <TIM_Base_SetConfig+0xf8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d103      	bne.n	8003602 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	615a      	str	r2, [r3, #20]
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40000400 	.word	0x40000400
 8003618:	40002000 	.word	0x40002000
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	fffffcff 	.word	0xfffffcff

0800362c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	2201      	movs	r2, #1
 8003644:	4393      	bics	r3, r2
 8003646:	001a      	movs	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	22f0      	movs	r2, #240	; 0xf0
 8003656:	4393      	bics	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	220a      	movs	r2, #10
 8003668:	4393      	bics	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	621a      	str	r2, [r3, #32]
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b006      	add	sp, #24
 8003686:	bd80      	pop	{r7, pc}

08003688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	2210      	movs	r2, #16
 800369a:	4393      	bics	r3, r2
 800369c:	001a      	movs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <TIM_TI2_ConfigInputStage+0x60>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	22a0      	movs	r2, #160	; 0xa0
 80036c4:	4393      	bics	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b006      	add	sp, #24
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	ffff0fff 	.word	0xffff0fff

080036ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <TIM_ITRx_SetConfig+0x34>)
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4313      	orrs	r3, r2
 800370a:	2207      	movs	r2, #7
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	609a      	str	r2, [r3, #8]
}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	b004      	add	sp, #16
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	ffcfff8f 	.word	0xffcfff8f

08003724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <TIM_ETR_SetConfig+0x3c>)
 800373c:	4013      	ands	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	021a      	lsls	r2, r3, #8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	431a      	orrs	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	ffff00ff 	.word	0xffff00ff

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	223c      	movs	r2, #60	; 0x3c
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e040      	b.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	223c      	movs	r2, #60	; 0x3c
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	223d      	movs	r2, #61	; 0x3d
 8003788:	2102      	movs	r1, #2
 800378a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a18      	ldr	r2, [pc, #96]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2270      	movs	r2, #112	; 0x70
 80037bc:	4393      	bics	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2280      	movs	r2, #128	; 0x80
 80037ce:	4393      	bics	r3, r2
 80037d0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	223d      	movs	r2, #61	; 0x3d
 80037f0:	2101      	movs	r1, #1
 80037f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	223c      	movs	r2, #60	; 0x3c
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b004      	add	sp, #16
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	40012c00 	.word	0x40012c00
 800380c:	ff0fffff 	.word	0xff0fffff

08003810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e046      	b.n	80038b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	589b      	ldr	r3, [r3, r2]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	227c      	movs	r2, #124	; 0x7c
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fe90 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	2124      	movs	r1, #36	; 0x24
 8003842:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fbd2 	bl	8004000 <UART_SetConfig>
 800385c:	0003      	movs	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e024      	b.n	80038b0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f001 fcb9 	bl	80051e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	490d      	ldr	r1, [pc, #52]	; (80038b8 <HAL_UART_Init+0xa8>)
 8003882:	400a      	ands	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	212a      	movs	r1, #42	; 0x2a
 8003892:	438a      	bics	r2, r1
 8003894:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2101      	movs	r1, #1
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f001 fd51 	bl	8005350 <UART_CheckIdleState>
 80038ae:	0003      	movs	r3, r0
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	ffffb7ff 	.word	0xffffb7ff

080038bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2284      	movs	r2, #132	; 0x84
 80038ce:	589b      	ldr	r3, [r3, r2]
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d000      	beq.n	80038d6 <HAL_UART_Receive_IT+0x1a>
 80038d4:	e0d6      	b.n	8003a84 <HAL_UART_Receive_IT+0x1c8>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_UART_Receive_IT+0x28>
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0ce      	b.n	8003a86 <HAL_UART_Receive_IT+0x1ca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	015b      	lsls	r3, r3, #5
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d109      	bne.n	8003908 <HAL_UART_Receive_IT+0x4c>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_UART_Receive_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2201      	movs	r2, #1
 8003900:	4013      	ands	r3, r2
 8003902:	d001      	beq.n	8003908 <HAL_UART_Receive_IT+0x4c>
      {
        return  HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0be      	b.n	8003a86 <HAL_UART_Receive_IT+0x1ca>
      }
    }

    __HAL_LOCK(huart);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	227c      	movs	r2, #124	; 0x7c
 800390c:	5c9b      	ldrb	r3, [r3, r2]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_UART_Receive_IT+0x5a>
 8003912:	2302      	movs	r3, #2
 8003914:	e0b7      	b.n	8003a86 <HAL_UART_Receive_IT+0x1ca>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	227c      	movs	r2, #124	; 0x7c
 800391a:	2101      	movs	r1, #1
 800391c:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1dba      	adds	r2, r7, #6
 8003928:	215c      	movs	r1, #92	; 0x5c
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1dba      	adds	r2, r7, #6
 8003932:	215e      	movs	r1, #94	; 0x5e
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	015b      	lsls	r3, r3, #5
 8003946:	429a      	cmp	r2, r3
 8003948:	d10d      	bne.n	8003966 <HAL_UART_Receive_IT+0xaa>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_UART_Receive_IT+0xa0>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2260      	movs	r2, #96	; 0x60
 8003956:	494e      	ldr	r1, [pc, #312]	; (8003a90 <HAL_UART_Receive_IT+0x1d4>)
 8003958:	5299      	strh	r1, [r3, r2]
 800395a:	e02e      	b.n	80039ba <HAL_UART_Receive_IT+0xfe>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2260      	movs	r2, #96	; 0x60
 8003960:	21ff      	movs	r1, #255	; 0xff
 8003962:	5299      	strh	r1, [r3, r2]
 8003964:	e029      	b.n	80039ba <HAL_UART_Receive_IT+0xfe>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_UART_Receive_IT+0xce>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <HAL_UART_Receive_IT+0xc4>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2260      	movs	r2, #96	; 0x60
 800397a:	21ff      	movs	r1, #255	; 0xff
 800397c:	5299      	strh	r1, [r3, r2]
 800397e:	e01c      	b.n	80039ba <HAL_UART_Receive_IT+0xfe>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2260      	movs	r2, #96	; 0x60
 8003984:	217f      	movs	r1, #127	; 0x7f
 8003986:	5299      	strh	r1, [r3, r2]
 8003988:	e017      	b.n	80039ba <HAL_UART_Receive_IT+0xfe>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	055b      	lsls	r3, r3, #21
 8003992:	429a      	cmp	r2, r3
 8003994:	d10d      	bne.n	80039b2 <HAL_UART_Receive_IT+0xf6>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Receive_IT+0xec>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2260      	movs	r2, #96	; 0x60
 80039a2:	217f      	movs	r1, #127	; 0x7f
 80039a4:	5299      	strh	r1, [r3, r2]
 80039a6:	e008      	b.n	80039ba <HAL_UART_Receive_IT+0xfe>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2260      	movs	r2, #96	; 0x60
 80039ac:	213f      	movs	r1, #63	; 0x3f
 80039ae:	5299      	strh	r1, [r3, r2]
 80039b0:	e003      	b.n	80039ba <HAL_UART_Receive_IT+0xfe>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2260      	movs	r2, #96	; 0x60
 80039b6:	2100      	movs	r1, #0
 80039b8:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2288      	movs	r2, #136	; 0x88
 80039be:	2100      	movs	r1, #0
 80039c0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2284      	movs	r2, #132	; 0x84
 80039c6:	2122      	movs	r1, #34	; 0x22
 80039c8:	5099      	str	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	059b      	lsls	r3, r3, #22
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d12e      	bne.n	8003a44 <HAL_UART_Receive_IT+0x188>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2268      	movs	r2, #104	; 0x68
 80039ea:	5a9b      	ldrh	r3, [r3, r2]
 80039ec:	1dba      	adds	r2, r7, #6
 80039ee:	8812      	ldrh	r2, [r2, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d327      	bcc.n	8003a44 <HAL_UART_Receive_IT+0x188>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d107      	bne.n	8003a10 <HAL_UART_Receive_IT+0x154>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d103      	bne.n	8003a10 <HAL_UART_Receive_IT+0x154>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <HAL_UART_Receive_IT+0x1d8>)
 8003a0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a0e:	e002      	b.n	8003a16 <HAL_UART_Receive_IT+0x15a>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <HAL_UART_Receive_IT+0x1dc>)
 8003a14:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	227c      	movs	r2, #124	; 0x7c
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0049      	lsls	r1, r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	0549      	lsls	r1, r1, #21
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	e01d      	b.n	8003a80 <HAL_UART_Receive_IT+0x1c4>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	015b      	lsls	r3, r3, #5
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d107      	bne.n	8003a60 <HAL_UART_Receive_IT+0x1a4>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <HAL_UART_Receive_IT+0x1a4>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <HAL_UART_Receive_IT+0x1e0>)
 8003a5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a5e:	e002      	b.n	8003a66 <HAL_UART_Receive_IT+0x1aa>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a0f      	ldr	r2, [pc, #60]	; (8003aa0 <HAL_UART_Receive_IT+0x1e4>)
 8003a64:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	227c      	movs	r2, #124	; 0x7c
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2190      	movs	r1, #144	; 0x90
 8003a7a:	0049      	lsls	r1, r1, #1
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_UART_Receive_IT+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	000001ff 	.word	0x000001ff
 8003a94:	080059a9 	.word	0x080059a9
 8003a98:	0800586d 	.word	0x0800586d
 8003a9c:	080057ad 	.word	0x080057ad
 8003aa0:	080056ed 	.word	0x080056ed

08003aa4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	1dbb      	adds	r3, r7, #6
 8003ab0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	589b      	ldr	r3, [r3, r2]
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d000      	beq.n	8003abe <HAL_UART_Transmit_DMA+0x1a>
 8003abc:	e07b      	b.n	8003bb6 <HAL_UART_Transmit_DMA+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_UART_Transmit_DMA+0x28>
 8003ac4:	1dbb      	adds	r3, r7, #6
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e073      	b.n	8003bb8 <HAL_UART_Transmit_DMA+0x114>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	015b      	lsls	r3, r3, #5
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d109      	bne.n	8003af0 <HAL_UART_Transmit_DMA+0x4c>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e063      	b.n	8003bb8 <HAL_UART_Transmit_DMA+0x114>
      }
    }

    __HAL_LOCK(huart);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	227c      	movs	r2, #124	; 0x7c
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Transmit_DMA+0x5a>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e05c      	b.n	8003bb8 <HAL_UART_Transmit_DMA+0x114>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	227c      	movs	r2, #124	; 0x7c
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1dba      	adds	r2, r7, #6
 8003b10:	2154      	movs	r1, #84	; 0x54
 8003b12:	8812      	ldrh	r2, [r2, #0]
 8003b14:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1dba      	adds	r2, r7, #6
 8003b1a:	2156      	movs	r1, #86	; 0x56
 8003b1c:	8812      	ldrh	r2, [r2, #0]
 8003b1e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2288      	movs	r2, #136	; 0x88
 8003b24:	2100      	movs	r1, #0
 8003b26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	2121      	movs	r1, #33	; 0x21
 8003b2e:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02c      	beq.n	8003b92 <HAL_UART_Transmit_DMA+0xee>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_UART_Transmit_DMA+0x11c>)
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <HAL_UART_Transmit_DMA+0x120>)
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <HAL_UART_Transmit_DMA+0x124>)
 8003b4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b54:	2200      	movs	r2, #0
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b60:	0019      	movs	r1, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3328      	adds	r3, #40	; 0x28
 8003b68:	001a      	movs	r2, r3
 8003b6a:	1dbb      	adds	r3, r7, #6
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	f7fe f909 	bl	8001d84 <HAL_DMA_Start_IT>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d00d      	beq.n	8003b92 <HAL_UART_Transmit_DMA+0xee>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2288      	movs	r2, #136	; 0x88
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	227c      	movs	r2, #124	; 0x7c
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	2120      	movs	r1, #32
 8003b8c:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e012      	b.n	8003bb8 <HAL_UART_Transmit_DMA+0x114>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	227c      	movs	r2, #124	; 0x7c
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Transmit_DMA+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b004      	add	sp, #16
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	08005501 	.word	0x08005501
 8003bc4:	08005555 	.word	0x08005555
 8003bc8:	08005603 	.word	0x08005603

08003bcc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	1dbb      	adds	r3, r7, #6
 8003bd8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2284      	movs	r2, #132	; 0x84
 8003bde:	589b      	ldr	r3, [r3, r2]
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d000      	beq.n	8003be6 <HAL_UART_Receive_DMA+0x1a>
 8003be4:	e083      	b.n	8003cee <HAL_UART_Receive_DMA+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_UART_Receive_DMA+0x28>
 8003bec:	1dbb      	adds	r3, r7, #6
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Receive_DMA+0x2c>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e07b      	b.n	8003cf0 <HAL_UART_Receive_DMA+0x124>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	015b      	lsls	r3, r3, #5
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d109      	bne.n	8003c18 <HAL_UART_Receive_DMA+0x4c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_UART_Receive_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4013      	ands	r3, r2
 8003c12:	d001      	beq.n	8003c18 <HAL_UART_Receive_DMA+0x4c>
      {
        return  HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e06b      	b.n	8003cf0 <HAL_UART_Receive_DMA+0x124>
      }
    }

    __HAL_LOCK(huart);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	227c      	movs	r2, #124	; 0x7c
 8003c1c:	5c9b      	ldrb	r3, [r3, r2]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Receive_DMA+0x5a>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e064      	b.n	8003cf0 <HAL_UART_Receive_DMA+0x124>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	227c      	movs	r2, #124	; 0x7c
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1dba      	adds	r2, r7, #6
 8003c38:	215c      	movs	r1, #92	; 0x5c
 8003c3a:	8812      	ldrh	r2, [r2, #0]
 8003c3c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2288      	movs	r2, #136	; 0x88
 8003c42:	2100      	movs	r1, #0
 8003c44:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2284      	movs	r2, #132	; 0x84
 8003c4a:	2122      	movs	r1, #34	; 0x22
 8003c4c:	5099      	str	r1, [r3, r2]

    if (huart->hdmarx != NULL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02c      	beq.n	8003cb0 <HAL_UART_Receive_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5a:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <HAL_UART_Receive_DMA+0x12c>)
 8003c5c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <HAL_UART_Receive_DMA+0x130>)
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c6a:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <HAL_UART_Receive_DMA+0x134>)
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c72:	2200      	movs	r2, #0
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	0019      	movs	r1, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	001a      	movs	r2, r3
 8003c88:	1dbb      	adds	r3, r7, #6
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	f7fe f87a 	bl	8001d84 <HAL_DMA_Start_IT>
 8003c90:	1e03      	subs	r3, r0, #0
 8003c92:	d00d      	beq.n	8003cb0 <HAL_UART_Receive_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2288      	movs	r2, #136	; 0x88
 8003c98:	2110      	movs	r1, #16
 8003c9a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	227c      	movs	r2, #124	; 0x7c
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e01f      	b.n	8003cf0 <HAL_UART_Receive_DMA+0x124>
      }
    }
    __HAL_UNLOCK(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	227c      	movs	r2, #124	; 0x7c
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	0049      	lsls	r1, r1, #1
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2140      	movs	r1, #64	; 0x40
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <HAL_UART_Receive_DMA+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b004      	add	sp, #16
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	08005575 	.word	0x08005575
 8003cfc:	080055e5 	.word	0x080055e5
 8003d00:	08005603 	.word	0x08005603

08003d04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	220f      	movs	r2, #15
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d117      	bne.n	8003d62 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2220      	movs	r2, #32
 8003d36:	4013      	ands	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d104      	bne.n	8003d4c <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	055b      	lsls	r3, r3, #21
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d00a      	beq.n	8003d62 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d100      	bne.n	8003d56 <HAL_UART_IRQHandler+0x52>
 8003d54:	e127      	b.n	8003fa6 <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	0010      	movs	r0, r2
 8003d5e:	4798      	blx	r3
      }
      return;
 8003d60:	e121      	b.n	8003fa6 <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d100      	bne.n	8003d6a <HAL_UART_IRQHandler+0x66>
 8003d68:	e0c8      	b.n	8003efc <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	4a92      	ldr	r2, [pc, #584]	; (8003fb8 <HAL_UART_IRQHandler+0x2b4>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d105      	bne.n	8003d7e <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	2390      	movs	r3, #144	; 0x90
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <HAL_UART_IRQHandler+0x7a>
 8003d7c:	e0be      	b.n	8003efc <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2201      	movs	r2, #1
 8003d82:	4013      	ands	r3, r2
 8003d84:	d010      	beq.n	8003da8 <HAL_UART_IRQHandler+0xa4>
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2201      	movs	r2, #1
 8003d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2288      	movs	r2, #136	; 0x88
 8003d9c:	589b      	ldr	r3, [r3, r2]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2188      	movs	r1, #136	; 0x88
 8003da6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2202      	movs	r2, #2
 8003dac:	4013      	ands	r3, r2
 8003dae:	d00f      	beq.n	8003dd0 <HAL_UART_IRQHandler+0xcc>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2201      	movs	r2, #1
 8003db4:	4013      	ands	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2288      	movs	r2, #136	; 0x88
 8003dc4:	589b      	ldr	r3, [r3, r2]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2188      	movs	r1, #136	; 0x88
 8003dce:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d00f      	beq.n	8003df8 <HAL_UART_IRQHandler+0xf4>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d00b      	beq.n	8003df8 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2204      	movs	r2, #4
 8003de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2288      	movs	r2, #136	; 0x88
 8003dec:	589b      	ldr	r3, [r3, r2]
 8003dee:	2202      	movs	r2, #2
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2188      	movs	r1, #136	; 0x88
 8003df6:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2220      	movs	r2, #32
 8003e04:	4013      	ands	r3, r2
 8003e06:	d103      	bne.n	8003e10 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	4a6b      	ldr	r2, [pc, #428]	; (8003fb8 <HAL_UART_IRQHandler+0x2b4>)
 8003e0c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e0e:	d00b      	beq.n	8003e28 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2208      	movs	r2, #8
 8003e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2288      	movs	r2, #136	; 0x88
 8003e1c:	589b      	ldr	r3, [r3, r2]
 8003e1e:	2208      	movs	r2, #8
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2188      	movs	r1, #136	; 0x88
 8003e26:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2288      	movs	r2, #136	; 0x88
 8003e2c:	589b      	ldr	r3, [r3, r2]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d100      	bne.n	8003e34 <HAL_UART_IRQHandler+0x130>
 8003e32:	e0ba      	b.n	8003faa <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2220      	movs	r2, #32
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d011      	beq.n	8003e60 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	4013      	ands	r3, r2
 8003e42:	d104      	bne.n	8003e4e <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	055b      	lsls	r3, r3, #21
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d008      	beq.n	8003e60 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	0010      	movs	r0, r2
 8003e5e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2288      	movs	r2, #136	; 0x88
 8003e64:	589b      	ldr	r3, [r3, r2]
 8003e66:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b40      	cmp	r3, #64	; 0x40
 8003e74:	d003      	beq.n	8003e7e <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2208      	movs	r2, #8
 8003e7a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e7c:	d033      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f001 fb19 	bl	80054b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2240      	movs	r2, #64	; 0x40
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d123      	bne.n	8003edc <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d012      	beq.n	8003ed2 <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb0:	4a42      	ldr	r2, [pc, #264]	; (8003fbc <HAL_UART_IRQHandler+0x2b8>)
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fd ffeb 	bl	8001e94 <HAL_DMA_Abort_IT>
 8003ebe:	1e03      	subs	r3, r0, #0
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ecc:	0018      	movs	r0, r3
 8003ece:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	e012      	b.n	8003ef8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f88b 	bl	8003ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eda:	e00d      	b.n	8003ef8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 f886 	bl	8003ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	e008      	b.n	8003ef8 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f000 f881 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2288      	movs	r2, #136	; 0x88
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003ef6:	e058      	b.n	8003faa <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	46c0      	nop			; (mov r8, r8)
    return;
 8003efa:	e056      	b.n	8003faa <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003efc:	69fa      	ldr	r2, [r7, #28]
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	035b      	lsls	r3, r3, #13
 8003f02:	4013      	ands	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_UART_IRQHandler+0x220>
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	03db      	lsls	r3, r3, #15
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2280      	movs	r2, #128	; 0x80
 8003f16:	0352      	lsls	r2, r2, #13
 8003f18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f001 fde1 	bl	8005ae4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f22:	e045      	b.n	8003fb0 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d012      	beq.n	8003f52 <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	4013      	ands	r3, r2
 8003f32:	d104      	bne.n	8003f3e <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d033      	beq.n	8003fae <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	0010      	movs	r0, r2
 8003f4e:	4798      	blx	r3
    }
    return;
 8003f50:	e02d      	b.n	8003fae <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2240      	movs	r2, #64	; 0x40
 8003f56:	4013      	ands	r3, r2
 8003f58:	d008      	beq.n	8003f6c <HAL_UART_IRQHandler+0x268>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2240      	movs	r2, #64	; 0x40
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f001 fba6 	bl	80056b6 <UART_EndTransmit_IT>
    return;
 8003f6a:	e021      	b.n	8003fb0 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	4013      	ands	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_UART_IRQHandler+0x286>
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	05db      	lsls	r3, r3, #23
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	0018      	movs	r0, r3
 8003f84:	f001 fdbe 	bl	8005b04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f88:	e012      	b.n	8003fb0 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	045b      	lsls	r3, r3, #17
 8003f90:	4013      	ands	r3, r2
 8003f92:	d00d      	beq.n	8003fb0 <HAL_UART_IRQHandler+0x2ac>
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	da0a      	bge.n	8003fb0 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f001 fda9 	bl	8005af4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	e004      	b.n	8003fb0 <HAL_UART_IRQHandler+0x2ac>
      return;
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	e002      	b.n	8003fb0 <HAL_UART_IRQHandler+0x2ac>
    return;
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	e000      	b.n	8003fb0 <HAL_UART_IRQHandler+0x2ac>
    return;
 8003fae:	46c0      	nop			; (mov r8, r8)
  }
}
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b008      	add	sp, #32
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	10000001 	.word	0x10000001
 8003fbc:	08005689 	.word	0x08005689

08003fc0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004002:	b0a1      	sub	sp, #132	; 0x84
 8004004:	af00      	add	r7, sp, #0
 8004006:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004008:	2300      	movs	r3, #0
 800400a:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800400c:	231b      	movs	r3, #27
 800400e:	2258      	movs	r2, #88	; 0x58
 8004010:	18ba      	adds	r2, r7, r2
 8004012:	18d2      	adds	r2, r2, r3
 8004014:	2300      	movs	r3, #0
 8004016:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004018:	2300      	movs	r3, #0
 800401a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800401c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	431a      	orrs	r2, r3
 8004026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	431a      	orrs	r2, r3
 800402c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	4313      	orrs	r3, r2
 8004032:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004036:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800403a:	4313      	orrs	r3, r2
 800403c:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800403e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4bba      	ldr	r3, [pc, #744]	; (8004330 <UART_SetConfig+0x330>)
 8004046:	401a      	ands	r2, r3
 8004048:	0011      	movs	r1, r2
 800404a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004050:	430b      	orrs	r3, r1
 8004052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	4bb6      	ldr	r3, [pc, #728]	; (8004334 <UART_SetConfig+0x334>)
 800405c:	401a      	ands	r2, r3
 800405e:	0010      	movs	r0, r2
 8004060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004062:	68d9      	ldr	r1, [r3, #12]
 8004064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	0003      	movs	r3, r0
 800406a:	430b      	orrs	r3, r1
 800406c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800406e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4baf      	ldr	r3, [pc, #700]	; (8004338 <UART_SetConfig+0x338>)
 800407a:	429a      	cmp	r2, r3
 800407c:	d004      	beq.n	8004088 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800407e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004084:	4313      	orrs	r3, r2
 8004086:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	4bab      	ldr	r3, [pc, #684]	; (800433c <UART_SetConfig+0x33c>)
 8004090:	401a      	ands	r2, r3
 8004092:	0011      	movs	r1, r2
 8004094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800409a:	430b      	orrs	r3, r1
 800409c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800409e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	230f      	movs	r3, #15
 80040a6:	439a      	bics	r2, r3
 80040a8:	0010      	movs	r0, r2
 80040aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	0003      	movs	r3, r0
 80040b4:	430b      	orrs	r3, r1
 80040b6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4ba0      	ldr	r3, [pc, #640]	; (8004340 <UART_SetConfig+0x340>)
 80040be:	429a      	cmp	r2, r3
 80040c0:	d12f      	bne.n	8004122 <UART_SetConfig+0x122>
 80040c2:	4ba0      	ldr	r3, [pc, #640]	; (8004344 <UART_SetConfig+0x344>)
 80040c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c6:	2303      	movs	r3, #3
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d013      	beq.n	80040f6 <UART_SetConfig+0xf6>
 80040ce:	d304      	bcc.n	80040da <UART_SetConfig+0xda>
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d009      	beq.n	80040e8 <UART_SetConfig+0xe8>
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d015      	beq.n	8004104 <UART_SetConfig+0x104>
 80040d8:	e01b      	b.n	8004112 <UART_SetConfig+0x112>
 80040da:	2323      	movs	r3, #35	; 0x23
 80040dc:	2258      	movs	r2, #88	; 0x58
 80040de:	18ba      	adds	r2, r7, r2
 80040e0:	18d2      	adds	r2, r2, r3
 80040e2:	2300      	movs	r3, #0
 80040e4:	7013      	strb	r3, [r2, #0]
 80040e6:	e0b4      	b.n	8004252 <UART_SetConfig+0x252>
 80040e8:	2323      	movs	r3, #35	; 0x23
 80040ea:	2258      	movs	r2, #88	; 0x58
 80040ec:	18ba      	adds	r2, r7, r2
 80040ee:	18d2      	adds	r2, r2, r3
 80040f0:	2302      	movs	r3, #2
 80040f2:	7013      	strb	r3, [r2, #0]
 80040f4:	e0ad      	b.n	8004252 <UART_SetConfig+0x252>
 80040f6:	2323      	movs	r3, #35	; 0x23
 80040f8:	2258      	movs	r2, #88	; 0x58
 80040fa:	18ba      	adds	r2, r7, r2
 80040fc:	18d2      	adds	r2, r2, r3
 80040fe:	2304      	movs	r3, #4
 8004100:	7013      	strb	r3, [r2, #0]
 8004102:	e0a6      	b.n	8004252 <UART_SetConfig+0x252>
 8004104:	2323      	movs	r3, #35	; 0x23
 8004106:	2258      	movs	r2, #88	; 0x58
 8004108:	18ba      	adds	r2, r7, r2
 800410a:	18d2      	adds	r2, r2, r3
 800410c:	2308      	movs	r3, #8
 800410e:	7013      	strb	r3, [r2, #0]
 8004110:	e09f      	b.n	8004252 <UART_SetConfig+0x252>
 8004112:	2323      	movs	r3, #35	; 0x23
 8004114:	2258      	movs	r2, #88	; 0x58
 8004116:	18ba      	adds	r2, r7, r2
 8004118:	18d2      	adds	r2, r2, r3
 800411a:	2310      	movs	r3, #16
 800411c:	7013      	strb	r3, [r2, #0]
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	e097      	b.n	8004252 <UART_SetConfig+0x252>
 8004122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4b88      	ldr	r3, [pc, #544]	; (8004348 <UART_SetConfig+0x348>)
 8004128:	429a      	cmp	r2, r3
 800412a:	d132      	bne.n	8004192 <UART_SetConfig+0x192>
 800412c:	4b85      	ldr	r3, [pc, #532]	; (8004344 <UART_SetConfig+0x344>)
 800412e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004130:	230c      	movs	r3, #12
 8004132:	4013      	ands	r3, r2
 8004134:	2b04      	cmp	r3, #4
 8004136:	d016      	beq.n	8004166 <UART_SetConfig+0x166>
 8004138:	d802      	bhi.n	8004140 <UART_SetConfig+0x140>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <UART_SetConfig+0x14a>
 800413e:	e020      	b.n	8004182 <UART_SetConfig+0x182>
 8004140:	2b08      	cmp	r3, #8
 8004142:	d009      	beq.n	8004158 <UART_SetConfig+0x158>
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d015      	beq.n	8004174 <UART_SetConfig+0x174>
 8004148:	e01b      	b.n	8004182 <UART_SetConfig+0x182>
 800414a:	2323      	movs	r3, #35	; 0x23
 800414c:	2258      	movs	r2, #88	; 0x58
 800414e:	18ba      	adds	r2, r7, r2
 8004150:	18d2      	adds	r2, r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	7013      	strb	r3, [r2, #0]
 8004156:	e07c      	b.n	8004252 <UART_SetConfig+0x252>
 8004158:	2323      	movs	r3, #35	; 0x23
 800415a:	2258      	movs	r2, #88	; 0x58
 800415c:	18ba      	adds	r2, r7, r2
 800415e:	18d2      	adds	r2, r2, r3
 8004160:	2302      	movs	r3, #2
 8004162:	7013      	strb	r3, [r2, #0]
 8004164:	e075      	b.n	8004252 <UART_SetConfig+0x252>
 8004166:	2323      	movs	r3, #35	; 0x23
 8004168:	2258      	movs	r2, #88	; 0x58
 800416a:	18ba      	adds	r2, r7, r2
 800416c:	18d2      	adds	r2, r2, r3
 800416e:	2304      	movs	r3, #4
 8004170:	7013      	strb	r3, [r2, #0]
 8004172:	e06e      	b.n	8004252 <UART_SetConfig+0x252>
 8004174:	2323      	movs	r3, #35	; 0x23
 8004176:	2258      	movs	r2, #88	; 0x58
 8004178:	18ba      	adds	r2, r7, r2
 800417a:	18d2      	adds	r2, r2, r3
 800417c:	2308      	movs	r3, #8
 800417e:	7013      	strb	r3, [r2, #0]
 8004180:	e067      	b.n	8004252 <UART_SetConfig+0x252>
 8004182:	2323      	movs	r3, #35	; 0x23
 8004184:	2258      	movs	r2, #88	; 0x58
 8004186:	18ba      	adds	r2, r7, r2
 8004188:	18d2      	adds	r2, r2, r3
 800418a:	2310      	movs	r3, #16
 800418c:	7013      	strb	r3, [r2, #0]
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	e05f      	b.n	8004252 <UART_SetConfig+0x252>
 8004192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b6d      	ldr	r3, [pc, #436]	; (800434c <UART_SetConfig+0x34c>)
 8004198:	429a      	cmp	r2, r3
 800419a:	d106      	bne.n	80041aa <UART_SetConfig+0x1aa>
 800419c:	2323      	movs	r3, #35	; 0x23
 800419e:	2258      	movs	r2, #88	; 0x58
 80041a0:	18ba      	adds	r2, r7, r2
 80041a2:	18d2      	adds	r2, r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	7013      	strb	r3, [r2, #0]
 80041a8:	e053      	b.n	8004252 <UART_SetConfig+0x252>
 80041aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b68      	ldr	r3, [pc, #416]	; (8004350 <UART_SetConfig+0x350>)
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d106      	bne.n	80041c2 <UART_SetConfig+0x1c2>
 80041b4:	2323      	movs	r3, #35	; 0x23
 80041b6:	2258      	movs	r2, #88	; 0x58
 80041b8:	18ba      	adds	r2, r7, r2
 80041ba:	18d2      	adds	r2, r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	7013      	strb	r3, [r2, #0]
 80041c0:	e047      	b.n	8004252 <UART_SetConfig+0x252>
 80041c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b5c      	ldr	r3, [pc, #368]	; (8004338 <UART_SetConfig+0x338>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d13c      	bne.n	8004246 <UART_SetConfig+0x246>
 80041cc:	4b5d      	ldr	r3, [pc, #372]	; (8004344 <UART_SetConfig+0x344>)
 80041ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041d0:	23c0      	movs	r3, #192	; 0xc0
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	401a      	ands	r2, r3
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	429a      	cmp	r2, r3
 80041dc:	d01d      	beq.n	800421a <UART_SetConfig+0x21a>
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d802      	bhi.n	80041ec <UART_SetConfig+0x1ec>
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	d009      	beq.n	80041fe <UART_SetConfig+0x1fe>
 80041ea:	e024      	b.n	8004236 <UART_SetConfig+0x236>
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d00b      	beq.n	800420c <UART_SetConfig+0x20c>
 80041f4:	23c0      	movs	r3, #192	; 0xc0
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d015      	beq.n	8004228 <UART_SetConfig+0x228>
 80041fc:	e01b      	b.n	8004236 <UART_SetConfig+0x236>
 80041fe:	2323      	movs	r3, #35	; 0x23
 8004200:	2258      	movs	r2, #88	; 0x58
 8004202:	18ba      	adds	r2, r7, r2
 8004204:	18d2      	adds	r2, r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	7013      	strb	r3, [r2, #0]
 800420a:	e022      	b.n	8004252 <UART_SetConfig+0x252>
 800420c:	2323      	movs	r3, #35	; 0x23
 800420e:	2258      	movs	r2, #88	; 0x58
 8004210:	18ba      	adds	r2, r7, r2
 8004212:	18d2      	adds	r2, r2, r3
 8004214:	2302      	movs	r3, #2
 8004216:	7013      	strb	r3, [r2, #0]
 8004218:	e01b      	b.n	8004252 <UART_SetConfig+0x252>
 800421a:	2323      	movs	r3, #35	; 0x23
 800421c:	2258      	movs	r2, #88	; 0x58
 800421e:	18ba      	adds	r2, r7, r2
 8004220:	18d2      	adds	r2, r2, r3
 8004222:	2304      	movs	r3, #4
 8004224:	7013      	strb	r3, [r2, #0]
 8004226:	e014      	b.n	8004252 <UART_SetConfig+0x252>
 8004228:	2323      	movs	r3, #35	; 0x23
 800422a:	2258      	movs	r2, #88	; 0x58
 800422c:	18ba      	adds	r2, r7, r2
 800422e:	18d2      	adds	r2, r2, r3
 8004230:	2308      	movs	r3, #8
 8004232:	7013      	strb	r3, [r2, #0]
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x252>
 8004236:	2323      	movs	r3, #35	; 0x23
 8004238:	2258      	movs	r2, #88	; 0x58
 800423a:	18ba      	adds	r2, r7, r2
 800423c:	18d2      	adds	r2, r2, r3
 800423e:	2310      	movs	r3, #16
 8004240:	7013      	strb	r3, [r2, #0]
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x252>
 8004246:	2323      	movs	r3, #35	; 0x23
 8004248:	2258      	movs	r2, #88	; 0x58
 800424a:	18ba      	adds	r2, r7, r2
 800424c:	18d2      	adds	r2, r2, r3
 800424e:	2310      	movs	r3, #16
 8004250:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b38      	ldr	r3, [pc, #224]	; (8004338 <UART_SetConfig+0x338>)
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <UART_SetConfig+0x260>
 800425c:	f000 fbd0 	bl	8004a00 <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004260:	2323      	movs	r3, #35	; 0x23
 8004262:	2258      	movs	r2, #88	; 0x58
 8004264:	4694      	mov	ip, r2
 8004266:	44bc      	add	ip, r7
 8004268:	4463      	add	r3, ip
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d100      	bne.n	8004272 <UART_SetConfig+0x272>
 8004270:	e070      	b.n	8004354 <UART_SetConfig+0x354>
 8004272:	dc02      	bgt.n	800427a <UART_SetConfig+0x27a>
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <UART_SetConfig+0x288>
 8004278:	e15f      	b.n	800453a <UART_SetConfig+0x53a>
 800427a:	2b04      	cmp	r3, #4
 800427c:	d100      	bne.n	8004280 <UART_SetConfig+0x280>
 800427e:	e0b4      	b.n	80043ea <UART_SetConfig+0x3ea>
 8004280:	2b08      	cmp	r3, #8
 8004282:	d100      	bne.n	8004286 <UART_SetConfig+0x286>
 8004284:	e105      	b.n	8004492 <UART_SetConfig+0x492>
 8004286:	e158      	b.n	800453a <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004288:	f7fe fe42 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 800428c:	0002      	movs	r2, r0
 800428e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d044      	beq.n	8004320 <UART_SetConfig+0x320>
 8004296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	2b01      	cmp	r3, #1
 800429c:	d03e      	beq.n	800431c <UART_SetConfig+0x31c>
 800429e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d038      	beq.n	8004318 <UART_SetConfig+0x318>
 80042a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d032      	beq.n	8004314 <UART_SetConfig+0x314>
 80042ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d02c      	beq.n	8004310 <UART_SetConfig+0x310>
 80042b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d026      	beq.n	800430c <UART_SetConfig+0x30c>
 80042be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d020      	beq.n	8004308 <UART_SetConfig+0x308>
 80042c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2b07      	cmp	r3, #7
 80042cc:	d01a      	beq.n	8004304 <UART_SetConfig+0x304>
 80042ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d014      	beq.n	8004300 <UART_SetConfig+0x300>
 80042d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2b09      	cmp	r3, #9
 80042dc:	d00e      	beq.n	80042fc <UART_SetConfig+0x2fc>
 80042de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	2b0a      	cmp	r3, #10
 80042e4:	d008      	beq.n	80042f8 <UART_SetConfig+0x2f8>
 80042e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b0b      	cmp	r3, #11
 80042ec:	d102      	bne.n	80042f4 <UART_SetConfig+0x2f4>
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	e016      	b.n	8004322 <UART_SetConfig+0x322>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e014      	b.n	8004322 <UART_SetConfig+0x322>
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	e012      	b.n	8004322 <UART_SetConfig+0x322>
 80042fc:	2340      	movs	r3, #64	; 0x40
 80042fe:	e010      	b.n	8004322 <UART_SetConfig+0x322>
 8004300:	2320      	movs	r3, #32
 8004302:	e00e      	b.n	8004322 <UART_SetConfig+0x322>
 8004304:	2310      	movs	r3, #16
 8004306:	e00c      	b.n	8004322 <UART_SetConfig+0x322>
 8004308:	230c      	movs	r3, #12
 800430a:	e00a      	b.n	8004322 <UART_SetConfig+0x322>
 800430c:	230a      	movs	r3, #10
 800430e:	e008      	b.n	8004322 <UART_SetConfig+0x322>
 8004310:	2308      	movs	r3, #8
 8004312:	e006      	b.n	8004322 <UART_SetConfig+0x322>
 8004314:	2306      	movs	r3, #6
 8004316:	e004      	b.n	8004322 <UART_SetConfig+0x322>
 8004318:	2304      	movs	r3, #4
 800431a:	e002      	b.n	8004322 <UART_SetConfig+0x322>
 800431c:	2302      	movs	r3, #2
 800431e:	e000      	b.n	8004322 <UART_SetConfig+0x322>
 8004320:	2301      	movs	r3, #1
 8004322:	0019      	movs	r1, r3
 8004324:	0010      	movs	r0, r2
 8004326:	f7fb feed 	bl	8000104 <__udivsi3>
 800432a:	0003      	movs	r3, r0
 800432c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800432e:	e10b      	b.n	8004548 <UART_SetConfig+0x548>
 8004330:	cfff69f3 	.word	0xcfff69f3
 8004334:	ffffcfff 	.word	0xffffcfff
 8004338:	40008000 	.word	0x40008000
 800433c:	11fff4ff 	.word	0x11fff4ff
 8004340:	40013800 	.word	0x40013800
 8004344:	40021000 	.word	0x40021000
 8004348:	40004400 	.word	0x40004400
 800434c:	40004800 	.word	0x40004800
 8004350:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d043      	beq.n	80043e4 <UART_SetConfig+0x3e4>
 800435c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2b01      	cmp	r3, #1
 8004362:	d03d      	beq.n	80043e0 <UART_SetConfig+0x3e0>
 8004364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	2b02      	cmp	r3, #2
 800436a:	d037      	beq.n	80043dc <UART_SetConfig+0x3dc>
 800436c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	2b03      	cmp	r3, #3
 8004372:	d031      	beq.n	80043d8 <UART_SetConfig+0x3d8>
 8004374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	2b04      	cmp	r3, #4
 800437a:	d02b      	beq.n	80043d4 <UART_SetConfig+0x3d4>
 800437c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2b05      	cmp	r3, #5
 8004382:	d025      	beq.n	80043d0 <UART_SetConfig+0x3d0>
 8004384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b06      	cmp	r3, #6
 800438a:	d01f      	beq.n	80043cc <UART_SetConfig+0x3cc>
 800438c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	2b07      	cmp	r3, #7
 8004392:	d019      	beq.n	80043c8 <UART_SetConfig+0x3c8>
 8004394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b08      	cmp	r3, #8
 800439a:	d013      	beq.n	80043c4 <UART_SetConfig+0x3c4>
 800439c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b09      	cmp	r3, #9
 80043a2:	d00d      	beq.n	80043c0 <UART_SetConfig+0x3c0>
 80043a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b0a      	cmp	r3, #10
 80043aa:	d007      	beq.n	80043bc <UART_SetConfig+0x3bc>
 80043ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b0b      	cmp	r3, #11
 80043b2:	d101      	bne.n	80043b8 <UART_SetConfig+0x3b8>
 80043b4:	4bab      	ldr	r3, [pc, #684]	; (8004664 <UART_SetConfig+0x664>)
 80043b6:	e016      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043b8:	4bab      	ldr	r3, [pc, #684]	; (8004668 <UART_SetConfig+0x668>)
 80043ba:	e014      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043bc:	4bab      	ldr	r3, [pc, #684]	; (800466c <UART_SetConfig+0x66c>)
 80043be:	e012      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043c0:	4bab      	ldr	r3, [pc, #684]	; (8004670 <UART_SetConfig+0x670>)
 80043c2:	e010      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043c4:	4bab      	ldr	r3, [pc, #684]	; (8004674 <UART_SetConfig+0x674>)
 80043c6:	e00e      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043c8:	4bab      	ldr	r3, [pc, #684]	; (8004678 <UART_SetConfig+0x678>)
 80043ca:	e00c      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043cc:	4bab      	ldr	r3, [pc, #684]	; (800467c <UART_SetConfig+0x67c>)
 80043ce:	e00a      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043d0:	4bab      	ldr	r3, [pc, #684]	; (8004680 <UART_SetConfig+0x680>)
 80043d2:	e008      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043d4:	4bab      	ldr	r3, [pc, #684]	; (8004684 <UART_SetConfig+0x684>)
 80043d6:	e006      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043d8:	4bab      	ldr	r3, [pc, #684]	; (8004688 <UART_SetConfig+0x688>)
 80043da:	e004      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043dc:	4bab      	ldr	r3, [pc, #684]	; (800468c <UART_SetConfig+0x68c>)
 80043de:	e002      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043e0:	4bab      	ldr	r3, [pc, #684]	; (8004690 <UART_SetConfig+0x690>)
 80043e2:	e000      	b.n	80043e6 <UART_SetConfig+0x3e6>
 80043e4:	4ba0      	ldr	r3, [pc, #640]	; (8004668 <UART_SetConfig+0x668>)
 80043e6:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80043e8:	e0ae      	b.n	8004548 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80043ea:	f7fe fd05 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 80043ee:	0002      	movs	r2, r0
 80043f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d044      	beq.n	8004482 <UART_SetConfig+0x482>
 80043f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d03e      	beq.n	800447e <UART_SetConfig+0x47e>
 8004400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	2b02      	cmp	r3, #2
 8004406:	d038      	beq.n	800447a <UART_SetConfig+0x47a>
 8004408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b03      	cmp	r3, #3
 800440e:	d032      	beq.n	8004476 <UART_SetConfig+0x476>
 8004410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	2b04      	cmp	r3, #4
 8004416:	d02c      	beq.n	8004472 <UART_SetConfig+0x472>
 8004418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2b05      	cmp	r3, #5
 800441e:	d026      	beq.n	800446e <UART_SetConfig+0x46e>
 8004420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	2b06      	cmp	r3, #6
 8004426:	d020      	beq.n	800446a <UART_SetConfig+0x46a>
 8004428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	2b07      	cmp	r3, #7
 800442e:	d01a      	beq.n	8004466 <UART_SetConfig+0x466>
 8004430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b08      	cmp	r3, #8
 8004436:	d014      	beq.n	8004462 <UART_SetConfig+0x462>
 8004438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b09      	cmp	r3, #9
 800443e:	d00e      	beq.n	800445e <UART_SetConfig+0x45e>
 8004440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2b0a      	cmp	r3, #10
 8004446:	d008      	beq.n	800445a <UART_SetConfig+0x45a>
 8004448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b0b      	cmp	r3, #11
 800444e:	d102      	bne.n	8004456 <UART_SetConfig+0x456>
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	e016      	b.n	8004484 <UART_SetConfig+0x484>
 8004456:	2301      	movs	r3, #1
 8004458:	e014      	b.n	8004484 <UART_SetConfig+0x484>
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	e012      	b.n	8004484 <UART_SetConfig+0x484>
 800445e:	2340      	movs	r3, #64	; 0x40
 8004460:	e010      	b.n	8004484 <UART_SetConfig+0x484>
 8004462:	2320      	movs	r3, #32
 8004464:	e00e      	b.n	8004484 <UART_SetConfig+0x484>
 8004466:	2310      	movs	r3, #16
 8004468:	e00c      	b.n	8004484 <UART_SetConfig+0x484>
 800446a:	230c      	movs	r3, #12
 800446c:	e00a      	b.n	8004484 <UART_SetConfig+0x484>
 800446e:	230a      	movs	r3, #10
 8004470:	e008      	b.n	8004484 <UART_SetConfig+0x484>
 8004472:	2308      	movs	r3, #8
 8004474:	e006      	b.n	8004484 <UART_SetConfig+0x484>
 8004476:	2306      	movs	r3, #6
 8004478:	e004      	b.n	8004484 <UART_SetConfig+0x484>
 800447a:	2304      	movs	r3, #4
 800447c:	e002      	b.n	8004484 <UART_SetConfig+0x484>
 800447e:	2302      	movs	r3, #2
 8004480:	e000      	b.n	8004484 <UART_SetConfig+0x484>
 8004482:	2301      	movs	r3, #1
 8004484:	0019      	movs	r1, r3
 8004486:	0010      	movs	r0, r2
 8004488:	f7fb fe3c 	bl	8000104 <__udivsi3>
 800448c:	0003      	movs	r3, r0
 800448e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004490:	e05a      	b.n	8004548 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	2b00      	cmp	r3, #0
 8004498:	d04b      	beq.n	8004532 <UART_SetConfig+0x532>
 800449a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d044      	beq.n	800452c <UART_SetConfig+0x52c>
 80044a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d03d      	beq.n	8004526 <UART_SetConfig+0x526>
 80044aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d037      	beq.n	8004522 <UART_SetConfig+0x522>
 80044b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d030      	beq.n	800451c <UART_SetConfig+0x51c>
 80044ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b05      	cmp	r3, #5
 80044c0:	d02a      	beq.n	8004518 <UART_SetConfig+0x518>
 80044c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d024      	beq.n	8004514 <UART_SetConfig+0x514>
 80044ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	2b07      	cmp	r3, #7
 80044d0:	d01d      	beq.n	800450e <UART_SetConfig+0x50e>
 80044d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d016      	beq.n	8004508 <UART_SetConfig+0x508>
 80044da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b09      	cmp	r3, #9
 80044e0:	d00f      	beq.n	8004502 <UART_SetConfig+0x502>
 80044e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	2b0a      	cmp	r3, #10
 80044e8:	d008      	beq.n	80044fc <UART_SetConfig+0x4fc>
 80044ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2b0b      	cmp	r3, #11
 80044f0:	d101      	bne.n	80044f6 <UART_SetConfig+0x4f6>
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	e01f      	b.n	8004536 <UART_SetConfig+0x536>
 80044f6:	2380      	movs	r3, #128	; 0x80
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	e01c      	b.n	8004536 <UART_SetConfig+0x536>
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	e019      	b.n	8004536 <UART_SetConfig+0x536>
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	e016      	b.n	8004536 <UART_SetConfig+0x536>
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	e013      	b.n	8004536 <UART_SetConfig+0x536>
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	e010      	b.n	8004536 <UART_SetConfig+0x536>
 8004514:	4b5f      	ldr	r3, [pc, #380]	; (8004694 <UART_SetConfig+0x694>)
 8004516:	e00e      	b.n	8004536 <UART_SetConfig+0x536>
 8004518:	4b5f      	ldr	r3, [pc, #380]	; (8004698 <UART_SetConfig+0x698>)
 800451a:	e00c      	b.n	8004536 <UART_SetConfig+0x536>
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	015b      	lsls	r3, r3, #5
 8004520:	e009      	b.n	8004536 <UART_SetConfig+0x536>
 8004522:	4b5e      	ldr	r3, [pc, #376]	; (800469c <UART_SetConfig+0x69c>)
 8004524:	e007      	b.n	8004536 <UART_SetConfig+0x536>
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	e004      	b.n	8004536 <UART_SetConfig+0x536>
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	01db      	lsls	r3, r3, #7
 8004530:	e001      	b.n	8004536 <UART_SetConfig+0x536>
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004538:	e006      	b.n	8004548 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 800453a:	231b      	movs	r3, #27
 800453c:	2258      	movs	r2, #88	; 0x58
 800453e:	18ba      	adds	r2, r7, r2
 8004540:	18d2      	adds	r2, r2, r3
 8004542:	2301      	movs	r3, #1
 8004544:	7013      	strb	r3, [r2, #0]
        break;
 8004546:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <UART_SetConfig+0x552>
 800454e:	f000 fe12 	bl	8005176 <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	0013      	movs	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	189a      	adds	r2, r3, r2
 800455c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455e:	4293      	cmp	r3, r2
 8004560:	d305      	bcc.n	800456e <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	4293      	cmp	r3, r2
 800456c:	d908      	bls.n	8004580 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 800456e:	231b      	movs	r3, #27
 8004570:	2258      	movs	r2, #88	; 0x58
 8004572:	4694      	mov	ip, r2
 8004574:	44bc      	add	ip, r7
 8004576:	4463      	add	r3, ip
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	f000 fdfb 	bl	8005176 <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 8004580:	2323      	movs	r3, #35	; 0x23
 8004582:	2258      	movs	r2, #88	; 0x58
 8004584:	4694      	mov	ip, r2
 8004586:	44bc      	add	ip, r7
 8004588:	4463      	add	r3, ip
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d100      	bne.n	8004592 <UART_SetConfig+0x592>
 8004590:	e0ab      	b.n	80046ea <UART_SetConfig+0x6ea>
 8004592:	dc02      	bgt.n	800459a <UART_SetConfig+0x59a>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <UART_SetConfig+0x5a8>
 8004598:	e213      	b.n	80049c2 <UART_SetConfig+0x9c2>
 800459a:	2b04      	cmp	r3, #4
 800459c:	d100      	bne.n	80045a0 <UART_SetConfig+0x5a0>
 800459e:	e111      	b.n	80047c4 <UART_SetConfig+0x7c4>
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d100      	bne.n	80045a6 <UART_SetConfig+0x5a6>
 80045a4:	e196      	b.n	80048d4 <UART_SetConfig+0x8d4>
 80045a6:	e20c      	b.n	80049c2 <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80045a8:	f7fe fcb2 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 80045ac:	0003      	movs	r3, r0
 80045ae:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045b4:	2300      	movs	r3, #0
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d100      	bne.n	80045c2 <UART_SetConfig+0x5c2>
 80045c0:	e06e      	b.n	80046a0 <UART_SetConfig+0x6a0>
 80045c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d049      	beq.n	800465e <UART_SetConfig+0x65e>
 80045ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d042      	beq.n	8004658 <UART_SetConfig+0x658>
 80045d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d03b      	beq.n	8004652 <UART_SetConfig+0x652>
 80045da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d034      	beq.n	800464c <UART_SetConfig+0x64c>
 80045e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d02d      	beq.n	8004646 <UART_SetConfig+0x646>
 80045ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	d026      	beq.n	8004640 <UART_SetConfig+0x640>
 80045f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2b07      	cmp	r3, #7
 80045f8:	d01f      	beq.n	800463a <UART_SetConfig+0x63a>
 80045fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d018      	beq.n	8004634 <UART_SetConfig+0x634>
 8004602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b09      	cmp	r3, #9
 8004608:	d011      	beq.n	800462e <UART_SetConfig+0x62e>
 800460a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2b0a      	cmp	r3, #10
 8004610:	d00a      	beq.n	8004628 <UART_SetConfig+0x628>
 8004612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b0b      	cmp	r3, #11
 8004618:	d103      	bne.n	8004622 <UART_SetConfig+0x622>
 800461a:	2380      	movs	r3, #128	; 0x80
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2400      	movs	r4, #0
 8004620:	e040      	b.n	80046a4 <UART_SetConfig+0x6a4>
 8004622:	2301      	movs	r3, #1
 8004624:	2400      	movs	r4, #0
 8004626:	e03d      	b.n	80046a4 <UART_SetConfig+0x6a4>
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	2400      	movs	r4, #0
 800462c:	e03a      	b.n	80046a4 <UART_SetConfig+0x6a4>
 800462e:	2340      	movs	r3, #64	; 0x40
 8004630:	2400      	movs	r4, #0
 8004632:	e037      	b.n	80046a4 <UART_SetConfig+0x6a4>
 8004634:	2320      	movs	r3, #32
 8004636:	2400      	movs	r4, #0
 8004638:	e034      	b.n	80046a4 <UART_SetConfig+0x6a4>
 800463a:	2310      	movs	r3, #16
 800463c:	2400      	movs	r4, #0
 800463e:	e031      	b.n	80046a4 <UART_SetConfig+0x6a4>
 8004640:	230c      	movs	r3, #12
 8004642:	2400      	movs	r4, #0
 8004644:	e02e      	b.n	80046a4 <UART_SetConfig+0x6a4>
 8004646:	230a      	movs	r3, #10
 8004648:	2400      	movs	r4, #0
 800464a:	e02b      	b.n	80046a4 <UART_SetConfig+0x6a4>
 800464c:	2308      	movs	r3, #8
 800464e:	2400      	movs	r4, #0
 8004650:	e028      	b.n	80046a4 <UART_SetConfig+0x6a4>
 8004652:	2306      	movs	r3, #6
 8004654:	2400      	movs	r4, #0
 8004656:	e025      	b.n	80046a4 <UART_SetConfig+0x6a4>
 8004658:	2304      	movs	r3, #4
 800465a:	2400      	movs	r4, #0
 800465c:	e022      	b.n	80046a4 <UART_SetConfig+0x6a4>
 800465e:	2302      	movs	r3, #2
 8004660:	2400      	movs	r4, #0
 8004662:	e01f      	b.n	80046a4 <UART_SetConfig+0x6a4>
 8004664:	0000f424 	.word	0x0000f424
 8004668:	00f42400 	.word	0x00f42400
 800466c:	0001e848 	.word	0x0001e848
 8004670:	0003d090 	.word	0x0003d090
 8004674:	0007a120 	.word	0x0007a120
 8004678:	000f4240 	.word	0x000f4240
 800467c:	00145855 	.word	0x00145855
 8004680:	00186a00 	.word	0x00186a00
 8004684:	001e8480 	.word	0x001e8480
 8004688:	0028b0aa 	.word	0x0028b0aa
 800468c:	003d0900 	.word	0x003d0900
 8004690:	007a1200 	.word	0x007a1200
 8004694:	00000aaa 	.word	0x00000aaa
 8004698:	00000ccc 	.word	0x00000ccc
 800469c:	00001555 	.word	0x00001555
 80046a0:	2301      	movs	r3, #1
 80046a2:	2400      	movs	r4, #0
 80046a4:	001a      	movs	r2, r3
 80046a6:	0023      	movs	r3, r4
 80046a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046ac:	f7fb fea0 	bl	80003f0 <__aeabi_uldivmod>
 80046b0:	0003      	movs	r3, r0
 80046b2:	000c      	movs	r4, r1
 80046b4:	0e1a      	lsrs	r2, r3, #24
 80046b6:	0226      	lsls	r6, r4, #8
 80046b8:	4316      	orrs	r6, r2
 80046ba:	021d      	lsls	r5, r3, #8
 80046bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	643b      	str	r3, [r7, #64]	; 0x40
 80046c4:	2300      	movs	r3, #0
 80046c6:	647b      	str	r3, [r7, #68]	; 0x44
 80046c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80046ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046cc:	1940      	adds	r0, r0, r5
 80046ce:	4171      	adcs	r1, r6
 80046d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80046d6:	2300      	movs	r3, #0
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046de:	f7fb fe87 	bl	80003f0 <__aeabi_uldivmod>
 80046e2:	0003      	movs	r3, r0
 80046e4:	000c      	movs	r4, r1
 80046e6:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80046e8:	e173      	b.n	80049d2 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d04f      	beq.n	8004792 <UART_SetConfig+0x792>
 80046f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d048      	beq.n	800478c <UART_SetConfig+0x78c>
 80046fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d041      	beq.n	8004786 <UART_SetConfig+0x786>
 8004702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b03      	cmp	r3, #3
 8004708:	d03a      	beq.n	8004780 <UART_SetConfig+0x780>
 800470a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b04      	cmp	r3, #4
 8004710:	d033      	beq.n	800477a <UART_SetConfig+0x77a>
 8004712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b05      	cmp	r3, #5
 8004718:	d02c      	beq.n	8004774 <UART_SetConfig+0x774>
 800471a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b06      	cmp	r3, #6
 8004720:	d025      	beq.n	800476e <UART_SetConfig+0x76e>
 8004722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b07      	cmp	r3, #7
 8004728:	d01e      	beq.n	8004768 <UART_SetConfig+0x768>
 800472a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b08      	cmp	r3, #8
 8004730:	d017      	beq.n	8004762 <UART_SetConfig+0x762>
 8004732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b09      	cmp	r3, #9
 8004738:	d010      	beq.n	800475c <UART_SetConfig+0x75c>
 800473a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b0a      	cmp	r3, #10
 8004740:	d009      	beq.n	8004756 <UART_SetConfig+0x756>
 8004742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b0b      	cmp	r3, #11
 8004748:	d102      	bne.n	8004750 <UART_SetConfig+0x750>
 800474a:	4bbb      	ldr	r3, [pc, #748]	; (8004a38 <UART_SetConfig+0xa38>)
 800474c:	2400      	movs	r4, #0
 800474e:	e022      	b.n	8004796 <UART_SetConfig+0x796>
 8004750:	4bba      	ldr	r3, [pc, #744]	; (8004a3c <UART_SetConfig+0xa3c>)
 8004752:	2400      	movs	r4, #0
 8004754:	e01f      	b.n	8004796 <UART_SetConfig+0x796>
 8004756:	4bba      	ldr	r3, [pc, #744]	; (8004a40 <UART_SetConfig+0xa40>)
 8004758:	2400      	movs	r4, #0
 800475a:	e01c      	b.n	8004796 <UART_SetConfig+0x796>
 800475c:	4bb9      	ldr	r3, [pc, #740]	; (8004a44 <UART_SetConfig+0xa44>)
 800475e:	2400      	movs	r4, #0
 8004760:	e019      	b.n	8004796 <UART_SetConfig+0x796>
 8004762:	4bb9      	ldr	r3, [pc, #740]	; (8004a48 <UART_SetConfig+0xa48>)
 8004764:	2400      	movs	r4, #0
 8004766:	e016      	b.n	8004796 <UART_SetConfig+0x796>
 8004768:	4bb8      	ldr	r3, [pc, #736]	; (8004a4c <UART_SetConfig+0xa4c>)
 800476a:	2400      	movs	r4, #0
 800476c:	e013      	b.n	8004796 <UART_SetConfig+0x796>
 800476e:	4bb8      	ldr	r3, [pc, #736]	; (8004a50 <UART_SetConfig+0xa50>)
 8004770:	2400      	movs	r4, #0
 8004772:	e010      	b.n	8004796 <UART_SetConfig+0x796>
 8004774:	4bb7      	ldr	r3, [pc, #732]	; (8004a54 <UART_SetConfig+0xa54>)
 8004776:	2400      	movs	r4, #0
 8004778:	e00d      	b.n	8004796 <UART_SetConfig+0x796>
 800477a:	4bb7      	ldr	r3, [pc, #732]	; (8004a58 <UART_SetConfig+0xa58>)
 800477c:	2400      	movs	r4, #0
 800477e:	e00a      	b.n	8004796 <UART_SetConfig+0x796>
 8004780:	4bb6      	ldr	r3, [pc, #728]	; (8004a5c <UART_SetConfig+0xa5c>)
 8004782:	2400      	movs	r4, #0
 8004784:	e007      	b.n	8004796 <UART_SetConfig+0x796>
 8004786:	4bb6      	ldr	r3, [pc, #728]	; (8004a60 <UART_SetConfig+0xa60>)
 8004788:	2400      	movs	r4, #0
 800478a:	e004      	b.n	8004796 <UART_SetConfig+0x796>
 800478c:	4bb5      	ldr	r3, [pc, #724]	; (8004a64 <UART_SetConfig+0xa64>)
 800478e:	2400      	movs	r4, #0
 8004790:	e001      	b.n	8004796 <UART_SetConfig+0x796>
 8004792:	4baa      	ldr	r3, [pc, #680]	; (8004a3c <UART_SetConfig+0xa3c>)
 8004794:	2400      	movs	r4, #0
 8004796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004798:	6852      	ldr	r2, [r2, #4]
 800479a:	0852      	lsrs	r2, r2, #1
 800479c:	633a      	str	r2, [r7, #48]	; 0x30
 800479e:	2200      	movs	r2, #0
 80047a0:	637a      	str	r2, [r7, #52]	; 0x34
 80047a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80047a6:	18c0      	adds	r0, r0, r3
 80047a8:	4161      	adcs	r1, r4
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b0:	2300      	movs	r3, #0
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	f7fb fe1a 	bl	80003f0 <__aeabi_uldivmod>
 80047bc:	0003      	movs	r3, r0
 80047be:	000c      	movs	r4, r1
 80047c0:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80047c2:	e106      	b.n	80049d2 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80047c4:	f7fe fb18 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 80047c8:	0003      	movs	r3, r0
 80047ca:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	2300      	movs	r3, #0
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
 80047d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d050      	beq.n	800487e <UART_SetConfig+0x87e>
 80047dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d049      	beq.n	8004878 <UART_SetConfig+0x878>
 80047e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d042      	beq.n	8004872 <UART_SetConfig+0x872>
 80047ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d03b      	beq.n	800486c <UART_SetConfig+0x86c>
 80047f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d034      	beq.n	8004866 <UART_SetConfig+0x866>
 80047fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b05      	cmp	r3, #5
 8004802:	d02d      	beq.n	8004860 <UART_SetConfig+0x860>
 8004804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	2b06      	cmp	r3, #6
 800480a:	d026      	beq.n	800485a <UART_SetConfig+0x85a>
 800480c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b07      	cmp	r3, #7
 8004812:	d01f      	beq.n	8004854 <UART_SetConfig+0x854>
 8004814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b08      	cmp	r3, #8
 800481a:	d018      	beq.n	800484e <UART_SetConfig+0x84e>
 800481c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b09      	cmp	r3, #9
 8004822:	d011      	beq.n	8004848 <UART_SetConfig+0x848>
 8004824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b0a      	cmp	r3, #10
 800482a:	d00a      	beq.n	8004842 <UART_SetConfig+0x842>
 800482c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2b0b      	cmp	r3, #11
 8004832:	d103      	bne.n	800483c <UART_SetConfig+0x83c>
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	2400      	movs	r4, #0
 800483a:	e022      	b.n	8004882 <UART_SetConfig+0x882>
 800483c:	2301      	movs	r3, #1
 800483e:	2400      	movs	r4, #0
 8004840:	e01f      	b.n	8004882 <UART_SetConfig+0x882>
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	2400      	movs	r4, #0
 8004846:	e01c      	b.n	8004882 <UART_SetConfig+0x882>
 8004848:	2340      	movs	r3, #64	; 0x40
 800484a:	2400      	movs	r4, #0
 800484c:	e019      	b.n	8004882 <UART_SetConfig+0x882>
 800484e:	2320      	movs	r3, #32
 8004850:	2400      	movs	r4, #0
 8004852:	e016      	b.n	8004882 <UART_SetConfig+0x882>
 8004854:	2310      	movs	r3, #16
 8004856:	2400      	movs	r4, #0
 8004858:	e013      	b.n	8004882 <UART_SetConfig+0x882>
 800485a:	230c      	movs	r3, #12
 800485c:	2400      	movs	r4, #0
 800485e:	e010      	b.n	8004882 <UART_SetConfig+0x882>
 8004860:	230a      	movs	r3, #10
 8004862:	2400      	movs	r4, #0
 8004864:	e00d      	b.n	8004882 <UART_SetConfig+0x882>
 8004866:	2308      	movs	r3, #8
 8004868:	2400      	movs	r4, #0
 800486a:	e00a      	b.n	8004882 <UART_SetConfig+0x882>
 800486c:	2306      	movs	r3, #6
 800486e:	2400      	movs	r4, #0
 8004870:	e007      	b.n	8004882 <UART_SetConfig+0x882>
 8004872:	2304      	movs	r3, #4
 8004874:	2400      	movs	r4, #0
 8004876:	e004      	b.n	8004882 <UART_SetConfig+0x882>
 8004878:	2302      	movs	r3, #2
 800487a:	2400      	movs	r4, #0
 800487c:	e001      	b.n	8004882 <UART_SetConfig+0x882>
 800487e:	2301      	movs	r3, #1
 8004880:	2400      	movs	r4, #0
 8004882:	001a      	movs	r2, r3
 8004884:	0023      	movs	r3, r4
 8004886:	6a38      	ldr	r0, [r7, #32]
 8004888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800488a:	f7fb fdb1 	bl	80003f0 <__aeabi_uldivmod>
 800488e:	0003      	movs	r3, r0
 8004890:	000c      	movs	r4, r1
 8004892:	0e1a      	lsrs	r2, r3, #24
 8004894:	0221      	lsls	r1, r4, #8
 8004896:	6579      	str	r1, [r7, #84]	; 0x54
 8004898:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800489a:	4311      	orrs	r1, r2
 800489c:	6579      	str	r1, [r7, #84]	; 0x54
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	653b      	str	r3, [r7, #80]	; 0x50
 80048a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80048b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	69fc      	ldr	r4, [r7, #28]
 80048b6:	18c0      	adds	r0, r0, r3
 80048b8:	4161      	adcs	r1, r4
 80048ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f7fb fd92 	bl	80003f0 <__aeabi_uldivmod>
 80048cc:	0003      	movs	r3, r0
 80048ce:	000c      	movs	r4, r1
 80048d0:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80048d2:	e07e      	b.n	80049d2 <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d058      	beq.n	800498e <UART_SetConfig+0x98e>
 80048dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d050      	beq.n	8004986 <UART_SetConfig+0x986>
 80048e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d048      	beq.n	800497e <UART_SetConfig+0x97e>
 80048ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d041      	beq.n	8004978 <UART_SetConfig+0x978>
 80048f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d039      	beq.n	8004970 <UART_SetConfig+0x970>
 80048fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b05      	cmp	r3, #5
 8004902:	d032      	beq.n	800496a <UART_SetConfig+0x96a>
 8004904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	2b06      	cmp	r3, #6
 800490a:	d02b      	beq.n	8004964 <UART_SetConfig+0x964>
 800490c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	2b07      	cmp	r3, #7
 8004912:	d023      	beq.n	800495c <UART_SetConfig+0x95c>
 8004914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	2b08      	cmp	r3, #8
 800491a:	d01b      	beq.n	8004954 <UART_SetConfig+0x954>
 800491c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b09      	cmp	r3, #9
 8004922:	d013      	beq.n	800494c <UART_SetConfig+0x94c>
 8004924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	2b0a      	cmp	r3, #10
 800492a:	d00b      	beq.n	8004944 <UART_SetConfig+0x944>
 800492c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2b0b      	cmp	r3, #11
 8004932:	d103      	bne.n	800493c <UART_SetConfig+0x93c>
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	2400      	movs	r4, #0
 800493a:	e02b      	b.n	8004994 <UART_SetConfig+0x994>
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	2400      	movs	r4, #0
 8004942:	e027      	b.n	8004994 <UART_SetConfig+0x994>
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	025b      	lsls	r3, r3, #9
 8004948:	2400      	movs	r4, #0
 800494a:	e023      	b.n	8004994 <UART_SetConfig+0x994>
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	029b      	lsls	r3, r3, #10
 8004950:	2400      	movs	r4, #0
 8004952:	e01f      	b.n	8004994 <UART_SetConfig+0x994>
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	02db      	lsls	r3, r3, #11
 8004958:	2400      	movs	r4, #0
 800495a:	e01b      	b.n	8004994 <UART_SetConfig+0x994>
 800495c:	2380      	movs	r3, #128	; 0x80
 800495e:	031b      	lsls	r3, r3, #12
 8004960:	2400      	movs	r4, #0
 8004962:	e017      	b.n	8004994 <UART_SetConfig+0x994>
 8004964:	4b40      	ldr	r3, [pc, #256]	; (8004a68 <UART_SetConfig+0xa68>)
 8004966:	2400      	movs	r4, #0
 8004968:	e014      	b.n	8004994 <UART_SetConfig+0x994>
 800496a:	4b40      	ldr	r3, [pc, #256]	; (8004a6c <UART_SetConfig+0xa6c>)
 800496c:	2400      	movs	r4, #0
 800496e:	e011      	b.n	8004994 <UART_SetConfig+0x994>
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	035b      	lsls	r3, r3, #13
 8004974:	2400      	movs	r4, #0
 8004976:	e00d      	b.n	8004994 <UART_SetConfig+0x994>
 8004978:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <UART_SetConfig+0xa70>)
 800497a:	2400      	movs	r4, #0
 800497c:	e00a      	b.n	8004994 <UART_SetConfig+0x994>
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	039b      	lsls	r3, r3, #14
 8004982:	2400      	movs	r4, #0
 8004984:	e006      	b.n	8004994 <UART_SetConfig+0x994>
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	03db      	lsls	r3, r3, #15
 800498a:	2400      	movs	r4, #0
 800498c:	e002      	b.n	8004994 <UART_SetConfig+0x994>
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	2400      	movs	r4, #0
 8004994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004996:	6852      	ldr	r2, [r2, #4]
 8004998:	0852      	lsrs	r2, r2, #1
 800499a:	60ba      	str	r2, [r7, #8]
 800499c:	2200      	movs	r2, #0
 800499e:	60fa      	str	r2, [r7, #12]
 80049a0:	68b8      	ldr	r0, [r7, #8]
 80049a2:	68f9      	ldr	r1, [r7, #12]
 80049a4:	18c0      	adds	r0, r0, r3
 80049a6:	4161      	adcs	r1, r4
 80049a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	2300      	movs	r3, #0
 80049b0:	607b      	str	r3, [r7, #4]
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f7fb fd1b 	bl	80003f0 <__aeabi_uldivmod>
 80049ba:	0003      	movs	r3, r0
 80049bc:	000c      	movs	r4, r1
 80049be:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80049c0:	e007      	b.n	80049d2 <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 80049c2:	231b      	movs	r3, #27
 80049c4:	2258      	movs	r2, #88	; 0x58
 80049c6:	4694      	mov	ip, r2
 80049c8:	44bc      	add	ip, r7
 80049ca:	4463      	add	r3, ip
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
            break;
 80049d0:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d4:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <UART_SetConfig+0xa74>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d909      	bls.n	80049ee <UART_SetConfig+0x9ee>
 80049da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049dc:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <UART_SetConfig+0xa78>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d805      	bhi.n	80049ee <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 80049e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	f000 fbc4 	bl	8005176 <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 80049ee:	231b      	movs	r3, #27
 80049f0:	2258      	movs	r2, #88	; 0x58
 80049f2:	4694      	mov	ip, r2
 80049f4:	44bc      	add	ip, r7
 80049f6:	4463      	add	r3, ip
 80049f8:	2201      	movs	r2, #1
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	f000 fbbb 	bl	8005176 <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d000      	beq.n	8004a0e <UART_SetConfig+0xa0e>
 8004a0c:	e1e6      	b.n	8004ddc <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 8004a0e:	2323      	movs	r3, #35	; 0x23
 8004a10:	2258      	movs	r2, #88	; 0x58
 8004a12:	4694      	mov	ip, r2
 8004a14:	44bc      	add	ip, r7
 8004a16:	4463      	add	r3, ip
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d100      	bne.n	8004a20 <UART_SetConfig+0xa20>
 8004a1e:	e08f      	b.n	8004b40 <UART_SetConfig+0xb40>
 8004a20:	dc02      	bgt.n	8004a28 <UART_SetConfig+0xa28>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02a      	beq.n	8004a7c <UART_SetConfig+0xa7c>
 8004a26:	e1a5      	b.n	8004d74 <UART_SetConfig+0xd74>
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d100      	bne.n	8004a2e <UART_SetConfig+0xa2e>
 8004a2c:	e0df      	b.n	8004bee <UART_SetConfig+0xbee>
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d100      	bne.n	8004a34 <UART_SetConfig+0xa34>
 8004a32:	e13e      	b.n	8004cb2 <UART_SetConfig+0xcb2>
 8004a34:	e19e      	b.n	8004d74 <UART_SetConfig+0xd74>
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	00f42400 	.word	0x00f42400
 8004a3c:	f4240000 	.word	0xf4240000
 8004a40:	01e84800 	.word	0x01e84800
 8004a44:	03d09000 	.word	0x03d09000
 8004a48:	07a12000 	.word	0x07a12000
 8004a4c:	0f424000 	.word	0x0f424000
 8004a50:	14585500 	.word	0x14585500
 8004a54:	186a0000 	.word	0x186a0000
 8004a58:	1e848000 	.word	0x1e848000
 8004a5c:	28b0aa00 	.word	0x28b0aa00
 8004a60:	3d090000 	.word	0x3d090000
 8004a64:	7a120000 	.word	0x7a120000
 8004a68:	000aaa00 	.word	0x000aaa00
 8004a6c:	000ccc00 	.word	0x000ccc00
 8004a70:	00155500 	.word	0x00155500
 8004a74:	000002ff 	.word	0x000002ff
 8004a78:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a7c:	f7fe fa48 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 8004a80:	0003      	movs	r3, r0
 8004a82:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d044      	beq.n	8004b16 <UART_SetConfig+0xb16>
 8004a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d03e      	beq.n	8004b12 <UART_SetConfig+0xb12>
 8004a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d038      	beq.n	8004b0e <UART_SetConfig+0xb0e>
 8004a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d032      	beq.n	8004b0a <UART_SetConfig+0xb0a>
 8004aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d02c      	beq.n	8004b06 <UART_SetConfig+0xb06>
 8004aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	d026      	beq.n	8004b02 <UART_SetConfig+0xb02>
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	2b06      	cmp	r3, #6
 8004aba:	d020      	beq.n	8004afe <UART_SetConfig+0xafe>
 8004abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b07      	cmp	r3, #7
 8004ac2:	d01a      	beq.n	8004afa <UART_SetConfig+0xafa>
 8004ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d014      	beq.n	8004af6 <UART_SetConfig+0xaf6>
 8004acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	2b09      	cmp	r3, #9
 8004ad2:	d00e      	beq.n	8004af2 <UART_SetConfig+0xaf2>
 8004ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	2b0a      	cmp	r3, #10
 8004ada:	d008      	beq.n	8004aee <UART_SetConfig+0xaee>
 8004adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2b0b      	cmp	r3, #11
 8004ae2:	d102      	bne.n	8004aea <UART_SetConfig+0xaea>
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	e016      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e014      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004aee:	2380      	movs	r3, #128	; 0x80
 8004af0:	e012      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004af2:	2340      	movs	r3, #64	; 0x40
 8004af4:	e010      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004af6:	2320      	movs	r3, #32
 8004af8:	e00e      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004afa:	2310      	movs	r3, #16
 8004afc:	e00c      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004afe:	230c      	movs	r3, #12
 8004b00:	e00a      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004b02:	230a      	movs	r3, #10
 8004b04:	e008      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004b06:	2308      	movs	r3, #8
 8004b08:	e006      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004b0a:	2306      	movs	r3, #6
 8004b0c:	e004      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004b0e:	2304      	movs	r3, #4
 8004b10:	e002      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e000      	b.n	8004b18 <UART_SetConfig+0xb18>
 8004b16:	2301      	movs	r3, #1
 8004b18:	0019      	movs	r1, r3
 8004b1a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004b1c:	f7fb faf2 	bl	8000104 <__udivsi3>
 8004b20:	0003      	movs	r3, r0
 8004b22:	005a      	lsls	r2, r3, #1
 8004b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	18d2      	adds	r2, r2, r3
 8004b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	0019      	movs	r1, r3
 8004b32:	0010      	movs	r0, r2
 8004b34:	f7fb fae6 	bl	8000104 <__udivsi3>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004b3e:	e121      	b.n	8004d84 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d043      	beq.n	8004bd0 <UART_SetConfig+0xbd0>
 8004b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d03d      	beq.n	8004bcc <UART_SetConfig+0xbcc>
 8004b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d037      	beq.n	8004bc8 <UART_SetConfig+0xbc8>
 8004b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d031      	beq.n	8004bc4 <UART_SetConfig+0xbc4>
 8004b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d02b      	beq.n	8004bc0 <UART_SetConfig+0xbc0>
 8004b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	d025      	beq.n	8004bbc <UART_SetConfig+0xbbc>
 8004b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b06      	cmp	r3, #6
 8004b76:	d01f      	beq.n	8004bb8 <UART_SetConfig+0xbb8>
 8004b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b07      	cmp	r3, #7
 8004b7e:	d019      	beq.n	8004bb4 <UART_SetConfig+0xbb4>
 8004b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d013      	beq.n	8004bb0 <UART_SetConfig+0xbb0>
 8004b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b09      	cmp	r3, #9
 8004b8e:	d00d      	beq.n	8004bac <UART_SetConfig+0xbac>
 8004b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2b0a      	cmp	r3, #10
 8004b96:	d007      	beq.n	8004ba8 <UART_SetConfig+0xba8>
 8004b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	2b0b      	cmp	r3, #11
 8004b9e:	d101      	bne.n	8004ba4 <UART_SetConfig+0xba4>
 8004ba0:	4bba      	ldr	r3, [pc, #744]	; (8004e8c <UART_SetConfig+0xe8c>)
 8004ba2:	e016      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004ba4:	4bba      	ldr	r3, [pc, #744]	; (8004e90 <UART_SetConfig+0xe90>)
 8004ba6:	e014      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004ba8:	4bba      	ldr	r3, [pc, #744]	; (8004e94 <UART_SetConfig+0xe94>)
 8004baa:	e012      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bac:	4bba      	ldr	r3, [pc, #744]	; (8004e98 <UART_SetConfig+0xe98>)
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bb0:	4bba      	ldr	r3, [pc, #744]	; (8004e9c <UART_SetConfig+0xe9c>)
 8004bb2:	e00e      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bb4:	4bba      	ldr	r3, [pc, #744]	; (8004ea0 <UART_SetConfig+0xea0>)
 8004bb6:	e00c      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bb8:	4bba      	ldr	r3, [pc, #744]	; (8004ea4 <UART_SetConfig+0xea4>)
 8004bba:	e00a      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bbc:	4bba      	ldr	r3, [pc, #744]	; (8004ea8 <UART_SetConfig+0xea8>)
 8004bbe:	e008      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bc0:	4bba      	ldr	r3, [pc, #744]	; (8004eac <UART_SetConfig+0xeac>)
 8004bc2:	e006      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bc4:	4bba      	ldr	r3, [pc, #744]	; (8004eb0 <UART_SetConfig+0xeb0>)
 8004bc6:	e004      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bc8:	4bba      	ldr	r3, [pc, #744]	; (8004eb4 <UART_SetConfig+0xeb4>)
 8004bca:	e002      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bcc:	4bba      	ldr	r3, [pc, #744]	; (8004eb8 <UART_SetConfig+0xeb8>)
 8004bce:	e000      	b.n	8004bd2 <UART_SetConfig+0xbd2>
 8004bd0:	4baf      	ldr	r3, [pc, #700]	; (8004e90 <UART_SetConfig+0xe90>)
 8004bd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bd4:	6852      	ldr	r2, [r2, #4]
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	189a      	adds	r2, r3, r2
 8004bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	0019      	movs	r1, r3
 8004be0:	0010      	movs	r0, r2
 8004be2:	f7fb fa8f 	bl	8000104 <__udivsi3>
 8004be6:	0003      	movs	r3, r0
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004bec:	e0ca      	b.n	8004d84 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fe f903 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8004bf2:	0003      	movs	r3, r0
 8004bf4:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d044      	beq.n	8004c88 <UART_SetConfig+0xc88>
 8004bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d03e      	beq.n	8004c84 <UART_SetConfig+0xc84>
 8004c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d038      	beq.n	8004c80 <UART_SetConfig+0xc80>
 8004c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d032      	beq.n	8004c7c <UART_SetConfig+0xc7c>
 8004c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d02c      	beq.n	8004c78 <UART_SetConfig+0xc78>
 8004c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d026      	beq.n	8004c74 <UART_SetConfig+0xc74>
 8004c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d020      	beq.n	8004c70 <UART_SetConfig+0xc70>
 8004c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b07      	cmp	r3, #7
 8004c34:	d01a      	beq.n	8004c6c <UART_SetConfig+0xc6c>
 8004c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d014      	beq.n	8004c68 <UART_SetConfig+0xc68>
 8004c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b09      	cmp	r3, #9
 8004c44:	d00e      	beq.n	8004c64 <UART_SetConfig+0xc64>
 8004c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b0a      	cmp	r3, #10
 8004c4c:	d008      	beq.n	8004c60 <UART_SetConfig+0xc60>
 8004c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2b0b      	cmp	r3, #11
 8004c54:	d102      	bne.n	8004c5c <UART_SetConfig+0xc5c>
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	e016      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e014      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	e012      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c64:	2340      	movs	r3, #64	; 0x40
 8004c66:	e010      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c68:	2320      	movs	r3, #32
 8004c6a:	e00e      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	e00c      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c70:	230c      	movs	r3, #12
 8004c72:	e00a      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c74:	230a      	movs	r3, #10
 8004c76:	e008      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c78:	2308      	movs	r3, #8
 8004c7a:	e006      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c7c:	2306      	movs	r3, #6
 8004c7e:	e004      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c80:	2304      	movs	r3, #4
 8004c82:	e002      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e000      	b.n	8004c8a <UART_SetConfig+0xc8a>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004c8e:	f7fb fa39 	bl	8000104 <__udivsi3>
 8004c92:	0003      	movs	r3, r0
 8004c94:	005a      	lsls	r2, r3, #1
 8004c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	18d2      	adds	r2, r2, r3
 8004c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	0019      	movs	r1, r3
 8004ca4:	0010      	movs	r0, r2
 8004ca6:	f7fb fa2d 	bl	8000104 <__udivsi3>
 8004caa:	0003      	movs	r3, r0
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004cb0:	e068      	b.n	8004d84 <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d04c      	beq.n	8004d54 <UART_SetConfig+0xd54>
 8004cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d045      	beq.n	8004d4e <UART_SetConfig+0xd4e>
 8004cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d03e      	beq.n	8004d48 <UART_SetConfig+0xd48>
 8004cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d038      	beq.n	8004d44 <UART_SetConfig+0xd44>
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d031      	beq.n	8004d3e <UART_SetConfig+0xd3e>
 8004cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d02b      	beq.n	8004d3a <UART_SetConfig+0xd3a>
 8004ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b06      	cmp	r3, #6
 8004ce8:	d025      	beq.n	8004d36 <UART_SetConfig+0xd36>
 8004cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b07      	cmp	r3, #7
 8004cf0:	d01e      	beq.n	8004d30 <UART_SetConfig+0xd30>
 8004cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d017      	beq.n	8004d2a <UART_SetConfig+0xd2a>
 8004cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	d010      	beq.n	8004d24 <UART_SetConfig+0xd24>
 8004d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b0a      	cmp	r3, #10
 8004d08:	d009      	beq.n	8004d1e <UART_SetConfig+0xd1e>
 8004d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b0b      	cmp	r3, #11
 8004d10:	d102      	bne.n	8004d18 <UART_SetConfig+0xd18>
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	e01f      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	025b      	lsls	r3, r3, #9
 8004d1c:	e01c      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	e019      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d24:	2380      	movs	r3, #128	; 0x80
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	e016      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d2a:	2380      	movs	r3, #128	; 0x80
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	e013      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	015b      	lsls	r3, r3, #5
 8004d34:	e010      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d36:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <UART_SetConfig+0xebc>)
 8004d38:	e00e      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d3a:	4b61      	ldr	r3, [pc, #388]	; (8004ec0 <UART_SetConfig+0xec0>)
 8004d3c:	e00c      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d3e:	2380      	movs	r3, #128	; 0x80
 8004d40:	019b      	lsls	r3, r3, #6
 8004d42:	e009      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d44:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <UART_SetConfig+0xec4>)
 8004d46:	e007      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	01db      	lsls	r3, r3, #7
 8004d4c:	e004      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	e001      	b.n	8004d58 <UART_SetConfig+0xd58>
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	025b      	lsls	r3, r3, #9
 8004d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d5a:	6852      	ldr	r2, [r2, #4]
 8004d5c:	0852      	lsrs	r2, r2, #1
 8004d5e:	189a      	adds	r2, r3, r2
 8004d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0019      	movs	r1, r3
 8004d66:	0010      	movs	r0, r2
 8004d68:	f7fb f9cc 	bl	8000104 <__udivsi3>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004d72:	e007      	b.n	8004d84 <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 8004d74:	231b      	movs	r3, #27
 8004d76:	2258      	movs	r2, #88	; 0x58
 8004d78:	4694      	mov	ip, r2
 8004d7a:	44bc      	add	ip, r7
 8004d7c:	4463      	add	r3, ip
 8004d7e:	2201      	movs	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
        break;
 8004d82:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d86:	2b0f      	cmp	r3, #15
 8004d88:	d920      	bls.n	8004dcc <UART_SetConfig+0xdcc>
 8004d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d8c:	4a4e      	ldr	r2, [pc, #312]	; (8004ec8 <UART_SetConfig+0xec8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d81c      	bhi.n	8004dcc <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	200e      	movs	r0, #14
 8004d98:	2458      	movs	r4, #88	; 0x58
 8004d9a:	193b      	adds	r3, r7, r4
 8004d9c:	181b      	adds	r3, r3, r0
 8004d9e:	210f      	movs	r1, #15
 8004da0:	438a      	bics	r2, r1
 8004da2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2207      	movs	r2, #7
 8004dac:	4013      	ands	r3, r2
 8004dae:	b299      	uxth	r1, r3
 8004db0:	193b      	adds	r3, r7, r4
 8004db2:	181b      	adds	r3, r3, r0
 8004db4:	193a      	adds	r2, r7, r4
 8004db6:	1812      	adds	r2, r2, r0
 8004db8:	8812      	ldrh	r2, [r2, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	193a      	adds	r2, r7, r4
 8004dc4:	1812      	adds	r2, r2, r0
 8004dc6:	8812      	ldrh	r2, [r2, #0]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	e1d4      	b.n	8005176 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8004dcc:	231b      	movs	r3, #27
 8004dce:	2258      	movs	r2, #88	; 0x58
 8004dd0:	4694      	mov	ip, r2
 8004dd2:	44bc      	add	ip, r7
 8004dd4:	4463      	add	r3, ip
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e1cc      	b.n	8005176 <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 8004ddc:	2323      	movs	r3, #35	; 0x23
 8004dde:	2258      	movs	r2, #88	; 0x58
 8004de0:	4694      	mov	ip, r2
 8004de2:	44bc      	add	ip, r7
 8004de4:	4463      	add	r3, ip
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d100      	bne.n	8004dee <UART_SetConfig+0xdee>
 8004dec:	e08f      	b.n	8004f0e <UART_SetConfig+0xf0e>
 8004dee:	dc02      	bgt.n	8004df6 <UART_SetConfig+0xdf6>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <UART_SetConfig+0xe04>
 8004df4:	e1a4      	b.n	8005140 <UART_SetConfig+0x1140>
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d100      	bne.n	8004dfc <UART_SetConfig+0xdfc>
 8004dfa:	e0df      	b.n	8004fbc <UART_SetConfig+0xfbc>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d100      	bne.n	8004e02 <UART_SetConfig+0xe02>
 8004e00:	e13e      	b.n	8005080 <UART_SetConfig+0x1080>
 8004e02:	e19d      	b.n	8005140 <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7fe f884 	bl	8002f10 <HAL_RCC_GetPCLK1Freq>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d100      	bne.n	8004e16 <UART_SetConfig+0xe16>
 8004e14:	e066      	b.n	8004ee4 <UART_SetConfig+0xee4>
 8004e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d100      	bne.n	8004e20 <UART_SetConfig+0xe20>
 8004e1e:	e05f      	b.n	8004ee0 <UART_SetConfig+0xee0>
 8004e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d059      	beq.n	8004edc <UART_SetConfig+0xedc>
 8004e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d053      	beq.n	8004ed8 <UART_SetConfig+0xed8>
 8004e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d04d      	beq.n	8004ed4 <UART_SetConfig+0xed4>
 8004e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	2b05      	cmp	r3, #5
 8004e3e:	d047      	beq.n	8004ed0 <UART_SetConfig+0xed0>
 8004e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d041      	beq.n	8004ecc <UART_SetConfig+0xecc>
 8004e48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2b07      	cmp	r3, #7
 8004e4e:	d01a      	beq.n	8004e86 <UART_SetConfig+0xe86>
 8004e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d014      	beq.n	8004e82 <UART_SetConfig+0xe82>
 8004e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b09      	cmp	r3, #9
 8004e5e:	d00e      	beq.n	8004e7e <UART_SetConfig+0xe7e>
 8004e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b0a      	cmp	r3, #10
 8004e66:	d008      	beq.n	8004e7a <UART_SetConfig+0xe7a>
 8004e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b0b      	cmp	r3, #11
 8004e6e:	d102      	bne.n	8004e76 <UART_SetConfig+0xe76>
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	e037      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e035      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	e033      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	e031      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004e82:	2320      	movs	r3, #32
 8004e84:	e02f      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004e86:	2310      	movs	r3, #16
 8004e88:	e02d      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	0001e848 	.word	0x0001e848
 8004e90:	01e84800 	.word	0x01e84800
 8004e94:	0003d090 	.word	0x0003d090
 8004e98:	0007a120 	.word	0x0007a120
 8004e9c:	000f4240 	.word	0x000f4240
 8004ea0:	001e8480 	.word	0x001e8480
 8004ea4:	0028b0aa 	.word	0x0028b0aa
 8004ea8:	0030d400 	.word	0x0030d400
 8004eac:	003d0900 	.word	0x003d0900
 8004eb0:	00516154 	.word	0x00516154
 8004eb4:	007a1200 	.word	0x007a1200
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	00001554 	.word	0x00001554
 8004ec0:	00001998 	.word	0x00001998
 8004ec4:	00002aaa 	.word	0x00002aaa
 8004ec8:	0000ffff 	.word	0x0000ffff
 8004ecc:	230c      	movs	r3, #12
 8004ece:	e00a      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004ed0:	230a      	movs	r3, #10
 8004ed2:	e008      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004ed4:	2308      	movs	r3, #8
 8004ed6:	e006      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004ed8:	2306      	movs	r3, #6
 8004eda:	e004      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004edc:	2304      	movs	r3, #4
 8004ede:	e002      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e000      	b.n	8004ee6 <UART_SetConfig+0xee6>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004eea:	f7fb f90b 	bl	8000104 <__udivsi3>
 8004eee:	0003      	movs	r3, r0
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	18d2      	adds	r2, r2, r3
 8004efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	0019      	movs	r1, r3
 8004f00:	0010      	movs	r0, r2
 8004f02:	f7fb f8ff 	bl	8000104 <__udivsi3>
 8004f06:	0003      	movs	r3, r0
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004f0c:	e120      	b.n	8005150 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d043      	beq.n	8004f9e <UART_SetConfig+0xf9e>
 8004f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d03d      	beq.n	8004f9a <UART_SetConfig+0xf9a>
 8004f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d037      	beq.n	8004f96 <UART_SetConfig+0xf96>
 8004f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d031      	beq.n	8004f92 <UART_SetConfig+0xf92>
 8004f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d02b      	beq.n	8004f8e <UART_SetConfig+0xf8e>
 8004f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d025      	beq.n	8004f8a <UART_SetConfig+0xf8a>
 8004f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b06      	cmp	r3, #6
 8004f44:	d01f      	beq.n	8004f86 <UART_SetConfig+0xf86>
 8004f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	2b07      	cmp	r3, #7
 8004f4c:	d019      	beq.n	8004f82 <UART_SetConfig+0xf82>
 8004f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d013      	beq.n	8004f7e <UART_SetConfig+0xf7e>
 8004f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	d00d      	beq.n	8004f7a <UART_SetConfig+0xf7a>
 8004f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b0a      	cmp	r3, #10
 8004f64:	d007      	beq.n	8004f76 <UART_SetConfig+0xf76>
 8004f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b0b      	cmp	r3, #11
 8004f6c:	d101      	bne.n	8004f72 <UART_SetConfig+0xf72>
 8004f6e:	4b8e      	ldr	r3, [pc, #568]	; (80051a8 <UART_SetConfig+0x11a8>)
 8004f70:	e016      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f72:	4b8e      	ldr	r3, [pc, #568]	; (80051ac <UART_SetConfig+0x11ac>)
 8004f74:	e014      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f76:	4b8e      	ldr	r3, [pc, #568]	; (80051b0 <UART_SetConfig+0x11b0>)
 8004f78:	e012      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f7a:	4b8e      	ldr	r3, [pc, #568]	; (80051b4 <UART_SetConfig+0x11b4>)
 8004f7c:	e010      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f7e:	4b8e      	ldr	r3, [pc, #568]	; (80051b8 <UART_SetConfig+0x11b8>)
 8004f80:	e00e      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f82:	4b8e      	ldr	r3, [pc, #568]	; (80051bc <UART_SetConfig+0x11bc>)
 8004f84:	e00c      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f86:	4b8e      	ldr	r3, [pc, #568]	; (80051c0 <UART_SetConfig+0x11c0>)
 8004f88:	e00a      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f8a:	4b8e      	ldr	r3, [pc, #568]	; (80051c4 <UART_SetConfig+0x11c4>)
 8004f8c:	e008      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f8e:	4b8e      	ldr	r3, [pc, #568]	; (80051c8 <UART_SetConfig+0x11c8>)
 8004f90:	e006      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f92:	4b8e      	ldr	r3, [pc, #568]	; (80051cc <UART_SetConfig+0x11cc>)
 8004f94:	e004      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f96:	4b8e      	ldr	r3, [pc, #568]	; (80051d0 <UART_SetConfig+0x11d0>)
 8004f98:	e002      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f9a:	4b8e      	ldr	r3, [pc, #568]	; (80051d4 <UART_SetConfig+0x11d4>)
 8004f9c:	e000      	b.n	8004fa0 <UART_SetConfig+0xfa0>
 8004f9e:	4b83      	ldr	r3, [pc, #524]	; (80051ac <UART_SetConfig+0x11ac>)
 8004fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fa2:	6852      	ldr	r2, [r2, #4]
 8004fa4:	0852      	lsrs	r2, r2, #1
 8004fa6:	189a      	adds	r2, r3, r2
 8004fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0019      	movs	r1, r3
 8004fae:	0010      	movs	r0, r2
 8004fb0:	f7fb f8a8 	bl	8000104 <__udivsi3>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004fba:	e0c9      	b.n	8005150 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fbc:	f7fd ff1c 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d044      	beq.n	8005056 <UART_SetConfig+0x1056>
 8004fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d03e      	beq.n	8005052 <UART_SetConfig+0x1052>
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d038      	beq.n	800504e <UART_SetConfig+0x104e>
 8004fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d032      	beq.n	800504a <UART_SetConfig+0x104a>
 8004fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d02c      	beq.n	8005046 <UART_SetConfig+0x1046>
 8004fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	2b05      	cmp	r3, #5
 8004ff2:	d026      	beq.n	8005042 <UART_SetConfig+0x1042>
 8004ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b06      	cmp	r3, #6
 8004ffa:	d020      	beq.n	800503e <UART_SetConfig+0x103e>
 8004ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b07      	cmp	r3, #7
 8005002:	d01a      	beq.n	800503a <UART_SetConfig+0x103a>
 8005004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b08      	cmp	r3, #8
 800500a:	d014      	beq.n	8005036 <UART_SetConfig+0x1036>
 800500c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b09      	cmp	r3, #9
 8005012:	d00e      	beq.n	8005032 <UART_SetConfig+0x1032>
 8005014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b0a      	cmp	r3, #10
 800501a:	d008      	beq.n	800502e <UART_SetConfig+0x102e>
 800501c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b0b      	cmp	r3, #11
 8005022:	d102      	bne.n	800502a <UART_SetConfig+0x102a>
 8005024:	2380      	movs	r3, #128	; 0x80
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	e016      	b.n	8005058 <UART_SetConfig+0x1058>
 800502a:	2301      	movs	r3, #1
 800502c:	e014      	b.n	8005058 <UART_SetConfig+0x1058>
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	e012      	b.n	8005058 <UART_SetConfig+0x1058>
 8005032:	2340      	movs	r3, #64	; 0x40
 8005034:	e010      	b.n	8005058 <UART_SetConfig+0x1058>
 8005036:	2320      	movs	r3, #32
 8005038:	e00e      	b.n	8005058 <UART_SetConfig+0x1058>
 800503a:	2310      	movs	r3, #16
 800503c:	e00c      	b.n	8005058 <UART_SetConfig+0x1058>
 800503e:	230c      	movs	r3, #12
 8005040:	e00a      	b.n	8005058 <UART_SetConfig+0x1058>
 8005042:	230a      	movs	r3, #10
 8005044:	e008      	b.n	8005058 <UART_SetConfig+0x1058>
 8005046:	2308      	movs	r3, #8
 8005048:	e006      	b.n	8005058 <UART_SetConfig+0x1058>
 800504a:	2306      	movs	r3, #6
 800504c:	e004      	b.n	8005058 <UART_SetConfig+0x1058>
 800504e:	2304      	movs	r3, #4
 8005050:	e002      	b.n	8005058 <UART_SetConfig+0x1058>
 8005052:	2302      	movs	r3, #2
 8005054:	e000      	b.n	8005058 <UART_SetConfig+0x1058>
 8005056:	2301      	movs	r3, #1
 8005058:	0019      	movs	r1, r3
 800505a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800505c:	f7fb f852 	bl	8000104 <__udivsi3>
 8005060:	0003      	movs	r3, r0
 8005062:	001a      	movs	r2, r3
 8005064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	18d2      	adds	r2, r2, r3
 800506c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	0019      	movs	r1, r3
 8005072:	0010      	movs	r0, r2
 8005074:	f7fb f846 	bl	8000104 <__udivsi3>
 8005078:	0003      	movs	r3, r0
 800507a:	b29b      	uxth	r3, r3
 800507c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800507e:	e067      	b.n	8005150 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	2b00      	cmp	r3, #0
 8005086:	d04b      	beq.n	8005120 <UART_SetConfig+0x1120>
 8005088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b01      	cmp	r3, #1
 800508e:	d044      	beq.n	800511a <UART_SetConfig+0x111a>
 8005090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	2b02      	cmp	r3, #2
 8005096:	d03d      	beq.n	8005114 <UART_SetConfig+0x1114>
 8005098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b03      	cmp	r3, #3
 800509e:	d037      	beq.n	8005110 <UART_SetConfig+0x1110>
 80050a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d030      	beq.n	800510a <UART_SetConfig+0x110a>
 80050a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d02a      	beq.n	8005106 <UART_SetConfig+0x1106>
 80050b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d024      	beq.n	8005102 <UART_SetConfig+0x1102>
 80050b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2b07      	cmp	r3, #7
 80050be:	d01d      	beq.n	80050fc <UART_SetConfig+0x10fc>
 80050c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d016      	beq.n	80050f6 <UART_SetConfig+0x10f6>
 80050c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b09      	cmp	r3, #9
 80050ce:	d00f      	beq.n	80050f0 <UART_SetConfig+0x10f0>
 80050d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b0a      	cmp	r3, #10
 80050d6:	d008      	beq.n	80050ea <UART_SetConfig+0x10ea>
 80050d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b0b      	cmp	r3, #11
 80050de:	d101      	bne.n	80050e4 <UART_SetConfig+0x10e4>
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	e01f      	b.n	8005124 <UART_SetConfig+0x1124>
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	e01c      	b.n	8005124 <UART_SetConfig+0x1124>
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	e019      	b.n	8005124 <UART_SetConfig+0x1124>
 80050f0:	2380      	movs	r3, #128	; 0x80
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	e016      	b.n	8005124 <UART_SetConfig+0x1124>
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	e013      	b.n	8005124 <UART_SetConfig+0x1124>
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	e010      	b.n	8005124 <UART_SetConfig+0x1124>
 8005102:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <UART_SetConfig+0x11d8>)
 8005104:	e00e      	b.n	8005124 <UART_SetConfig+0x1124>
 8005106:	4b35      	ldr	r3, [pc, #212]	; (80051dc <UART_SetConfig+0x11dc>)
 8005108:	e00c      	b.n	8005124 <UART_SetConfig+0x1124>
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	015b      	lsls	r3, r3, #5
 800510e:	e009      	b.n	8005124 <UART_SetConfig+0x1124>
 8005110:	4b33      	ldr	r3, [pc, #204]	; (80051e0 <UART_SetConfig+0x11e0>)
 8005112:	e007      	b.n	8005124 <UART_SetConfig+0x1124>
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	019b      	lsls	r3, r3, #6
 8005118:	e004      	b.n	8005124 <UART_SetConfig+0x1124>
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	01db      	lsls	r3, r3, #7
 800511e:	e001      	b.n	8005124 <UART_SetConfig+0x1124>
 8005120:	2380      	movs	r3, #128	; 0x80
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005126:	6852      	ldr	r2, [r2, #4]
 8005128:	0852      	lsrs	r2, r2, #1
 800512a:	189a      	adds	r2, r3, r2
 800512c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0019      	movs	r1, r3
 8005132:	0010      	movs	r0, r2
 8005134:	f7fa ffe6 	bl	8000104 <__udivsi3>
 8005138:	0003      	movs	r3, r0
 800513a:	b29b      	uxth	r3, r3
 800513c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800513e:	e007      	b.n	8005150 <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 8005140:	231b      	movs	r3, #27
 8005142:	2258      	movs	r2, #88	; 0x58
 8005144:	4694      	mov	ip, r2
 8005146:	44bc      	add	ip, r7
 8005148:	4463      	add	r3, ip
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
        break;
 800514e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005152:	2b0f      	cmp	r3, #15
 8005154:	d908      	bls.n	8005168 <UART_SetConfig+0x1168>
 8005156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005158:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <UART_SetConfig+0x11e4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d804      	bhi.n	8005168 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 800515e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005164:	60da      	str	r2, [r3, #12]
 8005166:	e006      	b.n	8005176 <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8005168:	231b      	movs	r3, #27
 800516a:	2258      	movs	r2, #88	; 0x58
 800516c:	4694      	mov	ip, r2
 800516e:	44bc      	add	ip, r7
 8005170:	4463      	add	r3, ip
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005178:	226a      	movs	r2, #106	; 0x6a
 800517a:	2101      	movs	r1, #1
 800517c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800517e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005180:	2268      	movs	r2, #104	; 0x68
 8005182:	2101      	movs	r1, #1
 8005184:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	2200      	movs	r2, #0
 800518a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800518c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518e:	2200      	movs	r2, #0
 8005190:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005192:	231b      	movs	r3, #27
 8005194:	2258      	movs	r2, #88	; 0x58
 8005196:	4694      	mov	ip, r2
 8005198:	44bc      	add	ip, r7
 800519a:	4463      	add	r3, ip
 800519c:	781b      	ldrb	r3, [r3, #0]
}
 800519e:	0018      	movs	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b021      	add	sp, #132	; 0x84
 80051a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	0000f424 	.word	0x0000f424
 80051ac:	00f42400 	.word	0x00f42400
 80051b0:	0001e848 	.word	0x0001e848
 80051b4:	0003d090 	.word	0x0003d090
 80051b8:	0007a120 	.word	0x0007a120
 80051bc:	000f4240 	.word	0x000f4240
 80051c0:	00145855 	.word	0x00145855
 80051c4:	00186a00 	.word	0x00186a00
 80051c8:	001e8480 	.word	0x001e8480
 80051cc:	0028b0aa 	.word	0x0028b0aa
 80051d0:	003d0900 	.word	0x003d0900
 80051d4:	007a1200 	.word	0x007a1200
 80051d8:	00000aaa 	.word	0x00000aaa
 80051dc:	00000ccc 	.word	0x00000ccc
 80051e0:	00001555 	.word	0x00001555
 80051e4:	0000ffff 	.word	0x0000ffff

080051e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	2201      	movs	r2, #1
 80051f6:	4013      	ands	r3, r2
 80051f8:	d00b      	beq.n	8005212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a4a      	ldr	r2, [pc, #296]	; (800532c <UART_AdvFeatureConfig+0x144>)
 8005202:	4013      	ands	r3, r2
 8005204:	0019      	movs	r1, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	2202      	movs	r2, #2
 8005218:	4013      	ands	r3, r2
 800521a:	d00b      	beq.n	8005234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4a43      	ldr	r2, [pc, #268]	; (8005330 <UART_AdvFeatureConfig+0x148>)
 8005224:	4013      	ands	r3, r2
 8005226:	0019      	movs	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	2204      	movs	r2, #4
 800523a:	4013      	ands	r3, r2
 800523c:	d00b      	beq.n	8005256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a3b      	ldr	r2, [pc, #236]	; (8005334 <UART_AdvFeatureConfig+0x14c>)
 8005246:	4013      	ands	r3, r2
 8005248:	0019      	movs	r1, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	2208      	movs	r2, #8
 800525c:	4013      	ands	r3, r2
 800525e:	d00b      	beq.n	8005278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4a34      	ldr	r2, [pc, #208]	; (8005338 <UART_AdvFeatureConfig+0x150>)
 8005268:	4013      	ands	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527c:	2210      	movs	r2, #16
 800527e:	4013      	ands	r3, r2
 8005280:	d00b      	beq.n	800529a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	4a2c      	ldr	r2, [pc, #176]	; (800533c <UART_AdvFeatureConfig+0x154>)
 800528a:	4013      	ands	r3, r2
 800528c:	0019      	movs	r1, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	2220      	movs	r2, #32
 80052a0:	4013      	ands	r3, r2
 80052a2:	d00b      	beq.n	80052bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	4a25      	ldr	r2, [pc, #148]	; (8005340 <UART_AdvFeatureConfig+0x158>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	0019      	movs	r1, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	2240      	movs	r2, #64	; 0x40
 80052c2:	4013      	ands	r3, r2
 80052c4:	d01d      	beq.n	8005302 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a1d      	ldr	r2, [pc, #116]	; (8005344 <UART_AdvFeatureConfig+0x15c>)
 80052ce:	4013      	ands	r3, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	035b      	lsls	r3, r3, #13
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d10b      	bne.n	8005302 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a15      	ldr	r2, [pc, #84]	; (8005348 <UART_AdvFeatureConfig+0x160>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	0019      	movs	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	4013      	ands	r3, r2
 800530a:	d00b      	beq.n	8005324 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4a0e      	ldr	r2, [pc, #56]	; (800534c <UART_AdvFeatureConfig+0x164>)
 8005314:	4013      	ands	r3, r2
 8005316:	0019      	movs	r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	605a      	str	r2, [r3, #4]
  }
}
 8005324:	46c0      	nop			; (mov r8, r8)
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}
 800532c:	fffdffff 	.word	0xfffdffff
 8005330:	fffeffff 	.word	0xfffeffff
 8005334:	fffbffff 	.word	0xfffbffff
 8005338:	ffff7fff 	.word	0xffff7fff
 800533c:	ffffefff 	.word	0xffffefff
 8005340:	ffffdfff 	.word	0xffffdfff
 8005344:	ffefffff 	.word	0xffefffff
 8005348:	ff9fffff 	.word	0xff9fffff
 800534c:	fff7ffff 	.word	0xfff7ffff

08005350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2288      	movs	r2, #136	; 0x88
 800535c:	2100      	movs	r1, #0
 800535e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005360:	f7fc fb88 	bl	8001a74 <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2208      	movs	r2, #8
 8005370:	4013      	ands	r3, r2
 8005372:	2b08      	cmp	r3, #8
 8005374:	d10d      	bne.n	8005392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	0399      	lsls	r1, r3, #14
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <UART_CheckIdleState+0x90>)
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	0013      	movs	r3, r2
 8005384:	2200      	movs	r2, #0
 8005386:	f000 f82d 	bl	80053e4 <UART_WaitOnFlagUntilTimeout>
 800538a:	1e03      	subs	r3, r0, #0
 800538c:	d001      	beq.n	8005392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e021      	b.n	80053d6 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2204      	movs	r2, #4
 800539a:	4013      	ands	r3, r2
 800539c:	2b04      	cmp	r3, #4
 800539e:	d10d      	bne.n	80053bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	03d9      	lsls	r1, r3, #15
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <UART_CheckIdleState+0x90>)
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	0013      	movs	r3, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	f000 f818 	bl	80053e4 <UART_WaitOnFlagUntilTimeout>
 80053b4:	1e03      	subs	r3, r0, #0
 80053b6:	d001      	beq.n	80053bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e00c      	b.n	80053d6 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	2120      	movs	r1, #32
 80053c2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2284      	movs	r2, #132	; 0x84
 80053c8:	2120      	movs	r1, #32
 80053ca:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	227c      	movs	r2, #124	; 0x7c
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	0018      	movs	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	b004      	add	sp, #16
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	01ffffff 	.word	0x01ffffff

080053e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	1dfb      	adds	r3, r7, #7
 80053f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f4:	e02b      	b.n	800544e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	3301      	adds	r3, #1
 80053fa:	d028      	beq.n	800544e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fc:	f7fc fb3a 	bl	8001a74 <HAL_GetTick>
 8005400:	0002      	movs	r2, r0
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <UART_WaitOnFlagUntilTimeout+0x2e>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11d      	bne.n	800544e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4916      	ldr	r1, [pc, #88]	; (8005478 <UART_WaitOnFlagUntilTimeout+0x94>)
 800541e:	400a      	ands	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2101      	movs	r1, #1
 800542e:	438a      	bics	r2, r1
 8005430:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2280      	movs	r2, #128	; 0x80
 8005436:	2120      	movs	r1, #32
 8005438:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2284      	movs	r2, #132	; 0x84
 800543e:	2120      	movs	r1, #32
 8005440:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	227c      	movs	r2, #124	; 0x7c
 8005446:	2100      	movs	r1, #0
 8005448:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e00f      	b.n	800546e <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	4013      	ands	r3, r2
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	425a      	negs	r2, r3
 800545e:	4153      	adcs	r3, r2
 8005460:	b2db      	uxtb	r3, r3
 8005462:	001a      	movs	r2, r3
 8005464:	1dfb      	adds	r3, r7, #7
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d0c4      	beq.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	0018      	movs	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	b004      	add	sp, #16
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	fffffe5f 	.word	0xfffffe5f

0800547c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	21c0      	movs	r1, #192	; 0xc0
 8005490:	438a      	bics	r2, r1
 8005492:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4905      	ldr	r1, [pc, #20]	; (80054b4 <UART_EndTxTransfer+0x38>)
 80054a0:	400a      	ands	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2280      	movs	r2, #128	; 0x80
 80054a8:	2120      	movs	r1, #32
 80054aa:	5099      	str	r1, [r3, r2]
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	ff7fffff 	.word	0xff7fffff

080054b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	490b      	ldr	r1, [pc, #44]	; (80054f8 <UART_EndRxTransfer+0x40>)
 80054cc:	400a      	ands	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4908      	ldr	r1, [pc, #32]	; (80054fc <UART_EndRxTransfer+0x44>)
 80054dc:	400a      	ands	r2, r1
 80054de:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2284      	movs	r2, #132	; 0x84
 80054e4:	2120      	movs	r1, #32
 80054e6:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b002      	add	sp, #8
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	fffffedf 	.word	0xfffffedf
 80054fc:	effffffe 	.word	0xeffffffe

08005500 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2220      	movs	r2, #32
 8005516:	4013      	ands	r3, r2
 8005518:	d114      	bne.n	8005544 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2256      	movs	r2, #86	; 0x56
 800551e:	2100      	movs	r1, #0
 8005520:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2180      	movs	r1, #128	; 0x80
 800552e:	438a      	bics	r2, r1
 8005530:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2140      	movs	r1, #64	; 0x40
 800553e:	430a      	orrs	r2, r1
 8005540:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005542:	e003      	b.n	800554c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	0018      	movs	r0, r3
 8005548:	f7fe fd3a 	bl	8003fc0 <HAL_UART_TxCpltCallback>
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	b004      	add	sp, #16
 8005552:	bd80      	pop	{r7, pc}

08005554 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	0018      	movs	r0, r3
 8005566:	f7fe fd33 	bl	8003fd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b004      	add	sp, #16
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2220      	movs	r2, #32
 800558a:	4013      	ands	r3, r2
 800558c:	d11f      	bne.n	80055ce <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	225e      	movs	r2, #94	; 0x5e
 8005592:	2100      	movs	r1, #0
 8005594:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	490f      	ldr	r1, [pc, #60]	; (80055e0 <UART_DMAReceiveCplt+0x6c>)
 80055a2:	400a      	ands	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2101      	movs	r1, #1
 80055b2:	438a      	bics	r2, r1
 80055b4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2140      	movs	r1, #64	; 0x40
 80055c2:	438a      	bics	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2284      	movs	r2, #132	; 0x84
 80055ca:	2120      	movs	r1, #32
 80055cc:	5099      	str	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7fb f8b1 	bl	8000738 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	46bd      	mov	sp, r7
 80055da:	b004      	add	sp, #16
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	fffffeff 	.word	0xfffffeff

080055e4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7fe fcf3 	bl	8003fe0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b004      	add	sp, #16
 8005600:	bd80      	pop	{r7, pc}

08005602 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2280      	movs	r2, #128	; 0x80
 8005614:	589b      	ldr	r3, [r3, r2]
 8005616:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2284      	movs	r2, #132	; 0x84
 800561c:	589b      	ldr	r3, [r3, r2]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2280      	movs	r2, #128	; 0x80
 8005628:	4013      	ands	r3, r2
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d10a      	bne.n	8005644 <UART_DMAError+0x42>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b21      	cmp	r3, #33	; 0x21
 8005632:	d107      	bne.n	8005644 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2256      	movs	r2, #86	; 0x56
 8005638:	2100      	movs	r1, #0
 800563a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff ff1c 	bl	800547c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2240      	movs	r2, #64	; 0x40
 800564c:	4013      	ands	r3, r2
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d10a      	bne.n	8005668 <UART_DMAError+0x66>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b22      	cmp	r3, #34	; 0x22
 8005656:	d107      	bne.n	8005668 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	225e      	movs	r2, #94	; 0x5e
 800565c:	2100      	movs	r1, #0
 800565e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff ff28 	bl	80054b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2288      	movs	r2, #136	; 0x88
 800566c:	589b      	ldr	r3, [r3, r2]
 800566e:	2210      	movs	r2, #16
 8005670:	431a      	orrs	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2188      	movs	r1, #136	; 0x88
 8005676:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	0018      	movs	r0, r3
 800567c:	f7fe fcb8 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005680:	46c0      	nop			; (mov r8, r8)
 8005682:	46bd      	mov	sp, r7
 8005684:	b006      	add	sp, #24
 8005686:	bd80      	pop	{r7, pc}

08005688 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	225e      	movs	r2, #94	; 0x5e
 800569a:	2100      	movs	r1, #0
 800569c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2256      	movs	r2, #86	; 0x56
 80056a2:	2100      	movs	r1, #0
 80056a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fe fca1 	bl	8003ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b004      	add	sp, #16
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2140      	movs	r1, #64	; 0x40
 80056ca:	438a      	bics	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2280      	movs	r2, #128	; 0x80
 80056d2:	2120      	movs	r1, #32
 80056d4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	0018      	movs	r0, r3
 80056e0:	f7fe fc6e 	bl	8003fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}

080056ec <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056f4:	230e      	movs	r3, #14
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	2160      	movs	r1, #96	; 0x60
 80056fc:	5a52      	ldrh	r2, [r2, r1]
 80056fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2284      	movs	r2, #132	; 0x84
 8005704:	589b      	ldr	r3, [r3, r2]
 8005706:	2b22      	cmp	r3, #34	; 0x22
 8005708:	d141      	bne.n	800578e <UART_RxISR_8BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005710:	210c      	movs	r1, #12
 8005712:	187b      	adds	r3, r7, r1
 8005714:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005716:	187b      	adds	r3, r7, r1
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	230e      	movs	r3, #14
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b2d9      	uxtb	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005728:	400a      	ands	r2, r1
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	225e      	movs	r2, #94	; 0x5e
 800573c:	5a9b      	ldrh	r3, [r3, r2]
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b299      	uxth	r1, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	225e      	movs	r2, #94	; 0x5e
 8005748:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	225e      	movs	r2, #94	; 0x5e
 800574e:	5a9b      	ldrh	r3, [r3, r2]
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d123      	bne.n	800579e <UART_RxISR_8BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4911      	ldr	r1, [pc, #68]	; (80057a8 <UART_RxISR_8BIT+0xbc>)
 8005762:	400a      	ands	r2, r1
 8005764:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2101      	movs	r1, #1
 8005772:	438a      	bics	r2, r1
 8005774:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2284      	movs	r2, #132	; 0x84
 800577a:	2120      	movs	r1, #32
 800577c:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	0018      	movs	r0, r3
 8005788:	f7fa ffd6 	bl	8000738 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800578c:	e007      	b.n	800579e <UART_RxISR_8BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2108      	movs	r1, #8
 800579a:	430a      	orrs	r2, r1
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b004      	add	sp, #16
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	fffffedf 	.word	0xfffffedf

080057ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057b4:	230e      	movs	r3, #14
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	2160      	movs	r1, #96	; 0x60
 80057bc:	5a52      	ldrh	r2, [r2, r1]
 80057be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2284      	movs	r2, #132	; 0x84
 80057c4:	589b      	ldr	r3, [r3, r2]
 80057c6:	2b22      	cmp	r3, #34	; 0x22
 80057c8:	d141      	bne.n	800584e <UART_RxISR_16BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057d0:	210c      	movs	r1, #12
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057da:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80057dc:	187b      	adds	r3, r7, r1
 80057de:	220e      	movs	r2, #14
 80057e0:	18ba      	adds	r2, r7, r2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	8812      	ldrh	r2, [r2, #0]
 80057e6:	4013      	ands	r3, r2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	1c9a      	adds	r2, r3, #2
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	225e      	movs	r2, #94	; 0x5e
 80057fc:	5a9b      	ldrh	r3, [r3, r2]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b299      	uxth	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	225e      	movs	r2, #94	; 0x5e
 8005808:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	225e      	movs	r2, #94	; 0x5e
 800580e:	5a9b      	ldrh	r3, [r3, r2]
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d123      	bne.n	800585e <UART_RxISR_16BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4911      	ldr	r1, [pc, #68]	; (8005868 <UART_RxISR_16BIT+0xbc>)
 8005822:	400a      	ands	r2, r1
 8005824:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2101      	movs	r1, #1
 8005832:	438a      	bics	r2, r1
 8005834:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2284      	movs	r2, #132	; 0x84
 800583a:	2120      	movs	r1, #32
 800583c:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	0018      	movs	r0, r3
 8005848:	f7fa ff76 	bl	8000738 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800584c:	e007      	b.n	800585e <UART_RxISR_16BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2108      	movs	r1, #8
 800585a:	430a      	orrs	r2, r1
 800585c:	619a      	str	r2, [r3, #24]
}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	46bd      	mov	sp, r7
 8005862:	b004      	add	sp, #16
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	fffffedf 	.word	0xfffffedf

0800586c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005874:	230c      	movs	r3, #12
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	2160      	movs	r1, #96	; 0x60
 800587c:	5a52      	ldrh	r2, [r2, r1]
 800587e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2284      	movs	r2, #132	; 0x84
 8005884:	589b      	ldr	r3, [r3, r2]
 8005886:	2b22      	cmp	r3, #34	; 0x22
 8005888:	d000      	beq.n	800588c <UART_RxISR_8BIT_FIFOEN+0x20>
 800588a:	e078      	b.n	800597e <UART_RxISR_8BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800588c:	230e      	movs	r3, #14
 800588e:	18fb      	adds	r3, r7, r3
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	2168      	movs	r1, #104	; 0x68
 8005894:	5a52      	ldrh	r2, [r2, r1]
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	e046      	b.n	8005928 <UART_RxISR_8BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a0:	2108      	movs	r1, #8
 80058a2:	187b      	adds	r3, r7, r1
 80058a4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058a6:	187b      	adds	r3, r7, r1
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	230c      	movs	r3, #12
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b2d9      	uxtb	r1, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b8:	400a      	ands	r2, r1
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	225e      	movs	r2, #94	; 0x5e
 80058cc:	5a9b      	ldrh	r3, [r3, r2]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b299      	uxth	r1, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	225e      	movs	r2, #94	; 0x5e
 80058d8:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	225e      	movs	r2, #94	; 0x5e
 80058de:	5a9b      	ldrh	r3, [r3, r2]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d11a      	bne.n	800591c <UART_RxISR_8BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4929      	ldr	r1, [pc, #164]	; (8005998 <UART_RxISR_8BIT_FIFOEN+0x12c>)
 80058f2:	400a      	ands	r2, r1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4926      	ldr	r1, [pc, #152]	; (800599c <UART_RxISR_8BIT_FIFOEN+0x130>)
 8005902:	400a      	ands	r2, r1
 8005904:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2284      	movs	r2, #132	; 0x84
 800590a:	2120      	movs	r1, #32
 800590c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	0018      	movs	r0, r3
 8005918:	f7fa ff0e 	bl	8000738 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800591c:	210e      	movs	r1, #14
 800591e:	187b      	adds	r3, r7, r1
 8005920:	881a      	ldrh	r2, [r3, #0]
 8005922:	187b      	adds	r3, r7, r1
 8005924:	3a01      	subs	r2, #1
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	230e      	movs	r3, #14
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1b3      	bne.n	800589a <UART_RxISR_8BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005932:	200a      	movs	r0, #10
 8005934:	183b      	adds	r3, r7, r0
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	215e      	movs	r1, #94	; 0x5e
 800593a:	5a52      	ldrh	r2, [r2, r1]
 800593c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800593e:	183b      	adds	r3, r7, r0
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d023      	beq.n	800598e <UART_RxISR_8BIT_FIFOEN+0x122>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2268      	movs	r2, #104	; 0x68
 800594a:	5a9b      	ldrh	r3, [r3, r2]
 800594c:	220a      	movs	r2, #10
 800594e:	18ba      	adds	r2, r7, r2
 8005950:	8812      	ldrh	r2, [r2, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d21b      	bcs.n	800598e <UART_RxISR_8BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	490f      	ldr	r1, [pc, #60]	; (80059a0 <UART_RxISR_8BIT_FIFOEN+0x134>)
 8005962:	400a      	ands	r2, r1
 8005964:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a0e      	ldr	r2, [pc, #56]	; (80059a4 <UART_RxISR_8BIT_FIFOEN+0x138>)
 800596a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2120      	movs	r1, #32
 8005978:	430a      	orrs	r2, r1
 800597a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800597c:	e007      	b.n	800598e <UART_RxISR_8BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	699a      	ldr	r2, [r3, #24]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2108      	movs	r1, #8
 800598a:	430a      	orrs	r2, r1
 800598c:	619a      	str	r2, [r3, #24]
}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	46bd      	mov	sp, r7
 8005992:	b004      	add	sp, #16
 8005994:	bd80      	pop	{r7, pc}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	fffffeff 	.word	0xfffffeff
 800599c:	effffffe 	.word	0xeffffffe
 80059a0:	efffffff 	.word	0xefffffff
 80059a4:	080056ed 	.word	0x080056ed

080059a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80059b0:	2314      	movs	r3, #20
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	2160      	movs	r1, #96	; 0x60
 80059b8:	5a52      	ldrh	r2, [r2, r1]
 80059ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2284      	movs	r2, #132	; 0x84
 80059c0:	589b      	ldr	r3, [r3, r2]
 80059c2:	2b22      	cmp	r3, #34	; 0x22
 80059c4:	d000      	beq.n	80059c8 <UART_RxISR_16BIT_FIFOEN+0x20>
 80059c6:	e078      	b.n	8005aba <UART_RxISR_16BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80059c8:	2316      	movs	r3, #22
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	2168      	movs	r1, #104	; 0x68
 80059d0:	5a52      	ldrh	r2, [r2, r1]
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	e046      	b.n	8005a64 <UART_RxISR_16BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059dc:	2110      	movs	r1, #16
 80059de:	187b      	adds	r3, r7, r1
 80059e0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e6:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80059e8:	187b      	adds	r3, r7, r1
 80059ea:	2214      	movs	r2, #20
 80059ec:	18ba      	adds	r2, r7, r2
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	8812      	ldrh	r2, [r2, #0]
 80059f2:	4013      	ands	r3, r2
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fe:	1c9a      	adds	r2, r3, #2
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	225e      	movs	r2, #94	; 0x5e
 8005a08:	5a9b      	ldrh	r3, [r3, r2]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b299      	uxth	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	225e      	movs	r2, #94	; 0x5e
 8005a14:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	225e      	movs	r2, #94	; 0x5e
 8005a1a:	5a9b      	ldrh	r3, [r3, r2]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d11a      	bne.n	8005a58 <UART_RxISR_16BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4929      	ldr	r1, [pc, #164]	; (8005ad4 <UART_RxISR_16BIT_FIFOEN+0x12c>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4926      	ldr	r1, [pc, #152]	; (8005ad8 <UART_RxISR_16BIT_FIFOEN+0x130>)
 8005a3e:	400a      	ands	r2, r1
 8005a40:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2284      	movs	r2, #132	; 0x84
 8005a46:	2120      	movs	r1, #32
 8005a48:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	0018      	movs	r0, r3
 8005a54:	f7fa fe70 	bl	8000738 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005a58:	2116      	movs	r1, #22
 8005a5a:	187b      	adds	r3, r7, r1
 8005a5c:	881a      	ldrh	r2, [r3, #0]
 8005a5e:	187b      	adds	r3, r7, r1
 8005a60:	3a01      	subs	r2, #1
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	2316      	movs	r3, #22
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1b3      	bne.n	80059d6 <UART_RxISR_16BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a6e:	2012      	movs	r0, #18
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	215e      	movs	r1, #94	; 0x5e
 8005a76:	5a52      	ldrh	r2, [r2, r1]
 8005a78:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a7a:	183b      	adds	r3, r7, r0
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d023      	beq.n	8005aca <UART_RxISR_16BIT_FIFOEN+0x122>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2268      	movs	r2, #104	; 0x68
 8005a86:	5a9b      	ldrh	r3, [r3, r2]
 8005a88:	2212      	movs	r2, #18
 8005a8a:	18ba      	adds	r2, r7, r2
 8005a8c:	8812      	ldrh	r2, [r2, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d21b      	bcs.n	8005aca <UART_RxISR_16BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	490f      	ldr	r1, [pc, #60]	; (8005adc <UART_RxISR_16BIT_FIFOEN+0x134>)
 8005a9e:	400a      	ands	r2, r1
 8005aa0:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a0e      	ldr	r2, [pc, #56]	; (8005ae0 <UART_RxISR_16BIT_FIFOEN+0x138>)
 8005aa6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2120      	movs	r1, #32
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ab8:	e007      	b.n	8005aca <UART_RxISR_16BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2108      	movs	r1, #8
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	619a      	str	r2, [r3, #24]
}
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	46bd      	mov	sp, r7
 8005ace:	b006      	add	sp, #24
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	fffffeff 	.word	0xfffffeff
 8005ad8:	effffffe 	.word	0xeffffffe
 8005adc:	efffffff 	.word	0xefffffff
 8005ae0:	080057ad 	.word	0x080057ad

08005ae4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b002      	add	sp, #8
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b002      	add	sp, #8
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b0c:	46c0      	nop			; (mov r8, r8)
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b002      	add	sp, #8
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	227c      	movs	r2, #124	; 0x7c
 8005b20:	5c9b      	ldrb	r3, [r3, r2]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_UARTEx_DisableFifoMode+0x16>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e027      	b.n	8005b7a <HAL_UARTEx_DisableFifoMode+0x66>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	227c      	movs	r2, #124	; 0x7c
 8005b2e:	2101      	movs	r1, #1
 8005b30:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2280      	movs	r2, #128	; 0x80
 8005b36:	2124      	movs	r1, #36	; 0x24
 8005b38:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	438a      	bics	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a0b      	ldr	r2, [pc, #44]	; (8005b84 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	2120      	movs	r1, #32
 8005b6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	227c      	movs	r2, #124	; 0x7c
 8005b74:	2100      	movs	r1, #0
 8005b76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b004      	add	sp, #16
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	dfffffff 	.word	0xdfffffff

08005b88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	227c      	movs	r2, #124	; 0x7c
 8005b96:	5c9b      	ldrb	r3, [r3, r2]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e02e      	b.n	8005bfe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	227c      	movs	r2, #124	; 0x7c
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2280      	movs	r2, #128	; 0x80
 8005bac:	2124      	movs	r1, #36	; 0x24
 8005bae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	438a      	bics	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	08d9      	lsrs	r1, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0018      	movs	r0, r3
 8005be0:	f000 f854 	bl	8005c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	2120      	movs	r1, #32
 8005bf2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	227c      	movs	r2, #124	; 0x7c
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b004      	add	sp, #16
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	227c      	movs	r2, #124	; 0x7c
 8005c16:	5c9b      	ldrb	r3, [r3, r2]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e02f      	b.n	8005c80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	227c      	movs	r2, #124	; 0x7c
 8005c24:	2101      	movs	r1, #1
 8005c26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2280      	movs	r2, #128	; 0x80
 8005c2c:	2124      	movs	r1, #36	; 0x24
 8005c2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2101      	movs	r1, #1
 8005c44:	438a      	bics	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	4a0e      	ldr	r2, [pc, #56]	; (8005c88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	0019      	movs	r1, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	0018      	movs	r0, r3
 8005c62:	f000 f813 	bl	8005c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2280      	movs	r2, #128	; 0x80
 8005c72:	2120      	movs	r1, #32
 8005c74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	227c      	movs	r2, #124	; 0x7c
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b004      	add	sp, #16
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	f1ffffff 	.word	0xf1ffffff

08005c8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005c94:	2314      	movs	r3, #20
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	4a2f      	ldr	r2, [pc, #188]	; (8005d58 <UARTEx_SetNbDataToProcess+0xcc>)
 8005c9a:	ca03      	ldmia	r2!, {r0, r1}
 8005c9c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005c9e:	230c      	movs	r3, #12
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	4a2e      	ldr	r2, [pc, #184]	; (8005d5c <UARTEx_SetNbDataToProcess+0xd0>)
 8005ca4:	ca03      	ldmia	r2!, {r0, r1}
 8005ca6:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d108      	bne.n	8005cc2 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	226a      	movs	r2, #106	; 0x6a
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2268      	movs	r2, #104	; 0x68
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cc0:	e046      	b.n	8005d50 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cc2:	261f      	movs	r6, #31
 8005cc4:	19bb      	adds	r3, r7, r6
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cca:	201e      	movs	r0, #30
 8005ccc:	183b      	adds	r3, r7, r0
 8005cce:	2208      	movs	r2, #8
 8005cd0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	0e5b      	lsrs	r3, r3, #25
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	241d      	movs	r4, #29
 8005cde:	193b      	adds	r3, r7, r4
 8005ce0:	2107      	movs	r1, #7
 8005ce2:	400a      	ands	r2, r1
 8005ce4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	0f5b      	lsrs	r3, r3, #29
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	251c      	movs	r5, #28
 8005cf2:	197b      	adds	r3, r7, r5
 8005cf4:	2107      	movs	r1, #7
 8005cf6:	400a      	ands	r2, r1
 8005cf8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005cfa:	183b      	adds	r3, r7, r0
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	197a      	adds	r2, r7, r5
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	2114      	movs	r1, #20
 8005d04:	1879      	adds	r1, r7, r1
 8005d06:	5c8a      	ldrb	r2, [r1, r2]
 8005d08:	435a      	muls	r2, r3
 8005d0a:	0010      	movs	r0, r2
 8005d0c:	197b      	adds	r3, r7, r5
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	250c      	movs	r5, #12
 8005d12:	197a      	adds	r2, r7, r5
 8005d14:	5cd3      	ldrb	r3, [r2, r3]
 8005d16:	0019      	movs	r1, r3
 8005d18:	f7fa fa7e 	bl	8000218 <__divsi3>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	b299      	uxth	r1, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	226a      	movs	r2, #106	; 0x6a
 8005d24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005d26:	19bb      	adds	r3, r7, r6
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	193a      	adds	r2, r7, r4
 8005d2c:	7812      	ldrb	r2, [r2, #0]
 8005d2e:	2114      	movs	r1, #20
 8005d30:	1879      	adds	r1, r7, r1
 8005d32:	5c8a      	ldrb	r2, [r1, r2]
 8005d34:	435a      	muls	r2, r3
 8005d36:	0010      	movs	r0, r2
 8005d38:	193b      	adds	r3, r7, r4
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	197a      	adds	r2, r7, r5
 8005d3e:	5cd3      	ldrb	r3, [r2, r3]
 8005d40:	0019      	movs	r1, r3
 8005d42:	f7fa fa69 	bl	8000218 <__divsi3>
 8005d46:	0003      	movs	r3, r0
 8005d48:	b299      	uxth	r1, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2268      	movs	r2, #104	; 0x68
 8005d4e:	5299      	strh	r1, [r3, r2]
}
 8005d50:	46c0      	nop			; (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b009      	add	sp, #36	; 0x24
 8005d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d58:	080066f0 	.word	0x080066f0
 8005d5c:	080066f8 	.word	0x080066f8

08005d60 <__errno>:
 8005d60:	4b01      	ldr	r3, [pc, #4]	; (8005d68 <__errno+0x8>)
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	4770      	bx	lr
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	20000010 	.word	0x20000010

08005d6c <__libc_init_array>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	2600      	movs	r6, #0
 8005d70:	4d0c      	ldr	r5, [pc, #48]	; (8005da4 <__libc_init_array+0x38>)
 8005d72:	4c0d      	ldr	r4, [pc, #52]	; (8005da8 <__libc_init_array+0x3c>)
 8005d74:	1b64      	subs	r4, r4, r5
 8005d76:	10a4      	asrs	r4, r4, #2
 8005d78:	42a6      	cmp	r6, r4
 8005d7a:	d109      	bne.n	8005d90 <__libc_init_array+0x24>
 8005d7c:	2600      	movs	r6, #0
 8005d7e:	f000 fc29 	bl	80065d4 <_init>
 8005d82:	4d0a      	ldr	r5, [pc, #40]	; (8005dac <__libc_init_array+0x40>)
 8005d84:	4c0a      	ldr	r4, [pc, #40]	; (8005db0 <__libc_init_array+0x44>)
 8005d86:	1b64      	subs	r4, r4, r5
 8005d88:	10a4      	asrs	r4, r4, #2
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	d105      	bne.n	8005d9a <__libc_init_array+0x2e>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	00b3      	lsls	r3, r6, #2
 8005d92:	58eb      	ldr	r3, [r5, r3]
 8005d94:	4798      	blx	r3
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7ee      	b.n	8005d78 <__libc_init_array+0xc>
 8005d9a:	00b3      	lsls	r3, r6, #2
 8005d9c:	58eb      	ldr	r3, [r5, r3]
 8005d9e:	4798      	blx	r3
 8005da0:	3601      	adds	r6, #1
 8005da2:	e7f2      	b.n	8005d8a <__libc_init_array+0x1e>
 8005da4:	08008df4 	.word	0x08008df4
 8005da8:	08008df4 	.word	0x08008df4
 8005dac:	08008df4 	.word	0x08008df4
 8005db0:	08008df8 	.word	0x08008df8

08005db4 <memcpy>:
 8005db4:	2300      	movs	r3, #0
 8005db6:	b510      	push	{r4, lr}
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d100      	bne.n	8005dbe <memcpy+0xa>
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	5ccc      	ldrb	r4, [r1, r3]
 8005dc0:	54c4      	strb	r4, [r0, r3]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	e7f8      	b.n	8005db8 <memcpy+0x4>

08005dc6 <memset>:
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	1812      	adds	r2, r2, r0
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d100      	bne.n	8005dd0 <memset+0xa>
 8005dce:	4770      	bx	lr
 8005dd0:	7019      	strb	r1, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	e7f9      	b.n	8005dca <memset+0x4>
	...

08005dd8 <siprintf>:
 8005dd8:	b40e      	push	{r1, r2, r3}
 8005dda:	b500      	push	{lr}
 8005ddc:	490b      	ldr	r1, [pc, #44]	; (8005e0c <siprintf+0x34>)
 8005dde:	b09c      	sub	sp, #112	; 0x70
 8005de0:	ab1d      	add	r3, sp, #116	; 0x74
 8005de2:	9002      	str	r0, [sp, #8]
 8005de4:	9006      	str	r0, [sp, #24]
 8005de6:	9107      	str	r1, [sp, #28]
 8005de8:	9104      	str	r1, [sp, #16]
 8005dea:	4809      	ldr	r0, [pc, #36]	; (8005e10 <siprintf+0x38>)
 8005dec:	4909      	ldr	r1, [pc, #36]	; (8005e14 <siprintf+0x3c>)
 8005dee:	cb04      	ldmia	r3!, {r2}
 8005df0:	9105      	str	r1, [sp, #20]
 8005df2:	6800      	ldr	r0, [r0, #0]
 8005df4:	a902      	add	r1, sp, #8
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	f000 f870 	bl	8005edc <_svfiprintf_r>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9a02      	ldr	r2, [sp, #8]
 8005e00:	7013      	strb	r3, [r2, #0]
 8005e02:	b01c      	add	sp, #112	; 0x70
 8005e04:	bc08      	pop	{r3}
 8005e06:	b003      	add	sp, #12
 8005e08:	4718      	bx	r3
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	7fffffff 	.word	0x7fffffff
 8005e10:	20000010 	.word	0x20000010
 8005e14:	ffff0208 	.word	0xffff0208

08005e18 <__ssputs_r>:
 8005e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1a:	688e      	ldr	r6, [r1, #8]
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	0007      	movs	r7, r0
 8005e20:	000c      	movs	r4, r1
 8005e22:	9203      	str	r2, [sp, #12]
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	429e      	cmp	r6, r3
 8005e28:	d83c      	bhi.n	8005ea4 <__ssputs_r+0x8c>
 8005e2a:	2390      	movs	r3, #144	; 0x90
 8005e2c:	898a      	ldrh	r2, [r1, #12]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	421a      	tst	r2, r3
 8005e32:	d034      	beq.n	8005e9e <__ssputs_r+0x86>
 8005e34:	2503      	movs	r5, #3
 8005e36:	6909      	ldr	r1, [r1, #16]
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	1a5b      	subs	r3, r3, r1
 8005e3c:	9302      	str	r3, [sp, #8]
 8005e3e:	6963      	ldr	r3, [r4, #20]
 8005e40:	9802      	ldr	r0, [sp, #8]
 8005e42:	435d      	muls	r5, r3
 8005e44:	0feb      	lsrs	r3, r5, #31
 8005e46:	195d      	adds	r5, r3, r5
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	106d      	asrs	r5, r5, #1
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	181b      	adds	r3, r3, r0
 8005e50:	42ab      	cmp	r3, r5
 8005e52:	d900      	bls.n	8005e56 <__ssputs_r+0x3e>
 8005e54:	001d      	movs	r5, r3
 8005e56:	0553      	lsls	r3, r2, #21
 8005e58:	d532      	bpl.n	8005ec0 <__ssputs_r+0xa8>
 8005e5a:	0029      	movs	r1, r5
 8005e5c:	0038      	movs	r0, r7
 8005e5e:	f000 fb19 	bl	8006494 <_malloc_r>
 8005e62:	1e06      	subs	r6, r0, #0
 8005e64:	d109      	bne.n	8005e7a <__ssputs_r+0x62>
 8005e66:	230c      	movs	r3, #12
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	2340      	movs	r3, #64	; 0x40
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	89a2      	ldrh	r2, [r4, #12]
 8005e70:	4240      	negs	r0, r0
 8005e72:	4313      	orrs	r3, r2
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	b005      	add	sp, #20
 8005e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e7a:	9a02      	ldr	r2, [sp, #8]
 8005e7c:	6921      	ldr	r1, [r4, #16]
 8005e7e:	f7ff ff99 	bl	8005db4 <memcpy>
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	4a14      	ldr	r2, [pc, #80]	; (8005ed8 <__ssputs_r+0xc0>)
 8005e86:	401a      	ands	r2, r3
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	81a3      	strh	r3, [r4, #12]
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	6126      	str	r6, [r4, #16]
 8005e92:	18f6      	adds	r6, r6, r3
 8005e94:	6026      	str	r6, [r4, #0]
 8005e96:	6165      	str	r5, [r4, #20]
 8005e98:	9e01      	ldr	r6, [sp, #4]
 8005e9a:	1aed      	subs	r5, r5, r3
 8005e9c:	60a5      	str	r5, [r4, #8]
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	429e      	cmp	r6, r3
 8005ea2:	d900      	bls.n	8005ea6 <__ssputs_r+0x8e>
 8005ea4:	9e01      	ldr	r6, [sp, #4]
 8005ea6:	0032      	movs	r2, r6
 8005ea8:	9903      	ldr	r1, [sp, #12]
 8005eaa:	6820      	ldr	r0, [r4, #0]
 8005eac:	f000 fa95 	bl	80063da <memmove>
 8005eb0:	68a3      	ldr	r3, [r4, #8]
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	1b9b      	subs	r3, r3, r6
 8005eb6:	60a3      	str	r3, [r4, #8]
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	199e      	adds	r6, r3, r6
 8005ebc:	6026      	str	r6, [r4, #0]
 8005ebe:	e7da      	b.n	8005e76 <__ssputs_r+0x5e>
 8005ec0:	002a      	movs	r2, r5
 8005ec2:	0038      	movs	r0, r7
 8005ec4:	f000 fb44 	bl	8006550 <_realloc_r>
 8005ec8:	1e06      	subs	r6, r0, #0
 8005eca:	d1e0      	bne.n	8005e8e <__ssputs_r+0x76>
 8005ecc:	6921      	ldr	r1, [r4, #16]
 8005ece:	0038      	movs	r0, r7
 8005ed0:	f000 fa96 	bl	8006400 <_free_r>
 8005ed4:	e7c7      	b.n	8005e66 <__ssputs_r+0x4e>
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	fffffb7f 	.word	0xfffffb7f

08005edc <_svfiprintf_r>:
 8005edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ede:	b0a1      	sub	sp, #132	; 0x84
 8005ee0:	9003      	str	r0, [sp, #12]
 8005ee2:	001d      	movs	r5, r3
 8005ee4:	898b      	ldrh	r3, [r1, #12]
 8005ee6:	000f      	movs	r7, r1
 8005ee8:	0016      	movs	r6, r2
 8005eea:	061b      	lsls	r3, r3, #24
 8005eec:	d511      	bpl.n	8005f12 <_svfiprintf_r+0x36>
 8005eee:	690b      	ldr	r3, [r1, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10e      	bne.n	8005f12 <_svfiprintf_r+0x36>
 8005ef4:	2140      	movs	r1, #64	; 0x40
 8005ef6:	f000 facd 	bl	8006494 <_malloc_r>
 8005efa:	6038      	str	r0, [r7, #0]
 8005efc:	6138      	str	r0, [r7, #16]
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d105      	bne.n	8005f0e <_svfiprintf_r+0x32>
 8005f02:	230c      	movs	r3, #12
 8005f04:	9a03      	ldr	r2, [sp, #12]
 8005f06:	3801      	subs	r0, #1
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	b021      	add	sp, #132	; 0x84
 8005f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0e:	2340      	movs	r3, #64	; 0x40
 8005f10:	617b      	str	r3, [r7, #20]
 8005f12:	2300      	movs	r3, #0
 8005f14:	ac08      	add	r4, sp, #32
 8005f16:	6163      	str	r3, [r4, #20]
 8005f18:	3320      	adds	r3, #32
 8005f1a:	7663      	strb	r3, [r4, #25]
 8005f1c:	3310      	adds	r3, #16
 8005f1e:	76a3      	strb	r3, [r4, #26]
 8005f20:	9507      	str	r5, [sp, #28]
 8005f22:	0035      	movs	r5, r6
 8005f24:	782b      	ldrb	r3, [r5, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <_svfiprintf_r+0x52>
 8005f2a:	2b25      	cmp	r3, #37	; 0x25
 8005f2c:	d146      	bne.n	8005fbc <_svfiprintf_r+0xe0>
 8005f2e:	1bab      	subs	r3, r5, r6
 8005f30:	9305      	str	r3, [sp, #20]
 8005f32:	d00c      	beq.n	8005f4e <_svfiprintf_r+0x72>
 8005f34:	0032      	movs	r2, r6
 8005f36:	0039      	movs	r1, r7
 8005f38:	9803      	ldr	r0, [sp, #12]
 8005f3a:	f7ff ff6d 	bl	8005e18 <__ssputs_r>
 8005f3e:	1c43      	adds	r3, r0, #1
 8005f40:	d100      	bne.n	8005f44 <_svfiprintf_r+0x68>
 8005f42:	e0ae      	b.n	80060a2 <_svfiprintf_r+0x1c6>
 8005f44:	6962      	ldr	r2, [r4, #20]
 8005f46:	9b05      	ldr	r3, [sp, #20]
 8005f48:	4694      	mov	ip, r2
 8005f4a:	4463      	add	r3, ip
 8005f4c:	6163      	str	r3, [r4, #20]
 8005f4e:	782b      	ldrb	r3, [r5, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d100      	bne.n	8005f56 <_svfiprintf_r+0x7a>
 8005f54:	e0a5      	b.n	80060a2 <_svfiprintf_r+0x1c6>
 8005f56:	2201      	movs	r2, #1
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4252      	negs	r2, r2
 8005f5c:	6062      	str	r2, [r4, #4]
 8005f5e:	a904      	add	r1, sp, #16
 8005f60:	3254      	adds	r2, #84	; 0x54
 8005f62:	1852      	adds	r2, r2, r1
 8005f64:	1c6e      	adds	r6, r5, #1
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	60e3      	str	r3, [r4, #12]
 8005f6a:	60a3      	str	r3, [r4, #8]
 8005f6c:	7013      	strb	r3, [r2, #0]
 8005f6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f70:	7831      	ldrb	r1, [r6, #0]
 8005f72:	2205      	movs	r2, #5
 8005f74:	4853      	ldr	r0, [pc, #332]	; (80060c4 <_svfiprintf_r+0x1e8>)
 8005f76:	f000 fa25 	bl	80063c4 <memchr>
 8005f7a:	1c75      	adds	r5, r6, #1
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d11f      	bne.n	8005fc0 <_svfiprintf_r+0xe4>
 8005f80:	6822      	ldr	r2, [r4, #0]
 8005f82:	06d3      	lsls	r3, r2, #27
 8005f84:	d504      	bpl.n	8005f90 <_svfiprintf_r+0xb4>
 8005f86:	2353      	movs	r3, #83	; 0x53
 8005f88:	a904      	add	r1, sp, #16
 8005f8a:	185b      	adds	r3, r3, r1
 8005f8c:	2120      	movs	r1, #32
 8005f8e:	7019      	strb	r1, [r3, #0]
 8005f90:	0713      	lsls	r3, r2, #28
 8005f92:	d504      	bpl.n	8005f9e <_svfiprintf_r+0xc2>
 8005f94:	2353      	movs	r3, #83	; 0x53
 8005f96:	a904      	add	r1, sp, #16
 8005f98:	185b      	adds	r3, r3, r1
 8005f9a:	212b      	movs	r1, #43	; 0x2b
 8005f9c:	7019      	strb	r1, [r3, #0]
 8005f9e:	7833      	ldrb	r3, [r6, #0]
 8005fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa2:	d016      	beq.n	8005fd2 <_svfiprintf_r+0xf6>
 8005fa4:	0035      	movs	r5, r6
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	200a      	movs	r0, #10
 8005faa:	68e3      	ldr	r3, [r4, #12]
 8005fac:	782a      	ldrb	r2, [r5, #0]
 8005fae:	1c6e      	adds	r6, r5, #1
 8005fb0:	3a30      	subs	r2, #48	; 0x30
 8005fb2:	2a09      	cmp	r2, #9
 8005fb4:	d94e      	bls.n	8006054 <_svfiprintf_r+0x178>
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	d018      	beq.n	8005fec <_svfiprintf_r+0x110>
 8005fba:	e010      	b.n	8005fde <_svfiprintf_r+0x102>
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	e7b1      	b.n	8005f24 <_svfiprintf_r+0x48>
 8005fc0:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <_svfiprintf_r+0x1e8>)
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	1ac0      	subs	r0, r0, r3
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4083      	lsls	r3, r0
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	002e      	movs	r6, r5
 8005fd0:	e7ce      	b.n	8005f70 <_svfiprintf_r+0x94>
 8005fd2:	9b07      	ldr	r3, [sp, #28]
 8005fd4:	1d19      	adds	r1, r3, #4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	9107      	str	r1, [sp, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	db01      	blt.n	8005fe2 <_svfiprintf_r+0x106>
 8005fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe0:	e004      	b.n	8005fec <_svfiprintf_r+0x110>
 8005fe2:	425b      	negs	r3, r3
 8005fe4:	60e3      	str	r3, [r4, #12]
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	782b      	ldrb	r3, [r5, #0]
 8005fee:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff0:	d10a      	bne.n	8006008 <_svfiprintf_r+0x12c>
 8005ff2:	786b      	ldrb	r3, [r5, #1]
 8005ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff6:	d135      	bne.n	8006064 <_svfiprintf_r+0x188>
 8005ff8:	9b07      	ldr	r3, [sp, #28]
 8005ffa:	3502      	adds	r5, #2
 8005ffc:	1d1a      	adds	r2, r3, #4
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	9207      	str	r2, [sp, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	db2b      	blt.n	800605e <_svfiprintf_r+0x182>
 8006006:	9309      	str	r3, [sp, #36]	; 0x24
 8006008:	4e2f      	ldr	r6, [pc, #188]	; (80060c8 <_svfiprintf_r+0x1ec>)
 800600a:	7829      	ldrb	r1, [r5, #0]
 800600c:	2203      	movs	r2, #3
 800600e:	0030      	movs	r0, r6
 8006010:	f000 f9d8 	bl	80063c4 <memchr>
 8006014:	2800      	cmp	r0, #0
 8006016:	d006      	beq.n	8006026 <_svfiprintf_r+0x14a>
 8006018:	2340      	movs	r3, #64	; 0x40
 800601a:	1b80      	subs	r0, r0, r6
 800601c:	4083      	lsls	r3, r0
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	3501      	adds	r5, #1
 8006022:	4313      	orrs	r3, r2
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	7829      	ldrb	r1, [r5, #0]
 8006028:	2206      	movs	r2, #6
 800602a:	4828      	ldr	r0, [pc, #160]	; (80060cc <_svfiprintf_r+0x1f0>)
 800602c:	1c6e      	adds	r6, r5, #1
 800602e:	7621      	strb	r1, [r4, #24]
 8006030:	f000 f9c8 	bl	80063c4 <memchr>
 8006034:	2800      	cmp	r0, #0
 8006036:	d03c      	beq.n	80060b2 <_svfiprintf_r+0x1d6>
 8006038:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <_svfiprintf_r+0x1f4>)
 800603a:	2b00      	cmp	r3, #0
 800603c:	d125      	bne.n	800608a <_svfiprintf_r+0x1ae>
 800603e:	2207      	movs	r2, #7
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	3307      	adds	r3, #7
 8006044:	4393      	bics	r3, r2
 8006046:	3308      	adds	r3, #8
 8006048:	9307      	str	r3, [sp, #28]
 800604a:	6963      	ldr	r3, [r4, #20]
 800604c:	9a04      	ldr	r2, [sp, #16]
 800604e:	189b      	adds	r3, r3, r2
 8006050:	6163      	str	r3, [r4, #20]
 8006052:	e766      	b.n	8005f22 <_svfiprintf_r+0x46>
 8006054:	4343      	muls	r3, r0
 8006056:	2101      	movs	r1, #1
 8006058:	189b      	adds	r3, r3, r2
 800605a:	0035      	movs	r5, r6
 800605c:	e7a6      	b.n	8005fac <_svfiprintf_r+0xd0>
 800605e:	2301      	movs	r3, #1
 8006060:	425b      	negs	r3, r3
 8006062:	e7d0      	b.n	8006006 <_svfiprintf_r+0x12a>
 8006064:	2300      	movs	r3, #0
 8006066:	200a      	movs	r0, #10
 8006068:	001a      	movs	r2, r3
 800606a:	3501      	adds	r5, #1
 800606c:	6063      	str	r3, [r4, #4]
 800606e:	7829      	ldrb	r1, [r5, #0]
 8006070:	1c6e      	adds	r6, r5, #1
 8006072:	3930      	subs	r1, #48	; 0x30
 8006074:	2909      	cmp	r1, #9
 8006076:	d903      	bls.n	8006080 <_svfiprintf_r+0x1a4>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0c5      	beq.n	8006008 <_svfiprintf_r+0x12c>
 800607c:	9209      	str	r2, [sp, #36]	; 0x24
 800607e:	e7c3      	b.n	8006008 <_svfiprintf_r+0x12c>
 8006080:	4342      	muls	r2, r0
 8006082:	2301      	movs	r3, #1
 8006084:	1852      	adds	r2, r2, r1
 8006086:	0035      	movs	r5, r6
 8006088:	e7f1      	b.n	800606e <_svfiprintf_r+0x192>
 800608a:	ab07      	add	r3, sp, #28
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	003a      	movs	r2, r7
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <_svfiprintf_r+0x1f8>)
 8006092:	0021      	movs	r1, r4
 8006094:	9803      	ldr	r0, [sp, #12]
 8006096:	e000      	b.n	800609a <_svfiprintf_r+0x1be>
 8006098:	bf00      	nop
 800609a:	9004      	str	r0, [sp, #16]
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	3301      	adds	r3, #1
 80060a0:	d1d3      	bne.n	800604a <_svfiprintf_r+0x16e>
 80060a2:	89bb      	ldrh	r3, [r7, #12]
 80060a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80060a6:	065b      	lsls	r3, r3, #25
 80060a8:	d400      	bmi.n	80060ac <_svfiprintf_r+0x1d0>
 80060aa:	e72e      	b.n	8005f0a <_svfiprintf_r+0x2e>
 80060ac:	2001      	movs	r0, #1
 80060ae:	4240      	negs	r0, r0
 80060b0:	e72b      	b.n	8005f0a <_svfiprintf_r+0x2e>
 80060b2:	ab07      	add	r3, sp, #28
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	003a      	movs	r2, r7
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <_svfiprintf_r+0x1f8>)
 80060ba:	0021      	movs	r1, r4
 80060bc:	9803      	ldr	r0, [sp, #12]
 80060be:	f000 f879 	bl	80061b4 <_printf_i>
 80060c2:	e7ea      	b.n	800609a <_svfiprintf_r+0x1be>
 80060c4:	08008db8 	.word	0x08008db8
 80060c8:	08008dbe 	.word	0x08008dbe
 80060cc:	08008dc2 	.word	0x08008dc2
 80060d0:	00000000 	.word	0x00000000
 80060d4:	08005e19 	.word	0x08005e19

080060d8 <_printf_common>:
 80060d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060da:	0015      	movs	r5, r2
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	688a      	ldr	r2, [r1, #8]
 80060e0:	690b      	ldr	r3, [r1, #16]
 80060e2:	9000      	str	r0, [sp, #0]
 80060e4:	000c      	movs	r4, r1
 80060e6:	4293      	cmp	r3, r2
 80060e8:	da00      	bge.n	80060ec <_printf_common+0x14>
 80060ea:	0013      	movs	r3, r2
 80060ec:	0022      	movs	r2, r4
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	3243      	adds	r2, #67	; 0x43
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	2a00      	cmp	r2, #0
 80060f6:	d001      	beq.n	80060fc <_printf_common+0x24>
 80060f8:	3301      	adds	r3, #1
 80060fa:	602b      	str	r3, [r5, #0]
 80060fc:	6823      	ldr	r3, [r4, #0]
 80060fe:	069b      	lsls	r3, r3, #26
 8006100:	d502      	bpl.n	8006108 <_printf_common+0x30>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	3302      	adds	r3, #2
 8006106:	602b      	str	r3, [r5, #0]
 8006108:	2706      	movs	r7, #6
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	401f      	ands	r7, r3
 800610e:	d027      	beq.n	8006160 <_printf_common+0x88>
 8006110:	0023      	movs	r3, r4
 8006112:	3343      	adds	r3, #67	; 0x43
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	1e5a      	subs	r2, r3, #1
 8006118:	4193      	sbcs	r3, r2
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	0692      	lsls	r2, r2, #26
 800611e:	d430      	bmi.n	8006182 <_printf_common+0xaa>
 8006120:	0022      	movs	r2, r4
 8006122:	9901      	ldr	r1, [sp, #4]
 8006124:	3243      	adds	r2, #67	; 0x43
 8006126:	9800      	ldr	r0, [sp, #0]
 8006128:	9e08      	ldr	r6, [sp, #32]
 800612a:	47b0      	blx	r6
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	d025      	beq.n	800617c <_printf_common+0xa4>
 8006130:	2306      	movs	r3, #6
 8006132:	6820      	ldr	r0, [r4, #0]
 8006134:	682a      	ldr	r2, [r5, #0]
 8006136:	68e1      	ldr	r1, [r4, #12]
 8006138:	4003      	ands	r3, r0
 800613a:	2500      	movs	r5, #0
 800613c:	2b04      	cmp	r3, #4
 800613e:	d103      	bne.n	8006148 <_printf_common+0x70>
 8006140:	1a8d      	subs	r5, r1, r2
 8006142:	43eb      	mvns	r3, r5
 8006144:	17db      	asrs	r3, r3, #31
 8006146:	401d      	ands	r5, r3
 8006148:	68a3      	ldr	r3, [r4, #8]
 800614a:	6922      	ldr	r2, [r4, #16]
 800614c:	4293      	cmp	r3, r2
 800614e:	dd01      	ble.n	8006154 <_printf_common+0x7c>
 8006150:	1a9b      	subs	r3, r3, r2
 8006152:	18ed      	adds	r5, r5, r3
 8006154:	2700      	movs	r7, #0
 8006156:	42bd      	cmp	r5, r7
 8006158:	d120      	bne.n	800619c <_printf_common+0xc4>
 800615a:	2000      	movs	r0, #0
 800615c:	e010      	b.n	8006180 <_printf_common+0xa8>
 800615e:	3701      	adds	r7, #1
 8006160:	68e3      	ldr	r3, [r4, #12]
 8006162:	682a      	ldr	r2, [r5, #0]
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	42bb      	cmp	r3, r7
 8006168:	ddd2      	ble.n	8006110 <_printf_common+0x38>
 800616a:	0022      	movs	r2, r4
 800616c:	2301      	movs	r3, #1
 800616e:	3219      	adds	r2, #25
 8006170:	9901      	ldr	r1, [sp, #4]
 8006172:	9800      	ldr	r0, [sp, #0]
 8006174:	9e08      	ldr	r6, [sp, #32]
 8006176:	47b0      	blx	r6
 8006178:	1c43      	adds	r3, r0, #1
 800617a:	d1f0      	bne.n	800615e <_printf_common+0x86>
 800617c:	2001      	movs	r0, #1
 800617e:	4240      	negs	r0, r0
 8006180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006182:	2030      	movs	r0, #48	; 0x30
 8006184:	18e1      	adds	r1, r4, r3
 8006186:	3143      	adds	r1, #67	; 0x43
 8006188:	7008      	strb	r0, [r1, #0]
 800618a:	0021      	movs	r1, r4
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	3145      	adds	r1, #69	; 0x45
 8006190:	7809      	ldrb	r1, [r1, #0]
 8006192:	18a2      	adds	r2, r4, r2
 8006194:	3243      	adds	r2, #67	; 0x43
 8006196:	3302      	adds	r3, #2
 8006198:	7011      	strb	r1, [r2, #0]
 800619a:	e7c1      	b.n	8006120 <_printf_common+0x48>
 800619c:	0022      	movs	r2, r4
 800619e:	2301      	movs	r3, #1
 80061a0:	321a      	adds	r2, #26
 80061a2:	9901      	ldr	r1, [sp, #4]
 80061a4:	9800      	ldr	r0, [sp, #0]
 80061a6:	9e08      	ldr	r6, [sp, #32]
 80061a8:	47b0      	blx	r6
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d0e6      	beq.n	800617c <_printf_common+0xa4>
 80061ae:	3701      	adds	r7, #1
 80061b0:	e7d1      	b.n	8006156 <_printf_common+0x7e>
	...

080061b4 <_printf_i>:
 80061b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061b6:	b089      	sub	sp, #36	; 0x24
 80061b8:	9204      	str	r2, [sp, #16]
 80061ba:	000a      	movs	r2, r1
 80061bc:	3243      	adds	r2, #67	; 0x43
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	9003      	str	r0, [sp, #12]
 80061c2:	9202      	str	r2, [sp, #8]
 80061c4:	7e0a      	ldrb	r2, [r1, #24]
 80061c6:	000c      	movs	r4, r1
 80061c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ca:	2a6e      	cmp	r2, #110	; 0x6e
 80061cc:	d100      	bne.n	80061d0 <_printf_i+0x1c>
 80061ce:	e086      	b.n	80062de <_printf_i+0x12a>
 80061d0:	d81f      	bhi.n	8006212 <_printf_i+0x5e>
 80061d2:	2a63      	cmp	r2, #99	; 0x63
 80061d4:	d033      	beq.n	800623e <_printf_i+0x8a>
 80061d6:	d808      	bhi.n	80061ea <_printf_i+0x36>
 80061d8:	2a00      	cmp	r2, #0
 80061da:	d100      	bne.n	80061de <_printf_i+0x2a>
 80061dc:	e08c      	b.n	80062f8 <_printf_i+0x144>
 80061de:	2a58      	cmp	r2, #88	; 0x58
 80061e0:	d04d      	beq.n	800627e <_printf_i+0xca>
 80061e2:	0025      	movs	r5, r4
 80061e4:	3542      	adds	r5, #66	; 0x42
 80061e6:	702a      	strb	r2, [r5, #0]
 80061e8:	e030      	b.n	800624c <_printf_i+0x98>
 80061ea:	2a64      	cmp	r2, #100	; 0x64
 80061ec:	d001      	beq.n	80061f2 <_printf_i+0x3e>
 80061ee:	2a69      	cmp	r2, #105	; 0x69
 80061f0:	d1f7      	bne.n	80061e2 <_printf_i+0x2e>
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	6825      	ldr	r5, [r4, #0]
 80061f6:	1d0a      	adds	r2, r1, #4
 80061f8:	0628      	lsls	r0, r5, #24
 80061fa:	d529      	bpl.n	8006250 <_printf_i+0x9c>
 80061fc:	6808      	ldr	r0, [r1, #0]
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	2800      	cmp	r0, #0
 8006202:	da03      	bge.n	800620c <_printf_i+0x58>
 8006204:	232d      	movs	r3, #45	; 0x2d
 8006206:	9a02      	ldr	r2, [sp, #8]
 8006208:	4240      	negs	r0, r0
 800620a:	7013      	strb	r3, [r2, #0]
 800620c:	4e6b      	ldr	r6, [pc, #428]	; (80063bc <_printf_i+0x208>)
 800620e:	270a      	movs	r7, #10
 8006210:	e04f      	b.n	80062b2 <_printf_i+0xfe>
 8006212:	2a73      	cmp	r2, #115	; 0x73
 8006214:	d074      	beq.n	8006300 <_printf_i+0x14c>
 8006216:	d808      	bhi.n	800622a <_printf_i+0x76>
 8006218:	2a6f      	cmp	r2, #111	; 0x6f
 800621a:	d01f      	beq.n	800625c <_printf_i+0xa8>
 800621c:	2a70      	cmp	r2, #112	; 0x70
 800621e:	d1e0      	bne.n	80061e2 <_printf_i+0x2e>
 8006220:	2220      	movs	r2, #32
 8006222:	6809      	ldr	r1, [r1, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	6022      	str	r2, [r4, #0]
 8006228:	e003      	b.n	8006232 <_printf_i+0x7e>
 800622a:	2a75      	cmp	r2, #117	; 0x75
 800622c:	d016      	beq.n	800625c <_printf_i+0xa8>
 800622e:	2a78      	cmp	r2, #120	; 0x78
 8006230:	d1d7      	bne.n	80061e2 <_printf_i+0x2e>
 8006232:	0022      	movs	r2, r4
 8006234:	2178      	movs	r1, #120	; 0x78
 8006236:	3245      	adds	r2, #69	; 0x45
 8006238:	7011      	strb	r1, [r2, #0]
 800623a:	4e61      	ldr	r6, [pc, #388]	; (80063c0 <_printf_i+0x20c>)
 800623c:	e022      	b.n	8006284 <_printf_i+0xd0>
 800623e:	0025      	movs	r5, r4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	3542      	adds	r5, #66	; 0x42
 8006244:	1d11      	adds	r1, r2, #4
 8006246:	6019      	str	r1, [r3, #0]
 8006248:	6813      	ldr	r3, [r2, #0]
 800624a:	702b      	strb	r3, [r5, #0]
 800624c:	2301      	movs	r3, #1
 800624e:	e065      	b.n	800631c <_printf_i+0x168>
 8006250:	6808      	ldr	r0, [r1, #0]
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	0669      	lsls	r1, r5, #25
 8006256:	d5d3      	bpl.n	8006200 <_printf_i+0x4c>
 8006258:	b200      	sxth	r0, r0
 800625a:	e7d1      	b.n	8006200 <_printf_i+0x4c>
 800625c:	6819      	ldr	r1, [r3, #0]
 800625e:	6825      	ldr	r5, [r4, #0]
 8006260:	1d08      	adds	r0, r1, #4
 8006262:	6018      	str	r0, [r3, #0]
 8006264:	6808      	ldr	r0, [r1, #0]
 8006266:	062e      	lsls	r6, r5, #24
 8006268:	d505      	bpl.n	8006276 <_printf_i+0xc2>
 800626a:	4e54      	ldr	r6, [pc, #336]	; (80063bc <_printf_i+0x208>)
 800626c:	2708      	movs	r7, #8
 800626e:	2a6f      	cmp	r2, #111	; 0x6f
 8006270:	d01b      	beq.n	80062aa <_printf_i+0xf6>
 8006272:	270a      	movs	r7, #10
 8006274:	e019      	b.n	80062aa <_printf_i+0xf6>
 8006276:	066d      	lsls	r5, r5, #25
 8006278:	d5f7      	bpl.n	800626a <_printf_i+0xb6>
 800627a:	b280      	uxth	r0, r0
 800627c:	e7f5      	b.n	800626a <_printf_i+0xb6>
 800627e:	3145      	adds	r1, #69	; 0x45
 8006280:	4e4e      	ldr	r6, [pc, #312]	; (80063bc <_printf_i+0x208>)
 8006282:	700a      	strb	r2, [r1, #0]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	1d01      	adds	r1, r0, #4
 800628a:	6800      	ldr	r0, [r0, #0]
 800628c:	6019      	str	r1, [r3, #0]
 800628e:	0615      	lsls	r5, r2, #24
 8006290:	d521      	bpl.n	80062d6 <_printf_i+0x122>
 8006292:	07d3      	lsls	r3, r2, #31
 8006294:	d502      	bpl.n	800629c <_printf_i+0xe8>
 8006296:	2320      	movs	r3, #32
 8006298:	431a      	orrs	r2, r3
 800629a:	6022      	str	r2, [r4, #0]
 800629c:	2710      	movs	r7, #16
 800629e:	2800      	cmp	r0, #0
 80062a0:	d103      	bne.n	80062aa <_printf_i+0xf6>
 80062a2:	2320      	movs	r3, #32
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	439a      	bics	r2, r3
 80062a8:	6022      	str	r2, [r4, #0]
 80062aa:	0023      	movs	r3, r4
 80062ac:	2200      	movs	r2, #0
 80062ae:	3343      	adds	r3, #67	; 0x43
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	6863      	ldr	r3, [r4, #4]
 80062b4:	60a3      	str	r3, [r4, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	db58      	blt.n	800636c <_printf_i+0x1b8>
 80062ba:	2204      	movs	r2, #4
 80062bc:	6821      	ldr	r1, [r4, #0]
 80062be:	4391      	bics	r1, r2
 80062c0:	6021      	str	r1, [r4, #0]
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d154      	bne.n	8006370 <_printf_i+0x1bc>
 80062c6:	9d02      	ldr	r5, [sp, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d05a      	beq.n	8006382 <_printf_i+0x1ce>
 80062cc:	0025      	movs	r5, r4
 80062ce:	7833      	ldrb	r3, [r6, #0]
 80062d0:	3542      	adds	r5, #66	; 0x42
 80062d2:	702b      	strb	r3, [r5, #0]
 80062d4:	e055      	b.n	8006382 <_printf_i+0x1ce>
 80062d6:	0655      	lsls	r5, r2, #25
 80062d8:	d5db      	bpl.n	8006292 <_printf_i+0xde>
 80062da:	b280      	uxth	r0, r0
 80062dc:	e7d9      	b.n	8006292 <_printf_i+0xde>
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	680d      	ldr	r5, [r1, #0]
 80062e2:	1d10      	adds	r0, r2, #4
 80062e4:	6949      	ldr	r1, [r1, #20]
 80062e6:	6018      	str	r0, [r3, #0]
 80062e8:	6813      	ldr	r3, [r2, #0]
 80062ea:	062e      	lsls	r6, r5, #24
 80062ec:	d501      	bpl.n	80062f2 <_printf_i+0x13e>
 80062ee:	6019      	str	r1, [r3, #0]
 80062f0:	e002      	b.n	80062f8 <_printf_i+0x144>
 80062f2:	066d      	lsls	r5, r5, #25
 80062f4:	d5fb      	bpl.n	80062ee <_printf_i+0x13a>
 80062f6:	8019      	strh	r1, [r3, #0]
 80062f8:	2300      	movs	r3, #0
 80062fa:	9d02      	ldr	r5, [sp, #8]
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	e04f      	b.n	80063a0 <_printf_i+0x1ec>
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	1d11      	adds	r1, r2, #4
 8006304:	6019      	str	r1, [r3, #0]
 8006306:	6815      	ldr	r5, [r2, #0]
 8006308:	2100      	movs	r1, #0
 800630a:	6862      	ldr	r2, [r4, #4]
 800630c:	0028      	movs	r0, r5
 800630e:	f000 f859 	bl	80063c4 <memchr>
 8006312:	2800      	cmp	r0, #0
 8006314:	d001      	beq.n	800631a <_printf_i+0x166>
 8006316:	1b40      	subs	r0, r0, r5
 8006318:	6060      	str	r0, [r4, #4]
 800631a:	6863      	ldr	r3, [r4, #4]
 800631c:	6123      	str	r3, [r4, #16]
 800631e:	2300      	movs	r3, #0
 8006320:	9a02      	ldr	r2, [sp, #8]
 8006322:	7013      	strb	r3, [r2, #0]
 8006324:	e03c      	b.n	80063a0 <_printf_i+0x1ec>
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	002a      	movs	r2, r5
 800632a:	9904      	ldr	r1, [sp, #16]
 800632c:	9803      	ldr	r0, [sp, #12]
 800632e:	9d05      	ldr	r5, [sp, #20]
 8006330:	47a8      	blx	r5
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	d03e      	beq.n	80063b4 <_printf_i+0x200>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	079b      	lsls	r3, r3, #30
 800633a:	d415      	bmi.n	8006368 <_printf_i+0x1b4>
 800633c:	9b07      	ldr	r3, [sp, #28]
 800633e:	68e0      	ldr	r0, [r4, #12]
 8006340:	4298      	cmp	r0, r3
 8006342:	da39      	bge.n	80063b8 <_printf_i+0x204>
 8006344:	0018      	movs	r0, r3
 8006346:	e037      	b.n	80063b8 <_printf_i+0x204>
 8006348:	0022      	movs	r2, r4
 800634a:	2301      	movs	r3, #1
 800634c:	3219      	adds	r2, #25
 800634e:	9904      	ldr	r1, [sp, #16]
 8006350:	9803      	ldr	r0, [sp, #12]
 8006352:	9e05      	ldr	r6, [sp, #20]
 8006354:	47b0      	blx	r6
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	d02c      	beq.n	80063b4 <_printf_i+0x200>
 800635a:	3501      	adds	r5, #1
 800635c:	68e3      	ldr	r3, [r4, #12]
 800635e:	9a07      	ldr	r2, [sp, #28]
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	42ab      	cmp	r3, r5
 8006364:	dcf0      	bgt.n	8006348 <_printf_i+0x194>
 8006366:	e7e9      	b.n	800633c <_printf_i+0x188>
 8006368:	2500      	movs	r5, #0
 800636a:	e7f7      	b.n	800635c <_printf_i+0x1a8>
 800636c:	2800      	cmp	r0, #0
 800636e:	d0ad      	beq.n	80062cc <_printf_i+0x118>
 8006370:	9d02      	ldr	r5, [sp, #8]
 8006372:	0039      	movs	r1, r7
 8006374:	f7f9 ff4c 	bl	8000210 <__aeabi_uidivmod>
 8006378:	5c73      	ldrb	r3, [r6, r1]
 800637a:	3d01      	subs	r5, #1
 800637c:	702b      	strb	r3, [r5, #0]
 800637e:	2800      	cmp	r0, #0
 8006380:	d1f7      	bne.n	8006372 <_printf_i+0x1be>
 8006382:	2f08      	cmp	r7, #8
 8006384:	d109      	bne.n	800639a <_printf_i+0x1e6>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	07db      	lsls	r3, r3, #31
 800638a:	d506      	bpl.n	800639a <_printf_i+0x1e6>
 800638c:	6863      	ldr	r3, [r4, #4]
 800638e:	6922      	ldr	r2, [r4, #16]
 8006390:	4293      	cmp	r3, r2
 8006392:	dc02      	bgt.n	800639a <_printf_i+0x1e6>
 8006394:	2330      	movs	r3, #48	; 0x30
 8006396:	3d01      	subs	r5, #1
 8006398:	702b      	strb	r3, [r5, #0]
 800639a:	9b02      	ldr	r3, [sp, #8]
 800639c:	1b5b      	subs	r3, r3, r5
 800639e:	6123      	str	r3, [r4, #16]
 80063a0:	9b05      	ldr	r3, [sp, #20]
 80063a2:	aa07      	add	r2, sp, #28
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	0021      	movs	r1, r4
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	9803      	ldr	r0, [sp, #12]
 80063ac:	f7ff fe94 	bl	80060d8 <_printf_common>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d1b8      	bne.n	8006326 <_printf_i+0x172>
 80063b4:	2001      	movs	r0, #1
 80063b6:	4240      	negs	r0, r0
 80063b8:	b009      	add	sp, #36	; 0x24
 80063ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063bc:	08008dc9 	.word	0x08008dc9
 80063c0:	08008dda 	.word	0x08008dda

080063c4 <memchr>:
 80063c4:	b2c9      	uxtb	r1, r1
 80063c6:	1882      	adds	r2, r0, r2
 80063c8:	4290      	cmp	r0, r2
 80063ca:	d101      	bne.n	80063d0 <memchr+0xc>
 80063cc:	2000      	movs	r0, #0
 80063ce:	4770      	bx	lr
 80063d0:	7803      	ldrb	r3, [r0, #0]
 80063d2:	428b      	cmp	r3, r1
 80063d4:	d0fb      	beq.n	80063ce <memchr+0xa>
 80063d6:	3001      	adds	r0, #1
 80063d8:	e7f6      	b.n	80063c8 <memchr+0x4>

080063da <memmove>:
 80063da:	b510      	push	{r4, lr}
 80063dc:	4288      	cmp	r0, r1
 80063de:	d902      	bls.n	80063e6 <memmove+0xc>
 80063e0:	188b      	adds	r3, r1, r2
 80063e2:	4298      	cmp	r0, r3
 80063e4:	d303      	bcc.n	80063ee <memmove+0x14>
 80063e6:	2300      	movs	r3, #0
 80063e8:	e007      	b.n	80063fa <memmove+0x20>
 80063ea:	5c8b      	ldrb	r3, [r1, r2]
 80063ec:	5483      	strb	r3, [r0, r2]
 80063ee:	3a01      	subs	r2, #1
 80063f0:	d2fb      	bcs.n	80063ea <memmove+0x10>
 80063f2:	bd10      	pop	{r4, pc}
 80063f4:	5ccc      	ldrb	r4, [r1, r3]
 80063f6:	54c4      	strb	r4, [r0, r3]
 80063f8:	3301      	adds	r3, #1
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d1fa      	bne.n	80063f4 <memmove+0x1a>
 80063fe:	e7f8      	b.n	80063f2 <memmove+0x18>

08006400 <_free_r>:
 8006400:	b570      	push	{r4, r5, r6, lr}
 8006402:	0005      	movs	r5, r0
 8006404:	2900      	cmp	r1, #0
 8006406:	d010      	beq.n	800642a <_free_r+0x2a>
 8006408:	1f0c      	subs	r4, r1, #4
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	da00      	bge.n	8006412 <_free_r+0x12>
 8006410:	18e4      	adds	r4, r4, r3
 8006412:	0028      	movs	r0, r5
 8006414:	f000 f8d4 	bl	80065c0 <__malloc_lock>
 8006418:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <_free_r+0x90>)
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <_free_r+0x2c>
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	6014      	str	r4, [r2, #0]
 8006424:	0028      	movs	r0, r5
 8006426:	f000 f8cc 	bl	80065c2 <__malloc_unlock>
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	42a3      	cmp	r3, r4
 800642e:	d909      	bls.n	8006444 <_free_r+0x44>
 8006430:	6821      	ldr	r1, [r4, #0]
 8006432:	1860      	adds	r0, r4, r1
 8006434:	4283      	cmp	r3, r0
 8006436:	d1f3      	bne.n	8006420 <_free_r+0x20>
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	1841      	adds	r1, r0, r1
 800643e:	6021      	str	r1, [r4, #0]
 8006440:	e7ee      	b.n	8006420 <_free_r+0x20>
 8006442:	0013      	movs	r3, r2
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	2a00      	cmp	r2, #0
 8006448:	d001      	beq.n	800644e <_free_r+0x4e>
 800644a:	42a2      	cmp	r2, r4
 800644c:	d9f9      	bls.n	8006442 <_free_r+0x42>
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	1858      	adds	r0, r3, r1
 8006452:	42a0      	cmp	r0, r4
 8006454:	d10b      	bne.n	800646e <_free_r+0x6e>
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	1809      	adds	r1, r1, r0
 800645a:	1858      	adds	r0, r3, r1
 800645c:	6019      	str	r1, [r3, #0]
 800645e:	4282      	cmp	r2, r0
 8006460:	d1e0      	bne.n	8006424 <_free_r+0x24>
 8006462:	6810      	ldr	r0, [r2, #0]
 8006464:	6852      	ldr	r2, [r2, #4]
 8006466:	1841      	adds	r1, r0, r1
 8006468:	6019      	str	r1, [r3, #0]
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	e7da      	b.n	8006424 <_free_r+0x24>
 800646e:	42a0      	cmp	r0, r4
 8006470:	d902      	bls.n	8006478 <_free_r+0x78>
 8006472:	230c      	movs	r3, #12
 8006474:	602b      	str	r3, [r5, #0]
 8006476:	e7d5      	b.n	8006424 <_free_r+0x24>
 8006478:	6821      	ldr	r1, [r4, #0]
 800647a:	1860      	adds	r0, r4, r1
 800647c:	4282      	cmp	r2, r0
 800647e:	d103      	bne.n	8006488 <_free_r+0x88>
 8006480:	6810      	ldr	r0, [r2, #0]
 8006482:	6852      	ldr	r2, [r2, #4]
 8006484:	1841      	adds	r1, r0, r1
 8006486:	6021      	str	r1, [r4, #0]
 8006488:	6062      	str	r2, [r4, #4]
 800648a:	605c      	str	r4, [r3, #4]
 800648c:	e7ca      	b.n	8006424 <_free_r+0x24>
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	200002a8 	.word	0x200002a8

08006494 <_malloc_r>:
 8006494:	2303      	movs	r3, #3
 8006496:	b570      	push	{r4, r5, r6, lr}
 8006498:	1ccd      	adds	r5, r1, #3
 800649a:	439d      	bics	r5, r3
 800649c:	3508      	adds	r5, #8
 800649e:	0006      	movs	r6, r0
 80064a0:	2d0c      	cmp	r5, #12
 80064a2:	d21e      	bcs.n	80064e2 <_malloc_r+0x4e>
 80064a4:	250c      	movs	r5, #12
 80064a6:	42a9      	cmp	r1, r5
 80064a8:	d81d      	bhi.n	80064e6 <_malloc_r+0x52>
 80064aa:	0030      	movs	r0, r6
 80064ac:	f000 f888 	bl	80065c0 <__malloc_lock>
 80064b0:	4a25      	ldr	r2, [pc, #148]	; (8006548 <_malloc_r+0xb4>)
 80064b2:	6814      	ldr	r4, [r2, #0]
 80064b4:	0021      	movs	r1, r4
 80064b6:	2900      	cmp	r1, #0
 80064b8:	d119      	bne.n	80064ee <_malloc_r+0x5a>
 80064ba:	4c24      	ldr	r4, [pc, #144]	; (800654c <_malloc_r+0xb8>)
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d103      	bne.n	80064ca <_malloc_r+0x36>
 80064c2:	0030      	movs	r0, r6
 80064c4:	f000 f86a 	bl	800659c <_sbrk_r>
 80064c8:	6020      	str	r0, [r4, #0]
 80064ca:	0029      	movs	r1, r5
 80064cc:	0030      	movs	r0, r6
 80064ce:	f000 f865 	bl	800659c <_sbrk_r>
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	d12b      	bne.n	800652e <_malloc_r+0x9a>
 80064d6:	230c      	movs	r3, #12
 80064d8:	0030      	movs	r0, r6
 80064da:	6033      	str	r3, [r6, #0]
 80064dc:	f000 f871 	bl	80065c2 <__malloc_unlock>
 80064e0:	e003      	b.n	80064ea <_malloc_r+0x56>
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	dadf      	bge.n	80064a6 <_malloc_r+0x12>
 80064e6:	230c      	movs	r3, #12
 80064e8:	6033      	str	r3, [r6, #0]
 80064ea:	2000      	movs	r0, #0
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
 80064ee:	680b      	ldr	r3, [r1, #0]
 80064f0:	1b5b      	subs	r3, r3, r5
 80064f2:	d419      	bmi.n	8006528 <_malloc_r+0x94>
 80064f4:	2b0b      	cmp	r3, #11
 80064f6:	d903      	bls.n	8006500 <_malloc_r+0x6c>
 80064f8:	600b      	str	r3, [r1, #0]
 80064fa:	18cc      	adds	r4, r1, r3
 80064fc:	6025      	str	r5, [r4, #0]
 80064fe:	e003      	b.n	8006508 <_malloc_r+0x74>
 8006500:	684b      	ldr	r3, [r1, #4]
 8006502:	428c      	cmp	r4, r1
 8006504:	d10d      	bne.n	8006522 <_malloc_r+0x8e>
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	0030      	movs	r0, r6
 800650a:	f000 f85a 	bl	80065c2 <__malloc_unlock>
 800650e:	0020      	movs	r0, r4
 8006510:	2207      	movs	r2, #7
 8006512:	300b      	adds	r0, #11
 8006514:	1d23      	adds	r3, r4, #4
 8006516:	4390      	bics	r0, r2
 8006518:	1ac3      	subs	r3, r0, r3
 800651a:	d0e7      	beq.n	80064ec <_malloc_r+0x58>
 800651c:	425a      	negs	r2, r3
 800651e:	50e2      	str	r2, [r4, r3]
 8006520:	e7e4      	b.n	80064ec <_malloc_r+0x58>
 8006522:	6063      	str	r3, [r4, #4]
 8006524:	000c      	movs	r4, r1
 8006526:	e7ef      	b.n	8006508 <_malloc_r+0x74>
 8006528:	000c      	movs	r4, r1
 800652a:	6849      	ldr	r1, [r1, #4]
 800652c:	e7c3      	b.n	80064b6 <_malloc_r+0x22>
 800652e:	2303      	movs	r3, #3
 8006530:	1cc4      	adds	r4, r0, #3
 8006532:	439c      	bics	r4, r3
 8006534:	42a0      	cmp	r0, r4
 8006536:	d0e1      	beq.n	80064fc <_malloc_r+0x68>
 8006538:	1a21      	subs	r1, r4, r0
 800653a:	0030      	movs	r0, r6
 800653c:	f000 f82e 	bl	800659c <_sbrk_r>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d1db      	bne.n	80064fc <_malloc_r+0x68>
 8006544:	e7c7      	b.n	80064d6 <_malloc_r+0x42>
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	200002a8 	.word	0x200002a8
 800654c:	200002ac 	.word	0x200002ac

08006550 <_realloc_r>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	0007      	movs	r7, r0
 8006554:	000d      	movs	r5, r1
 8006556:	0016      	movs	r6, r2
 8006558:	2900      	cmp	r1, #0
 800655a:	d105      	bne.n	8006568 <_realloc_r+0x18>
 800655c:	0011      	movs	r1, r2
 800655e:	f7ff ff99 	bl	8006494 <_malloc_r>
 8006562:	0004      	movs	r4, r0
 8006564:	0020      	movs	r0, r4
 8006566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006568:	2a00      	cmp	r2, #0
 800656a:	d103      	bne.n	8006574 <_realloc_r+0x24>
 800656c:	f7ff ff48 	bl	8006400 <_free_r>
 8006570:	0034      	movs	r4, r6
 8006572:	e7f7      	b.n	8006564 <_realloc_r+0x14>
 8006574:	f000 f826 	bl	80065c4 <_malloc_usable_size_r>
 8006578:	002c      	movs	r4, r5
 800657a:	42b0      	cmp	r0, r6
 800657c:	d2f2      	bcs.n	8006564 <_realloc_r+0x14>
 800657e:	0031      	movs	r1, r6
 8006580:	0038      	movs	r0, r7
 8006582:	f7ff ff87 	bl	8006494 <_malloc_r>
 8006586:	1e04      	subs	r4, r0, #0
 8006588:	d0ec      	beq.n	8006564 <_realloc_r+0x14>
 800658a:	0029      	movs	r1, r5
 800658c:	0032      	movs	r2, r6
 800658e:	f7ff fc11 	bl	8005db4 <memcpy>
 8006592:	0029      	movs	r1, r5
 8006594:	0038      	movs	r0, r7
 8006596:	f7ff ff33 	bl	8006400 <_free_r>
 800659a:	e7e3      	b.n	8006564 <_realloc_r+0x14>

0800659c <_sbrk_r>:
 800659c:	2300      	movs	r3, #0
 800659e:	b570      	push	{r4, r5, r6, lr}
 80065a0:	4c06      	ldr	r4, [pc, #24]	; (80065bc <_sbrk_r+0x20>)
 80065a2:	0005      	movs	r5, r0
 80065a4:	0008      	movs	r0, r1
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	f7fb f97e 	bl	80018a8 <_sbrk>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d103      	bne.n	80065b8 <_sbrk_r+0x1c>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d000      	beq.n	80065b8 <_sbrk_r+0x1c>
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	200006c8 	.word	0x200006c8

080065c0 <__malloc_lock>:
 80065c0:	4770      	bx	lr

080065c2 <__malloc_unlock>:
 80065c2:	4770      	bx	lr

080065c4 <_malloc_usable_size_r>:
 80065c4:	1f0b      	subs	r3, r1, #4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	1f18      	subs	r0, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	da01      	bge.n	80065d2 <_malloc_usable_size_r+0xe>
 80065ce:	580b      	ldr	r3, [r1, r0]
 80065d0:	18c0      	adds	r0, r0, r3
 80065d2:	4770      	bx	lr

080065d4 <_init>:
 80065d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065da:	bc08      	pop	{r3}
 80065dc:	469e      	mov	lr, r3
 80065de:	4770      	bx	lr

080065e0 <_fini>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	46c0      	nop			; (mov r8, r8)
 80065e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065e6:	bc08      	pop	{r3}
 80065e8:	469e      	mov	lr, r3
 80065ea:	4770      	bx	lr
